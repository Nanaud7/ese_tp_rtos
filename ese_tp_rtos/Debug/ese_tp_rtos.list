
ese_tp_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007038  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007540  08007540  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007548  08007548  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004444  20000084  080075d4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044c8  080075d4  000244c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd8e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dab  00000000  00000000  0003be42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  00041058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298cf  00000000  00000000  00042338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d81  00000000  00000000  0006bc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9cb6  00000000  00000000  00083988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d63e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  0017d694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080071f0 	.word	0x080071f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	080071f0 	.word	0x080071f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <vApplicationGetIdleTaskMemory+0x30>)
 80005be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200000a0 	.word	0x200000a0
 80005d8:	20000154 	.word	0x20000154

080005dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_FREERTOS_Init+0x30>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 fd5a 	bl	80040b2 <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <MX_FREERTOS_Init+0x34>)
 8000602:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bdb0      	pop	{r4, r5, r7, pc}
 800060c:	08007214 	.word	0x08007214
 8000610:	200043dc 	.word	0x200043dc

08000614 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f003 fd94 	bl	800414a <osDelay>
 8000622:	e7fb      	b.n	800061c <StartDefaultTask+0x8>

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0x5c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_GPIO_Init+0x5c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	printf("Fonction bidon\r\n");
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <fonction+0x4c>)
 8000690:	f005 fec2 	bl	8006418 <puts>

	printf("argc = %d\r\n", argc);
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	480f      	ldr	r0, [pc, #60]	; (80006d4 <fonction+0x50>)
 8000698:	f005 fe38 	bl	800630c <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e00c      	b.n	80006bc <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	68f9      	ldr	r1, [r7, #12]
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <fonction+0x54>)
 80006b2:	f005 fe2b 	bl	800630c <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbee      	blt.n	80006a2 <fonction+0x1e>
	}

	return 0;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08007230 	.word	0x08007230
 80006d4:	08007240 	.word	0x08007240
 80006d8:	0800724c 	.word	0x0800724c

080006dc <addition>:

int addition(int argc, char ** argv) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	// Usage : a <nombre1> <nombre2>
	// Affiche le résultat de l'addition des deux nombres

	if (argc == 3) {
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d116      	bne.n	800071a <addition+0x3e>
		int a, b;
		a = atoi(argv[1]);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	3304      	adds	r3, #4
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f005 fc72 	bl	8005fdc <atoi>
 80006f8:	60f8      	str	r0, [r7, #12]
		b = atoi(argv[2]);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	3308      	adds	r3, #8
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fc6b 	bl	8005fdc <atoi>
 8000706:	60b8      	str	r0, [r7, #8]
		printf("%d + %d = %d\r\n", a, b, a+b);
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	4413      	add	r3, r2
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	68f9      	ldr	r1, [r7, #12]
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <addition+0x5c>)
 8000714:	f005 fdfa 	bl	800630c <iprintf>
 8000718:	e008      	b.n	800072c <addition+0x50>
	}
	else {
		printf("Erreur: nombre d'arguments incorrect\r\n");
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <addition+0x60>)
 800071c:	f005 fe7c 	bl	8006418 <puts>
		printf("Usage : %s <nombre1> <nombre2>\r\n", argv[0]);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <addition+0x64>)
 8000728:	f005 fdf0 	bl	800630c <iprintf>
	}

	return 0;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	08007264 	.word	0x08007264
 800073c:	08007274 	.word	0x08007274
 8000740:	0800729c 	.word	0x0800729c

08000744 <vTaskShell>:

void vTaskShell(void * p) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	shell_init();
 800074c:	f000 f970 	bl	8000a30 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <vTaskShell+0x2c>)
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <vTaskShell+0x30>)
 8000754:	2066      	movs	r0, #102	; 0x66
 8000756:	f000 f997 	bl	8000a88 <shell_add>
	shell_add('a', addition, "Ma super addition");
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <vTaskShell+0x34>)
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <vTaskShell+0x38>)
 800075e:	2061      	movs	r0, #97	; 0x61
 8000760:	f000 f992 	bl	8000a88 <shell_add>

	shell_run();
 8000764:	f000 fa2e 	bl	8000bc4 <shell_run>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	080072c0 	.word	0x080072c0
 8000774:	08000685 	.word	0x08000685
 8000778:	080072d8 	.word	0x080072d8
 800077c:	080006dd 	.word	0x080006dd

08000780 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800078a:	f000 fc9e 	bl	80010ca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800078e:	f000 f82b 	bl	80007e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000792:	f7ff ff47 	bl	8000624 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000796:	f000 fbd5 	bl	8000f44 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&c, sizeof(c));
 800079a:	2201      	movs	r2, #1
 800079c:	490d      	ldr	r1, [pc, #52]	; (80007d4 <main+0x54>)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <main+0x58>)
 80007a0:	f002 fcb1 	bl	8003106 <HAL_UART_Receive_IT>

	xReturned = xTaskCreate(
 80007a4:	463b      	mov	r3, r7
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	2301      	movs	r3, #1
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b2:	490a      	ldr	r1, [pc, #40]	; (80007dc <main+0x5c>)
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <main+0x60>)
 80007b6:	f004 f93e 	bl	8004a36 <xTaskCreate>
 80007ba:	6078      	str	r0, [r7, #4]
			STACK_SIZE,      	/* Stack size in words, not bytes. */
			( void * ) NULL,    /* Parameter passed into the task. */
			1,					/* Priority at which the task is created. */
			&xHandle );      	/* Used to pass out the created task's handle. */

	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c2:	d102      	bne.n	80007ca <main+0x4a>
		printf("Task Shell creation error: Could not allocate required memory\r\n");
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <main+0x64>)
 80007c6:	f005 fe27 	bl	8006418 <puts>
	}
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80007ca:	f7ff ff07 	bl	80005dc <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80007ce:	f003 fc69 	bl	80040a4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80007d2:	e7fe      	b.n	80007d2 <main+0x52>
 80007d4:	20000354 	.word	0x20000354
 80007d8:	20004430 	.word	0x20004430
 80007dc:	080072ec 	.word	0x080072ec
 80007e0:	08000745 	.word	0x08000745
 80007e4:	080072f4 	.word	0x080072f4

080007e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0b4      	sub	sp, #208	; 0xd0
 80007ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fd25 	bl	8006246 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2284      	movs	r2, #132	; 0x84
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fd16 	bl	8006246 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b39      	ldr	r3, [pc, #228]	; (8000900 <SystemClock_Config+0x118>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a38      	ldr	r2, [pc, #224]	; (8000900 <SystemClock_Config+0x118>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b36      	ldr	r3, [pc, #216]	; (8000900 <SystemClock_Config+0x118>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <SystemClock_Config+0x11c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a33      	ldr	r2, [pc, #204]	; (8000904 <SystemClock_Config+0x11c>)
 8000838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <SystemClock_Config+0x11c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084a:	2301      	movs	r3, #1
 800084c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000866:	2319      	movs	r3, #25
 8000868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 432;
 800086c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000884:	4618      	mov	r0, r3
 8000886:	f000 ffe1 	bl	800184c <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8000890:	f000 f86e 	bl	8000970 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000894:	f000 ff8a 	bl	80017ac <HAL_PWREx_EnableOverDrive>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xba>
	{
		Error_Handler();
 800089e:	f000 f867 	bl	8000970 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008c8:	2107      	movs	r1, #7
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fa62 	bl	8001d94 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xf2>
	{
		Error_Handler();
 80008d6:	f000 f84b 	bl	8000970 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008de:	2300      	movs	r3, #0
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fc5c 	bl	80021a4 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x10e>
	{
		Error_Handler();
 80008f2:	f000 f83d 	bl	8000970 <Error_Handler>
	}
}
 80008f6:	bf00      	nop
 80008f8:	37d0      	adds	r7, #208	; 0xd0
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <HAL_UART_RxCpltCallback+0x34>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10b      	bne.n	8000932 <HAL_UART_RxCpltCallback+0x2a>
		xQueueSendFromISR(qShell, &c, NULL);
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_UART_RxCpltCallback+0x38>)
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	2200      	movs	r2, #0
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <HAL_UART_RxCpltCallback+0x3c>)
 8000924:	f003 fda5 	bl	8004472 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&c, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	4906      	ldr	r1, [pc, #24]	; (8000944 <HAL_UART_RxCpltCallback+0x3c>)
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <HAL_UART_RxCpltCallback+0x40>)
 800092e:	f002 fbea 	bl	8003106 <HAL_UART_Receive_IT>
	}
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40011000 	.word	0x40011000
 8000940:	200043e0 	.word	0x200043e0
 8000944:	20000354 	.word	0x20000354
 8000948:	20004430 	.word	0x20004430

0800094c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800095e:	f000 fbc1 	bl	80010e4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40001000 	.word	0x40001000

08000970 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000988:	1d39      	adds	r1, r7, #4
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	2201      	movs	r2, #1
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <__io_putchar+0x20>)
 8000992:	f002 fb25 	bl	8002fe0 <HAL_UART_Transmit>
	return ch;
 8000996:	687b      	ldr	r3, [r7, #4]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20004430 	.word	0x20004430

080009a4 <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);

	return c;
}

int uart_write(char * s, uint16_t size) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 80009b0:	887a      	ldrh	r2, [r7, #2]
 80009b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <uart_write+0x24>)
 80009ba:	f002 fb11 	bl	8002fe0 <HAL_UART_Transmit>
	return size;
 80009be:	887b      	ldrh	r3, [r7, #2]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20004430 	.word	0x20004430

080009cc <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    int i;
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e019      	b.n	8000a10 <sh_help+0x44>
        printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80009dc:	4911      	ldr	r1, [pc, #68]	; (8000a24 <sh_help+0x58>)
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	440b      	add	r3, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <sh_help+0x58>)
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	3308      	adds	r3, #8
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4601      	mov	r1, r0
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <sh_help+0x5c>)
 8000a06:	f005 fc81 	bl	800630c <iprintf>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <sh_help+0x60>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	dbe0      	blt.n	80009dc <sh_help+0x10>
    }

    return 0;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000035c 	.word	0x2000035c
 8000a28:	08007334 	.word	0x08007334
 8000a2c:	20000358 	.word	0x20000358

08000a30 <shell_init>:

void shell_init() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000a36:	4810      	ldr	r0, [pc, #64]	; (8000a78 <shell_init+0x48>)
 8000a38:	f005 fcee 	bl	8006418 <puts>

	shell_add('h', sh_help, help);
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <shell_init+0x4c>)
 8000a3e:	4910      	ldr	r1, [pc, #64]	; (8000a80 <shell_init+0x50>)
 8000a40:	2068      	movs	r0, #104	; 0x68
 8000a42:	f000 f821 	bl	8000a88 <shell_add>
	qShell = xQueueCreate(1,sizeof(char));
 8000a46:	2200      	movs	r2, #0
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f003 fcb0 	bl	80043b0 <xQueueGenericCreate>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <shell_init+0x54>)
 8000a54:	6013      	str	r3, [r2, #0]

	for (int i = 0 ; i < 3 ; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e005      	b.n	8000a68 <shell_init+0x38>

		HAL_Delay(200);
 8000a5c:	20c8      	movs	r0, #200	; 0xc8
 8000a5e:	f000 fb61 	bl	8001124 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	ddf6      	ble.n	8000a5c <shell_init+0x2c>
	}
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	0800733c 	.word	0x0800733c
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	080009cd 	.word	0x080009cd
 8000a84:	200043e0 	.word	0x200043e0

08000a88 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	73fb      	strb	r3, [r7, #15]
    if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <shell_add+0x74>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a9c:	dc26      	bgt.n	8000aec <shell_add+0x64>
        shell_func_list[shell_func_list_size].c = c;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <shell_add+0x74>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4917      	ldr	r1, [pc, #92]	; (8000b00 <shell_add+0x78>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	440b      	add	r3, r1
 8000aae:	7bfa      	ldrb	r2, [r7, #15]
 8000ab0:	701a      	strb	r2, [r3, #0]
        shell_func_list[shell_func_list_size].func = pfunc;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <shell_add+0x74>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4912      	ldr	r1, [pc, #72]	; (8000b00 <shell_add+0x78>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	601a      	str	r2, [r3, #0]
        shell_func_list[shell_func_list_size].description = description;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <shell_add+0x74>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <shell_add+0x78>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	3308      	adds	r3, #8
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]
        shell_func_list_size++;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <shell_add+0x74>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a05      	ldr	r2, [pc, #20]	; (8000afc <shell_add+0x74>)
 8000ae6:	6013      	str	r3, [r2, #0]
        return 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e001      	b.n	8000af0 <shell_add+0x68>
    }

    return -1;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	20000358 	.word	0x20000358
 8000b00:	2000035c 	.word	0x2000035c

08000b04 <shell_exec>:

int shell_exec(char c, char * buf) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]

    int argc;
    char * argv[ARGC_MAX];
    char *p;

    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
 8000b14:	e040      	b.n	8000b98 <shell_exec+0x94>
        if (shell_func_list[i].c == c) {
 8000b16:	4928      	ldr	r1, [pc, #160]	; (8000bb8 <shell_exec+0xb4>)
 8000b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	79fa      	ldrb	r2, [r7, #7]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d132      	bne.n	8000b92 <shell_exec+0x8e>
            argc = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
            argv[0] = buf;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	60fb      	str	r3, [r7, #12]

            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b38:	e014      	b.n	8000b64 <shell_exec+0x60>
                if(*p == ' ') {
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b20      	cmp	r3, #32
 8000b40:	d10d      	bne.n	8000b5e <shell_exec+0x5a>
                    *p = '\0';
 8000b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p+1;
 8000b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	633a      	str	r2, [r7, #48]	; 0x30
 8000b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b50:	3201      	adds	r2, #1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000b58:	440b      	add	r3, r1
 8000b5a:	f843 2c2c 	str.w	r2, [r3, #-44]
            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b60:	3301      	adds	r3, #1
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <shell_exec+0x6e>
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	dde3      	ble.n	8000b3a <shell_exec+0x36>
                }
            }

            return shell_func_list[i].func(argc, argv);
 8000b72:	4911      	ldr	r1, [pc, #68]	; (8000bb8 <shell_exec+0xb4>)
 8000b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	3304      	adds	r3, #4
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f107 020c 	add.w	r2, r7, #12
 8000b88:	4611      	mov	r1, r2
 8000b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b8c:	4798      	blx	r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	e00e      	b.n	8000bb0 <shell_exec+0xac>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 8000b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b94:	3301      	adds	r3, #1
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <shell_exec+0xb8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dbb9      	blt.n	8000b16 <shell_exec+0x12>
        }
    }
    printf("%c: no such command\r\n", c);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <shell_exec+0xbc>)
 8000ba8:	f005 fbb0 	bl	800630c <iprintf>
    return -1;
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3738      	adds	r7, #56	; 0x38
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000035c 	.word	0x2000035c
 8000bbc:	20000358 	.word	0x20000358
 8000bc0:	08007364 	.word	0x08007364

08000bc4 <shell_run>:

static char buf[BUFFER_SIZE];
static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
	int reading = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]

	while (1) {
		  uart_write(prompt, 2);
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <shell_run+0xa8>)
 8000bd6:	f7ff fee5 	bl	80009a4 <uart_write>
		  reading = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]

		  while(reading) {
 8000bde:	e03b      	b.n	8000c58 <shell_run+0x94>
			  //char c = uart_read();
			  char c = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
			  xQueueReceive(qShell, &c, portMAX_DELAY);
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <shell_run+0xac>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	1df9      	adds	r1, r7, #7
 8000bea:	f04f 32ff 	mov.w	r2, #4294967295
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fce0 	bl	80045b4 <xQueueReceive>

			  switch (c) {
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d013      	beq.n	8000c22 <shell_run+0x5e>
 8000bfa:	2b0d      	cmp	r3, #13
 8000bfc:	d11c      	bne.n	8000c38 <shell_run+0x74>
				  //process RETURN key
				  case '\r':
					  //case '\n':
					  printf("\r\n");    //finish line
 8000bfe:	481d      	ldr	r0, [pc, #116]	; (8000c74 <shell_run+0xb0>)
 8000c00:	f005 fc0a 	bl	8006418 <puts>
					  buf[pos++] = 0;     //to use cprintf...
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <shell_run+0xb4>)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	54d1      	strb	r1, [r2, r3]
					  printf(":%s\r\n", buf);
 8000c10:	4919      	ldr	r1, [pc, #100]	; (8000c78 <shell_run+0xb4>)
 8000c12:	481a      	ldr	r0, [pc, #104]	; (8000c7c <shell_run+0xb8>)
 8000c14:	f005 fb7a 	bl	800630c <iprintf>
					  reading = 0;        //exit read loop
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
					  pos = 0;            //reset buffer
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
					  break;
 8000c20:	e01a      	b.n	8000c58 <shell_run+0x94>
					  //backspace
				  case '\b':
					  if (pos > 0) {      //is there a char to delete?
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dd16      	ble.n	8000c56 <shell_run+0x92>
						  pos--;          //remove it in buffer
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]

						  uart_write(backspace, 3);
 8000c2e:	2103      	movs	r1, #3
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <shell_run+0xbc>)
 8000c32:	f7ff feb7 	bl	80009a4 <uart_write>
					  }
					  break;
 8000c36:	e00e      	b.n	8000c56 <shell_run+0x92>
					  //other characters
				  default:
					  //only store characters if buffer has space
					  if (pos < BUFFER_SIZE) {
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b27      	cmp	r3, #39	; 0x27
 8000c3c:	dc0c      	bgt.n	8000c58 <shell_run+0x94>
						  uart_write(&c, 1);
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	2101      	movs	r1, #1
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff feae 	bl	80009a4 <uart_write>
						  buf[pos++] = c; //store
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	79f9      	ldrb	r1, [r7, #7]
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <shell_run+0xb4>)
 8000c52:	54d1      	strb	r1, [r2, r3]
 8000c54:	e000      	b.n	8000c58 <shell_run+0x94>
					  break;
 8000c56:	bf00      	nop
		  while(reading) {
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1c0      	bne.n	8000be0 <shell_run+0x1c>
					  }
			  }
		  }
		  shell_exec(buf[0], buf);
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <shell_run+0xb4>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4905      	ldr	r1, [pc, #20]	; (8000c78 <shell_run+0xb4>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff4d 	bl	8000b04 <shell_exec>
		  uart_write(prompt, 2);
 8000c6a:	e7b2      	b.n	8000bd2 <shell_run+0xe>
 8000c6c:	2000000c 	.word	0x2000000c
 8000c70:	200043e0 	.word	0x200043e0
 8000c74:	0800737c 	.word	0x0800737c
 8000c78:	2000065c 	.word	0x2000065c
 8000c7c:	08007380 	.word	0x08007380
 8000c80:	20000008 	.word	0x20000008

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	f06f 0001 	mvn.w	r0, #1
 8000cc2:	f000 fb0b 	bl	80012dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	2036      	movs	r0, #54	; 0x36
 8000cea:	f000 faf7 	bl	80012dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cee:	2036      	movs	r0, #54	; 0x36
 8000cf0:	f000 fb10 	bl	8001314 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <HAL_InitTick+0xa0>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <HAL_InitTick+0xa0>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_InitTick+0xa0>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0c:	f107 0210 	add.w	r2, r7, #16
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fa12 	bl	8002140 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d1c:	f001 f9e8 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8000d20:	4603      	mov	r3, r0
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <HAL_InitTick+0xa4>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	0c9b      	lsrs	r3, r3, #18
 8000d30:	3b01      	subs	r3, #1
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_InitTick+0xa8>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_InitTick+0xac>)
 8000d38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_InitTick+0xa8>)
 8000d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_InitTick+0xa8>)
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_InitTick+0xa8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_InitTick+0xa8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <HAL_InitTick+0xa8>)
 8000d56:	f001 fe15 	bl	8002984 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d104      	bne.n	8000d6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <HAL_InitTick+0xa8>)
 8000d62:	f001 fe71 	bl	8002a48 <HAL_TIM_Base_Start_IT>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	200043e4 	.word	0x200043e4
 8000d80:	40001000 	.word	0x40001000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <USART1_IRQHandler+0x10>)
 8000db6:	f002 f9e3 	bl	8003180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20004430 	.word	0x20004430

08000dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <TIM6_DAC_IRQHandler+0x10>)
 8000dca:	f001 feb5 	bl	8002b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200043e4 	.word	0x200043e4

08000dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e00a      	b.n	8000e00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	4601      	mov	r1, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf0      	blt.n	8000dea <_read+0x12>
	}

return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e009      	b.n	8000e38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fda7 	bl	8000980 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf1      	blt.n	8000e24 <_write+0x12>
	}
	return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e72:	605a      	str	r2, [r3, #4]
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f005 f87e 	bl	8005fe4 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20050000 	.word	0x20050000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	20000684 	.word	0x20000684
 8000f1c:	200044c8 	.word	0x200044c8

08000f20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f4a:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <MX_USART1_UART_Init+0x5c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_USART1_UART_Init+0x58>)
 8000f88:	f001 ffdc 	bl	8002f44 <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f92:	f7ff fced 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20004430 	.word	0x20004430
 8000fa0:	40011000 	.word	0x40011000

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a29      	ldr	r2, [pc, #164]	; (8001068 <HAL_UART_MspInit+0xc4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d14c      	bne.n	8001060 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a22      	ldr	r2, [pc, #136]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <HAL_UART_MspInit+0xc8>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_UART_MspInit+0xc8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800101e:	2307      	movs	r3, #7
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <HAL_UART_MspInit+0xcc>)
 800102a:	f000 fa13 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	480a      	ldr	r0, [pc, #40]	; (8001074 <HAL_UART_MspInit+0xd0>)
 800104c:	f000 fa02 	bl	8001454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	2025      	movs	r0, #37	; 0x25
 8001056:	f000 f941 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800105a:	2025      	movs	r0, #37	; 0x25
 800105c:	f000 f95a 	bl	8001314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40011000 	.word	0x40011000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	40020000 	.word	0x40020000

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ff3d 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f005 f899 	bl	80061dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fb69 	bl	8000780 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80010bc:	08007550 	.word	0x08007550
  ldr r2, =_sbss
 80010c0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80010c4:	200044c8 	.word	0x200044c8

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>

080010ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 f8f9 	bl	80012c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f7ff fdfd 	bl	8000cd4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fdd3 	bl	8000c84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000018 	.word	0x20000018
 8001108:	200044b4 	.word	0x200044b4

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200044b4 	.word	0x200044b4

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000018 	.word	0x20000018

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	4313      	orrs	r3, r2
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	05fa0000 	.word	0x05fa0000

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff4c 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ee:	f7ff ff61 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff ffb1 	bl	8001260 <NVIC_EncodePriority>
 80012fe:	4602      	mov	r2, r0
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff80 	bl	800120c <__NVIC_SetPriority>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff54 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800133e:	f7ff fee5 	bl	800110c <HAL_GetTick>
 8001342:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d008      	beq.n	8001362 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e052      	b.n	8001408 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0216 	bic.w	r2, r2, #22
 8001370:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001380:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <HAL_DMA_Abort+0x62>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0208 	bic.w	r2, r2, #8
 80013a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b2:	e013      	b.n	80013dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013b4:	f7ff feaa 	bl	800110c <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d90c      	bls.n	80013dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2220      	movs	r2, #32
 80013c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e015      	b.n	8001408 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e4      	bne.n	80013b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	223f      	movs	r2, #63	; 0x3f
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d004      	beq.n	800142e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00c      	b.n	8001448 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2205      	movs	r2, #5
 8001432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e175      	b.n	8001760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8164 	bne.w	800175a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d00b      	beq.n	80014b2 <HAL_GPIO_Init+0x5e>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a6:	2b11      	cmp	r3, #17
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d130      	bne.n	8001514 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x100>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b12      	cmp	r3, #18
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80be 	beq.w	800175a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_GPIO_Init+0x324>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_GPIO_Init+0x324>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_GPIO_Init+0x324>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015f6:	4a61      	ldr	r2, [pc, #388]	; (800177c <HAL_GPIO_Init+0x328>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_GPIO_Init+0x32c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d037      	beq.n	8001692 <HAL_GPIO_Init+0x23e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <HAL_GPIO_Init+0x330>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d031      	beq.n	800168e <HAL_GPIO_Init+0x23a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a56      	ldr	r2, [pc, #344]	; (8001788 <HAL_GPIO_Init+0x334>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02b      	beq.n	800168a <HAL_GPIO_Init+0x236>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a55      	ldr	r2, [pc, #340]	; (800178c <HAL_GPIO_Init+0x338>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d025      	beq.n	8001686 <HAL_GPIO_Init+0x232>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a54      	ldr	r2, [pc, #336]	; (8001790 <HAL_GPIO_Init+0x33c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01f      	beq.n	8001682 <HAL_GPIO_Init+0x22e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a53      	ldr	r2, [pc, #332]	; (8001794 <HAL_GPIO_Init+0x340>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x22a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_GPIO_Init+0x344>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x226>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_GPIO_Init+0x348>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x222>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_GPIO_Init+0x34c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x21e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <HAL_GPIO_Init+0x350>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x21a>
 800166a:	2309      	movs	r3, #9
 800166c:	e012      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800166e:	230a      	movs	r3, #10
 8001670:	e010      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001672:	2308      	movs	r3, #8
 8001674:	e00e      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001676:	2307      	movs	r3, #7
 8001678:	e00c      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800167a:	2306      	movs	r3, #6
 800167c:	e00a      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800167e:	2305      	movs	r3, #5
 8001680:	e008      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001682:	2304      	movs	r3, #4
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001686:	2303      	movs	r3, #3
 8001688:	e004      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800168a:	2302      	movs	r3, #2
 800168c:	e002      	b.n	8001694 <HAL_GPIO_Init+0x240>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x240>
 8001692:	2300      	movs	r3, #0
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	f002 0203 	and.w	r2, r2, #3
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	4093      	lsls	r3, r2
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016a4:	4935      	ldr	r1, [pc, #212]	; (800177c <HAL_GPIO_Init+0x328>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <HAL_GPIO_Init+0x354>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d6:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <HAL_GPIO_Init+0x354>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_GPIO_Init+0x354>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001700:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <HAL_GPIO_Init+0x354>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <HAL_GPIO_Init+0x354>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_GPIO_Init+0x354>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_GPIO_Init+0x354>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <HAL_GPIO_Init+0x354>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	f67f ae86 	bls.w	8001474 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40021400 	.word	0x40021400
 8001798:	40021800 	.word	0x40021800
 800179c:	40021c00 	.word	0x40021c00
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40022400 	.word	0x40022400
 80017a8:	40013c00 	.word	0x40013c00

080017ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_PWREx_EnableOverDrive+0x98>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_PWREx_EnableOverDrive+0x98>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_PWREx_EnableOverDrive+0x98>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017da:	f7ff fc97 	bl	800110c <HAL_GetTick>
 80017de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017e0:	e009      	b.n	80017f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017e2:	f7ff fc93 	bl	800110c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f0:	d901      	bls.n	80017f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e022      	b.n	800183c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001802:	d1ee      	bne.n	80017e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_PWREx_EnableOverDrive+0x9c>)
 800180a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001810:	f7ff fc7c 	bl	800110c <HAL_GetTick>
 8001814:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001816:	e009      	b.n	800182c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001818:	f7ff fc78 	bl	800110c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001826:	d901      	bls.n	800182c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e007      	b.n	800183c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_PWREx_EnableOverDrive+0x9c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001838:	d1ee      	bne.n	8001818 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000

0800184c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e291      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8087 	beq.w	800197e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001870:	4b96      	ldr	r3, [pc, #600]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d00c      	beq.n	8001896 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187c:	4b93      	ldr	r3, [pc, #588]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d112      	bne.n	80018ae <HAL_RCC_OscConfig+0x62>
 8001888:	4b90      	ldr	r3, [pc, #576]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001894:	d10b      	bne.n	80018ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	4b8d      	ldr	r3, [pc, #564]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d06c      	beq.n	800197c <HAL_RCC_OscConfig+0x130>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d168      	bne.n	800197c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e26b      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x7a>
 80018b8:	4b84      	ldr	r3, [pc, #528]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a83      	ldr	r2, [pc, #524]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e02e      	b.n	8001924 <HAL_RCC_OscConfig+0xd8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x9c>
 80018ce:	4b7f      	ldr	r3, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7e      	ldr	r2, [pc, #504]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b7c      	ldr	r3, [pc, #496]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7b      	ldr	r2, [pc, #492]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xd8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0xc0>
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a75      	ldr	r2, [pc, #468]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a72      	ldr	r2, [pc, #456]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xd8>
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b6c      	ldr	r3, [pc, #432]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6b      	ldr	r2, [pc, #428]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fbee 	bl	800110c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fbea 	bl	800110c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e21f      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b61      	ldr	r3, [pc, #388]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xe8>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fbda 	bl	800110c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fbd6 	bl	800110c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e20b      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	4b57      	ldr	r3, [pc, #348]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x110>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d069      	beq.n	8001a5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198a:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d11c      	bne.n	80019dc <HAL_RCC_OscConfig+0x190>
 80019a2:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d116      	bne.n	80019dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x17a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e1df      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	493d      	ldr	r1, [pc, #244]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	e040      	b.n	8001a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d023      	beq.n	8001a2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a38      	ldr	r2, [pc, #224]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb8c 	bl	800110c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff fb88 	bl	800110c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1bd      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4929      	ldr	r1, [pc, #164]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
 8001a2a:	e018      	b.n	8001a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb68 	bl	800110c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fb64 	bl	800110c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e199      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d038      	beq.n	8001adc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d019      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fb45 	bl	800110c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff fb41 	bl	800110c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e176      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x23a>
 8001aa4:	e01a      	b.n	8001adc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_RCC_OscConfig+0x280>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb2b 	bl	800110c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff fb27 	bl	800110c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d903      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e15c      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
 8001acc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b91      	ldr	r3, [pc, #580]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a4 	beq.w	8001c32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4b8b      	ldr	r3, [pc, #556]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10d      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a87      	ldr	r2, [pc, #540]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b85      	ldr	r3, [pc, #532]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b12:	4b82      	ldr	r3, [pc, #520]	; (8001d1c <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7e      	ldr	r2, [pc, #504]	; (8001d1c <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff faef 	bl	800110c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff faeb 	bl	800110c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e120      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b44:	4b75      	ldr	r3, [pc, #468]	; (8001d1c <HAL_RCC_OscConfig+0x4d0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x31a>
 8001b58:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a6e      	ldr	r2, [pc, #440]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x376>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x33c>
 8001b6e:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a69      	ldr	r2, [pc, #420]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7a:	4b67      	ldr	r3, [pc, #412]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a66      	ldr	r2, [pc, #408]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	e01c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x376>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x35e>
 8001b90:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a60      	ldr	r2, [pc, #384]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9c:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a5d      	ldr	r2, [pc, #372]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x376>
 8001baa:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a5a      	ldr	r2, [pc, #360]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d015      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bca:	f7ff fa9f 	bl	800110c <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fa9b 	bl	800110c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0ce      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ee      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x386>
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fa89 	bl	800110c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fa85 	bl	800110c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0b8      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80a4 	beq.w	8001d84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d06b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d149      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fa56 	bl	800110c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff fa52 	bl	800110c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e087      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69da      	ldr	r2, [r3, #28]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	019b      	lsls	r3, r3, #6
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001caa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fa26 	bl	800110c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff fa22 	bl	800110c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e057      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x478>
 8001ce2:	e04f      	b.n	8001d84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fa0c 	bl	800110c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff fa08 	bl	800110c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e03d      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4ac>
 8001d16:	e035      	b.n	8001d84 <HAL_RCC_OscConfig+0x538>
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x544>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d028      	beq.n	8001d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d121      	bne.n	8001d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d11a      	bne.n	8001d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d111      	bne.n	8001d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0d0      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 020f 	bic.w	r2, r3, #15
 8001dc2:	4965      	ldr	r1, [pc, #404]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0b8      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df4:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e0c:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	494d      	ldr	r1, [pc, #308]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d040      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e073      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06b      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4936      	ldr	r1, [pc, #216]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e88:	f7ff f940 	bl	800110c <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff f93c 	bl	800110c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e053      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d210      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 020f 	bic.w	r2, r3, #15
 8001ece:	4922      	ldr	r1, [pc, #136]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e032      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4916      	ldr	r1, [pc, #88]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490e      	ldr	r1, [pc, #56]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f26:	f000 f821 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	490a      	ldr	r1, [pc, #40]	; (8001f60 <HAL_RCC_ClockConfig+0x1cc>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1d0>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1d4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fec4 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08007390 	.word	0x08007390
 8001f64:	20000010 	.word	0x20000010
 8001f68:	20000014 	.word	0x20000014

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f72:	2100      	movs	r1, #0
 8001f74:	6079      	str	r1, [r7, #4]
 8001f76:	2100      	movs	r1, #0
 8001f78:	60f9      	str	r1, [r7, #12]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f7e:	2100      	movs	r1, #0
 8001f80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f82:	4952      	ldr	r1, [pc, #328]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001f84:	6889      	ldr	r1, [r1, #8]
 8001f86:	f001 010c 	and.w	r1, r1, #12
 8001f8a:	2908      	cmp	r1, #8
 8001f8c:	d00d      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x3e>
 8001f8e:	2908      	cmp	r1, #8
 8001f90:	f200 8094 	bhi.w	80020bc <HAL_RCC_GetSysClockFreq+0x150>
 8001f94:	2900      	cmp	r1, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x32>
 8001f98:	2904      	cmp	r1, #4
 8001f9a:	d003      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8001f9c:	e08e      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fa0:	60bb      	str	r3, [r7, #8]
      break;
 8001fa2:	e08e      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fa6:	60bb      	str	r3, [r7, #8]
      break;
 8001fa8:	e08b      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001faa:	4948      	ldr	r1, [pc, #288]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fac:	6849      	ldr	r1, [r1, #4]
 8001fae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001fb2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fb4:	4945      	ldr	r1, [pc, #276]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fb6:	6849      	ldr	r1, [r1, #4]
 8001fb8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001fbc:	2900      	cmp	r1, #0
 8001fbe:	d024      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc0:	4942      	ldr	r1, [pc, #264]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001fc2:	6849      	ldr	r1, [r1, #4]
 8001fc4:	0989      	lsrs	r1, r1, #6
 8001fc6:	4608      	mov	r0, r1
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001fd0:	f04f 0500 	mov.w	r5, #0
 8001fd4:	ea00 0204 	and.w	r2, r0, r4
 8001fd8:	ea01 0305 	and.w	r3, r1, r5
 8001fdc:	493d      	ldr	r1, [pc, #244]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fde:	fb01 f003 	mul.w	r0, r1, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	fb01 f102 	mul.w	r1, r1, r2
 8001fe8:	1844      	adds	r4, r0, r1
 8001fea:	493a      	ldr	r1, [pc, #232]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fec:	fba2 0101 	umull	r0, r1, r2, r1
 8001ff0:	1863      	adds	r3, r4, r1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	f7fe f958 	bl	80002b0 <__aeabi_uldivmod>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4613      	mov	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e04a      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	461a      	mov	r2, r3
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	ea02 0400 	and.w	r4, r2, r0
 8002022:	ea03 0501 	and.w	r5, r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	014b      	lsls	r3, r1, #5
 8002034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002038:	0142      	lsls	r2, r0, #5
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	1b00      	subs	r0, r0, r4
 8002040:	eb61 0105 	sbc.w	r1, r1, r5
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	018b      	lsls	r3, r1, #6
 800204e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002052:	0182      	lsls	r2, r0, #6
 8002054:	1a12      	subs	r2, r2, r0
 8002056:	eb63 0301 	sbc.w	r3, r3, r1
 800205a:	f04f 0000 	mov.w	r0, #0
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	00d9      	lsls	r1, r3, #3
 8002064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002068:	00d0      	lsls	r0, r2, #3
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	1912      	adds	r2, r2, r4
 8002070:	eb45 0303 	adc.w	r3, r5, r3
 8002074:	f04f 0000 	mov.w	r0, #0
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	0299      	lsls	r1, r3, #10
 800207e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002082:	0290      	lsls	r0, r2, #10
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	461a      	mov	r2, r3
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	f7fe f90c 	bl	80002b0 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_GetSysClockFreq+0x160>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	60bb      	str	r3, [r7, #8]
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80020be:	60bb      	str	r3, [r7, #8]
      break;
 80020c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c2:	68bb      	ldr	r3, [r7, #8]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	017d7840 	.word	0x017d7840

080020d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000010 	.word	0x20000010

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a9b      	lsrs	r3, r3, #10
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	080073a0 	.word	0x080073a0

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800211c:	f7ff ffdc 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	080073a0 	.word	0x080073a0

08002140 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	220f      	movs	r2, #15
 800214e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_GetClockConfig+0x5c>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_RCC_GetClockConfig+0x60>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d012      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021cc:	4b69      	ldr	r3, [pc, #420]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021d6:	6093      	str	r3, [r2, #8]
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	4964      	ldr	r1, [pc, #400]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d017      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220c:	4959      	ldr	r1, [pc, #356]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800221c:	d101      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d017      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800223a:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	494a      	ldr	r1, [pc, #296]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002258:	d101      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002266:	2301      	movs	r3, #1
 8002268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 808b 	beq.w	800239e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002288:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a39      	ldr	r2, [pc, #228]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
 8002294:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022a0:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a34      	ldr	r2, [pc, #208]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ac:	f7fe ff2e 	bl	800110c <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe ff2a 	bl	800110c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e357      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d035      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d02e      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d114      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fef2 	bl	800110c <HAL_GetTick>
 8002328:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232a:	e00a      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe feee 	bl	800110c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e319      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0ee      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800235a:	d111      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800236a:	400b      	ands	r3, r1
 800236c:	4901      	ldr	r1, [pc, #4]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
 8002372:	e00b      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002374:	40023800 	.word	0x40023800
 8002378:	40007000 	.word	0x40007000
 800237c:	0ffffcff 	.word	0x0ffffcff
 8002380:	4bb1      	ldr	r3, [pc, #708]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4ab0      	ldr	r2, [pc, #704]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002386:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	4bae      	ldr	r3, [pc, #696]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800238e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002398:	49ab      	ldr	r1, [pc, #684]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023aa:	4ba7      	ldr	r3, [pc, #668]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b0:	4aa5      	ldr	r2, [pc, #660]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023ba:	4ba3      	ldr	r3, [pc, #652]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	49a0      	ldr	r1, [pc, #640]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d8:	4b9b      	ldr	r3, [pc, #620]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e6:	4998      	ldr	r1, [pc, #608]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023fa:	4b93      	ldr	r3, [pc, #588]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002408:	498f      	ldr	r1, [pc, #572]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800241c:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	4987      	ldr	r1, [pc, #540]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800243e:	4b82      	ldr	r3, [pc, #520]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	497e      	ldr	r1, [pc, #504]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002460:	4b79      	ldr	r3, [pc, #484]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4976      	ldr	r1, [pc, #472]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002482:	4b71      	ldr	r3, [pc, #452]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f023 020c 	bic.w	r2, r3, #12
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	496d      	ldr	r1, [pc, #436]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4965      	ldr	r1, [pc, #404]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c6:	4b60      	ldr	r3, [pc, #384]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	495c      	ldr	r1, [pc, #368]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024e8:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	4954      	ldr	r1, [pc, #336]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800250a:	4b4f      	ldr	r3, [pc, #316]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	494b      	ldr	r1, [pc, #300]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800252c:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	4943      	ldr	r1, [pc, #268]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255c:	493a      	ldr	r1, [pc, #232]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800257e:	4932      	ldr	r1, [pc, #200]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d011      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a0:	4929      	ldr	r1, [pc, #164]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b0:	d101      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e0:	4919      	ldr	r1, [pc, #100]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002604:	4910      	ldr	r1, [pc, #64]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d006      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80d9 	beq.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002626:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800262a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262c:	f7fe fd6e 	bl	800110c <HAL_GetTick>
 8002630:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002632:	e00b      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002634:	f7fe fd6a 	bl	800110c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d904      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e197      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800264c:	4b6c      	ldr	r3, [pc, #432]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ed      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d021      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11d      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800266c:	4b64      	ldr	r3, [pc, #400]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002672:	0c1b      	lsrs	r3, r3, #16
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800267a:	4b61      	ldr	r3, [pc, #388]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800267c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002680:	0e1b      	lsrs	r3, r3, #24
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	019a      	lsls	r2, r3, #6
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	431a      	orrs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	071b      	lsls	r3, r3, #28
 80026a0:	4957      	ldr	r1, [pc, #348]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d02e      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d2:	d129      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026d4:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026e2:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e8:	0f1b      	lsrs	r3, r3, #28
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	019a      	lsls	r2, r3, #6
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	071b      	lsls	r3, r3, #28
 8002708:	493d      	ldr	r1, [pc, #244]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002710:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002716:	f023 021f 	bic.w	r2, r3, #31
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	3b01      	subs	r3, #1
 8002720:	4937      	ldr	r1, [pc, #220]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01d      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273a:	0e1b      	lsrs	r3, r3, #24
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002748:	0f1b      	lsrs	r3, r3, #28
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	019a      	lsls	r2, r3, #6
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	041b      	lsls	r3, r3, #16
 800275c:	431a      	orrs	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	071b      	lsls	r3, r3, #28
 8002768:	4925      	ldr	r1, [pc, #148]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d011      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	019a      	lsls	r2, r3, #6
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	061b      	lsls	r3, r3, #24
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	071b      	lsls	r3, r3, #28
 8002798:	4919      	ldr	r1, [pc, #100]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ac:	f7fe fcae 	bl	800110c <HAL_GetTick>
 80027b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027b4:	f7fe fcaa 	bl	800110c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0d7      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	f040 80cd 	bne.w	8002974 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e6:	f7fe fc91 	bl	800110c <HAL_GetTick>
 80027ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027ee:	f7fe fc8d 	bl	800110c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d903      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0ba      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002800:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002804:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800280c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002810:	d0ed      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02e      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d12a      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800283a:	4b51      	ldr	r3, [pc, #324]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	0f1b      	lsrs	r3, r3, #28
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	019a      	lsls	r2, r3, #6
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	071b      	lsls	r3, r3, #28
 800286e:	4944      	ldr	r1, [pc, #272]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800287c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	493d      	ldr	r1, [pc, #244]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d022      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a4:	d11d      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	0e1b      	lsrs	r3, r3, #24
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028b4:	4b32      	ldr	r3, [pc, #200]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	0f1b      	lsrs	r3, r3, #28
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	019a      	lsls	r2, r3, #6
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	071b      	lsls	r3, r3, #28
 80028da:	4929      	ldr	r1, [pc, #164]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d028      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	0e1b      	lsrs	r3, r3, #24
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028fc:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	019a      	lsls	r2, r3, #6
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	431a      	orrs	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	071b      	lsls	r3, r3, #28
 8002922:	4917      	ldr	r1, [pc, #92]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	4911      	ldr	r1, [pc, #68]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fe fbde 	bl	800110c <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002954:	f7fe fbda 	bl	800110c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e007      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800296e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002972:	d1ef      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e049      	b.n	8002a2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f841 	bl	8002a32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 fa00 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d001      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e054      	b.n	8002b0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d022      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x80>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8a:	d01d      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x80>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d018      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x80>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x80>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x80>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d009      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x80>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_TIM_Base_Start_IT+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x80>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <HAL_TIM_Base_Start_IT+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d115      	bne.n	8002af4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_TIM_Base_Start_IT+0xec>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d015      	beq.n	8002b06 <HAL_TIM_Base_Start_IT+0xbe>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d011      	beq.n	8002b06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af2:	e008      	b.n	8002b06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e000      	b.n	8002b08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800
 8002b24:	40000c00 	.word	0x40000c00
 8002b28:	40010400 	.word	0x40010400
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	40001800 	.word	0x40001800
 8002b34:	00010007 	.word	0x00010007

08002b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0202 	mvn.w	r2, #2
 8002b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f905 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8f7 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f908 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0204 	mvn.w	r2, #4
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8db 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8cd 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8de 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0208 	mvn.w	r2, #8
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2204      	movs	r2, #4
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f8b1 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8a3 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f8b4 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0210 	mvn.w	r2, #16
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2208      	movs	r2, #8
 8002c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f887 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f879 	bl	8002d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f88a 	bl	8002d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0201 	mvn.w	r2, #1
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd fe48 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f91a 	bl	8002f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	d10e      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d107      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f90d 	bl	8002f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d10e      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d107      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f838 	bl	8002db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d10e      	bne.n	8002d6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d107      	bne.n	8002d6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f06f 0220 	mvn.w	r2, #32
 8002d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f8cd 	bl	8002f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a40      	ldr	r2, [pc, #256]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d00f      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	; (8002ee0 <TIM_Base_SetConfig+0x118>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <TIM_Base_SetConfig+0x11c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3a      	ldr	r2, [pc, #232]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2f      	ldr	r2, [pc, #188]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d027      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <TIM_Base_SetConfig+0x118>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d023      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <TIM_Base_SetConfig+0x11c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d017      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <TIM_Base_SetConfig+0x128>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <TIM_Base_SetConfig+0x12c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <TIM_Base_SetConfig+0x130>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a25      	ldr	r2, [pc, #148]	; (8002efc <TIM_Base_SetConfig+0x134>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <TIM_Base_SetConfig+0x138>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <TIM_Base_SetConfig+0x13c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <TIM_Base_SetConfig+0x114>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0xf8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <TIM_Base_SetConfig+0x124>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40014800 	.word	0x40014800
 8002efc:	40001800 	.word	0x40001800
 8002f00:	40001c00 	.word	0x40001c00
 8002f04:	40002000 	.word	0x40002000

08002f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e040      	b.n	8002fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe f81c 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fb08 	bl	8003598 <UART_SetConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fd5e 	bl	8003a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fde5 	bl	8003ba0 <UART_CheckIdleState>
 8002fd6:	4603      	mov	r3, r0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	f040 8081 	bne.w	80030fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_UART_Transmit+0x26>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e079      	b.n	80030fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x38>
 8003014:	2302      	movs	r3, #2
 8003016:	e072      	b.n	80030fe <HAL_UART_Transmit+0x11e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2221      	movs	r2, #33	; 0x21
 800302c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302e:	f7fe f86d 	bl	800110c <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304c:	d108      	bne.n	8003060 <HAL_UART_Transmit+0x80>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e003      	b.n	8003068 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003070:	e02c      	b.n	80030cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fdc2 	bl	8003c06 <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e038      	b.n	80030fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3302      	adds	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e007      	b.n	80030ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	3301      	adds	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1cc      	bne.n	8003072 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fd8f 	bl	8003c06 <UART_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e005      	b.n	80030fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	4613      	mov	r3, r2
 8003112:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003118:	2b20      	cmp	r3, #32
 800311a:	d12c      	bne.n	8003176 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Receive_IT+0x22>
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e025      	b.n	8003178 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_UART_Receive_IT+0x34>
 8003136:	2302      	movs	r3, #2
 8003138:	e01e      	b.n	8003178 <HAL_UART_Receive_IT+0x72>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003164:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	461a      	mov	r2, r3
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fdc7 	bl	8003d00 <UART_Start_Receive_IT>
 8003172:	4603      	mov	r3, r0
 8003174:	e000      	b.n	8003178 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d113      	bne.n	80031d8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 81b9 	beq.w	8003540 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
      }
      return;
 80031d6:	e1b3      	b.n	8003540 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80e3 	beq.w	80033a6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d105      	bne.n	80031f6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4ba5      	ldr	r3, [pc, #660]	; (8003484 <HAL_UART_IRQHandler+0x304>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80d8 	beq.w	80033a6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_UART_IRQHandler+0xa2>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <HAL_UART_IRQHandler+0xce>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2202      	movs	r2, #2
 800323c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_UART_IRQHandler+0xfa>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2204      	movs	r2, #4
 8003268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003270:	f043 0202 	orr.w	r2, r3, #2
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2208      	movs	r2, #8
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a6:	f043 0208 	orr.w	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <HAL_UART_IRQHandler+0x15e>
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00c      	beq.n	80032de <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 812d 	beq.w	8003544 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00c      	beq.n	800330e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003314:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d004      	beq.n	800332e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d031      	beq.n	8003392 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fd6e 	bl	8003e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	d123      	bne.n	800338a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003350:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	2b00      	cmp	r3, #0
 8003358:	d013      	beq.n	8003382 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a4a      	ldr	r2, [pc, #296]	; (8003488 <HAL_UART_IRQHandler+0x308>)
 8003360:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f852 	bl	8001410 <HAL_DMA_Abort_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800337c:	4610      	mov	r0, r2
 800337e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	e00f      	b.n	80033a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f8f2 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e00b      	b.n	80033a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8ee 	bl	800356c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e007      	b.n	80033a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8ea 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033a0:	e0d0      	b.n	8003544 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a2:	bf00      	nop
    return;
 80033a4:	e0ce      	b.n	8003544 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	f040 80a7 	bne.w	80034fe <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a1 	beq.w	80034fe <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 809b 	beq.w	80034fe <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2210      	movs	r2, #16
 80033ce:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d156      	bne.n	800348c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80033e8:	893b      	ldrh	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80ac 	beq.w	8003548 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033f6:	893a      	ldrh	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f080 80a5 	bcs.w	8003548 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	893a      	ldrh	r2, [r7, #8]
 8003402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d02a      	beq.n	8003468 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003420:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003440:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0210 	bic.w	r2, r2, #16
 800345c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd ff64 	bl	8001330 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003474:	b29b      	uxth	r3, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f87f 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003482:	e061      	b.n	8003548 <HAL_UART_IRQHandler+0x3c8>
 8003484:	04000120 	.word	0x04000120
 8003488:	08003e6f 	.word	0x08003e6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003498:	b29b      	uxth	r3, r3
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d050      	beq.n	800354c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d04d      	beq.n	800354c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034be:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0210 	bic.w	r2, r2, #16
 80034f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f842 	bl	8003580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034fc:	e026      	b.n	800354c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01a      	beq.n	8003550 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
    }
    return;
 8003522:	e015      	b.n	8003550 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <HAL_UART_IRQHandler+0x3d2>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fcae 	bl	8003e9a <UART_EndTransmit_IT>
    return;
 800353e:	e008      	b.n	8003552 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003540:	bf00      	nop
 8003542:	e006      	b.n	8003552 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003544:	bf00      	nop
 8003546:	e004      	b.n	8003552 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <HAL_UART_IRQHandler+0x3d2>
      return;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003550:	bf00      	nop
  }

}
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4ba7      	ldr	r3, [pc, #668]	; (8003860 <UART_SetConfig+0x2c8>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6979      	ldr	r1, [r7, #20]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a95      	ldr	r2, [pc, #596]	; (8003864 <UART_SetConfig+0x2cc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d120      	bne.n	8003656 <UART_SetConfig+0xbe>
 8003614:	4b94      	ldr	r3, [pc, #592]	; (8003868 <UART_SetConfig+0x2d0>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d816      	bhi.n	8003650 <UART_SetConfig+0xb8>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x90>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	08003645 	.word	0x08003645
 8003630:	0800363f 	.word	0x0800363f
 8003634:	0800364b 	.word	0x0800364b
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e14f      	b.n	80038de <UART_SetConfig+0x346>
 800363e:	2302      	movs	r3, #2
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e14c      	b.n	80038de <UART_SetConfig+0x346>
 8003644:	2304      	movs	r3, #4
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e149      	b.n	80038de <UART_SetConfig+0x346>
 800364a:	2308      	movs	r3, #8
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e146      	b.n	80038de <UART_SetConfig+0x346>
 8003650:	2310      	movs	r3, #16
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e143      	b.n	80038de <UART_SetConfig+0x346>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a84      	ldr	r2, [pc, #528]	; (800386c <UART_SetConfig+0x2d4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d132      	bne.n	80036c6 <UART_SetConfig+0x12e>
 8003660:	4b81      	ldr	r3, [pc, #516]	; (8003868 <UART_SetConfig+0x2d0>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d828      	bhi.n	80036c0 <UART_SetConfig+0x128>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <UART_SetConfig+0xdc>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036c1 	.word	0x080036c1
 800367c:	080036c1 	.word	0x080036c1
 8003680:	080036c1 	.word	0x080036c1
 8003684:	080036b5 	.word	0x080036b5
 8003688:	080036c1 	.word	0x080036c1
 800368c:	080036c1 	.word	0x080036c1
 8003690:	080036c1 	.word	0x080036c1
 8003694:	080036af 	.word	0x080036af
 8003698:	080036c1 	.word	0x080036c1
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036c1 	.word	0x080036c1
 80036a4:	080036bb 	.word	0x080036bb
 80036a8:	2300      	movs	r3, #0
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e117      	b.n	80038de <UART_SetConfig+0x346>
 80036ae:	2302      	movs	r3, #2
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e114      	b.n	80038de <UART_SetConfig+0x346>
 80036b4:	2304      	movs	r3, #4
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e111      	b.n	80038de <UART_SetConfig+0x346>
 80036ba:	2308      	movs	r3, #8
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e10e      	b.n	80038de <UART_SetConfig+0x346>
 80036c0:	2310      	movs	r3, #16
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e10b      	b.n	80038de <UART_SetConfig+0x346>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a69      	ldr	r2, [pc, #420]	; (8003870 <UART_SetConfig+0x2d8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d120      	bne.n	8003712 <UART_SetConfig+0x17a>
 80036d0:	4b65      	ldr	r3, [pc, #404]	; (8003868 <UART_SetConfig+0x2d0>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036da:	2b30      	cmp	r3, #48	; 0x30
 80036dc:	d013      	beq.n	8003706 <UART_SetConfig+0x16e>
 80036de:	2b30      	cmp	r3, #48	; 0x30
 80036e0:	d814      	bhi.n	800370c <UART_SetConfig+0x174>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d009      	beq.n	80036fa <UART_SetConfig+0x162>
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d810      	bhi.n	800370c <UART_SetConfig+0x174>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <UART_SetConfig+0x15c>
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d006      	beq.n	8003700 <UART_SetConfig+0x168>
 80036f2:	e00b      	b.n	800370c <UART_SetConfig+0x174>
 80036f4:	2300      	movs	r3, #0
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e0f1      	b.n	80038de <UART_SetConfig+0x346>
 80036fa:	2302      	movs	r3, #2
 80036fc:	77fb      	strb	r3, [r7, #31]
 80036fe:	e0ee      	b.n	80038de <UART_SetConfig+0x346>
 8003700:	2304      	movs	r3, #4
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e0eb      	b.n	80038de <UART_SetConfig+0x346>
 8003706:	2308      	movs	r3, #8
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e0e8      	b.n	80038de <UART_SetConfig+0x346>
 800370c:	2310      	movs	r3, #16
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e0e5      	b.n	80038de <UART_SetConfig+0x346>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a57      	ldr	r2, [pc, #348]	; (8003874 <UART_SetConfig+0x2dc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d120      	bne.n	800375e <UART_SetConfig+0x1c6>
 800371c:	4b52      	ldr	r3, [pc, #328]	; (8003868 <UART_SetConfig+0x2d0>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003726:	2bc0      	cmp	r3, #192	; 0xc0
 8003728:	d013      	beq.n	8003752 <UART_SetConfig+0x1ba>
 800372a:	2bc0      	cmp	r3, #192	; 0xc0
 800372c:	d814      	bhi.n	8003758 <UART_SetConfig+0x1c0>
 800372e:	2b80      	cmp	r3, #128	; 0x80
 8003730:	d009      	beq.n	8003746 <UART_SetConfig+0x1ae>
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d810      	bhi.n	8003758 <UART_SetConfig+0x1c0>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <UART_SetConfig+0x1a8>
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d006      	beq.n	800374c <UART_SetConfig+0x1b4>
 800373e:	e00b      	b.n	8003758 <UART_SetConfig+0x1c0>
 8003740:	2300      	movs	r3, #0
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e0cb      	b.n	80038de <UART_SetConfig+0x346>
 8003746:	2302      	movs	r3, #2
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e0c8      	b.n	80038de <UART_SetConfig+0x346>
 800374c:	2304      	movs	r3, #4
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e0c5      	b.n	80038de <UART_SetConfig+0x346>
 8003752:	2308      	movs	r3, #8
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e0c2      	b.n	80038de <UART_SetConfig+0x346>
 8003758:	2310      	movs	r3, #16
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e0bf      	b.n	80038de <UART_SetConfig+0x346>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a45      	ldr	r2, [pc, #276]	; (8003878 <UART_SetConfig+0x2e0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d125      	bne.n	80037b4 <UART_SetConfig+0x21c>
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <UART_SetConfig+0x2d0>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003776:	d017      	beq.n	80037a8 <UART_SetConfig+0x210>
 8003778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377c:	d817      	bhi.n	80037ae <UART_SetConfig+0x216>
 800377e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003782:	d00b      	beq.n	800379c <UART_SetConfig+0x204>
 8003784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003788:	d811      	bhi.n	80037ae <UART_SetConfig+0x216>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <UART_SetConfig+0x1fe>
 800378e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003792:	d006      	beq.n	80037a2 <UART_SetConfig+0x20a>
 8003794:	e00b      	b.n	80037ae <UART_SetConfig+0x216>
 8003796:	2300      	movs	r3, #0
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e0a0      	b.n	80038de <UART_SetConfig+0x346>
 800379c:	2302      	movs	r3, #2
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e09d      	b.n	80038de <UART_SetConfig+0x346>
 80037a2:	2304      	movs	r3, #4
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e09a      	b.n	80038de <UART_SetConfig+0x346>
 80037a8:	2308      	movs	r3, #8
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e097      	b.n	80038de <UART_SetConfig+0x346>
 80037ae:	2310      	movs	r3, #16
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e094      	b.n	80038de <UART_SetConfig+0x346>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a30      	ldr	r2, [pc, #192]	; (800387c <UART_SetConfig+0x2e4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d125      	bne.n	800380a <UART_SetConfig+0x272>
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <UART_SetConfig+0x2d0>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037cc:	d017      	beq.n	80037fe <UART_SetConfig+0x266>
 80037ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d2:	d817      	bhi.n	8003804 <UART_SetConfig+0x26c>
 80037d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d8:	d00b      	beq.n	80037f2 <UART_SetConfig+0x25a>
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037de:	d811      	bhi.n	8003804 <UART_SetConfig+0x26c>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <UART_SetConfig+0x254>
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d006      	beq.n	80037f8 <UART_SetConfig+0x260>
 80037ea:	e00b      	b.n	8003804 <UART_SetConfig+0x26c>
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e075      	b.n	80038de <UART_SetConfig+0x346>
 80037f2:	2302      	movs	r3, #2
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e072      	b.n	80038de <UART_SetConfig+0x346>
 80037f8:	2304      	movs	r3, #4
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e06f      	b.n	80038de <UART_SetConfig+0x346>
 80037fe:	2308      	movs	r3, #8
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e06c      	b.n	80038de <UART_SetConfig+0x346>
 8003804:	2310      	movs	r3, #16
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e069      	b.n	80038de <UART_SetConfig+0x346>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <UART_SetConfig+0x2e8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d137      	bne.n	8003884 <UART_SetConfig+0x2ec>
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <UART_SetConfig+0x2d0>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800381e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003822:	d017      	beq.n	8003854 <UART_SetConfig+0x2bc>
 8003824:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003828:	d817      	bhi.n	800385a <UART_SetConfig+0x2c2>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	d00b      	beq.n	8003848 <UART_SetConfig+0x2b0>
 8003830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003834:	d811      	bhi.n	800385a <UART_SetConfig+0x2c2>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <UART_SetConfig+0x2aa>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d006      	beq.n	800384e <UART_SetConfig+0x2b6>
 8003840:	e00b      	b.n	800385a <UART_SetConfig+0x2c2>
 8003842:	2300      	movs	r3, #0
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e04a      	b.n	80038de <UART_SetConfig+0x346>
 8003848:	2302      	movs	r3, #2
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e047      	b.n	80038de <UART_SetConfig+0x346>
 800384e:	2304      	movs	r3, #4
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e044      	b.n	80038de <UART_SetConfig+0x346>
 8003854:	2308      	movs	r3, #8
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e041      	b.n	80038de <UART_SetConfig+0x346>
 800385a:	2310      	movs	r3, #16
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e03e      	b.n	80038de <UART_SetConfig+0x346>
 8003860:	efff69f3 	.word	0xefff69f3
 8003864:	40011000 	.word	0x40011000
 8003868:	40023800 	.word	0x40023800
 800386c:	40004400 	.word	0x40004400
 8003870:	40004800 	.word	0x40004800
 8003874:	40004c00 	.word	0x40004c00
 8003878:	40005000 	.word	0x40005000
 800387c:	40011400 	.word	0x40011400
 8003880:	40007800 	.word	0x40007800
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a71      	ldr	r2, [pc, #452]	; (8003a50 <UART_SetConfig+0x4b8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d125      	bne.n	80038da <UART_SetConfig+0x342>
 800388e:	4b71      	ldr	r3, [pc, #452]	; (8003a54 <UART_SetConfig+0x4bc>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003898:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800389c:	d017      	beq.n	80038ce <UART_SetConfig+0x336>
 800389e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038a2:	d817      	bhi.n	80038d4 <UART_SetConfig+0x33c>
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a8:	d00b      	beq.n	80038c2 <UART_SetConfig+0x32a>
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ae:	d811      	bhi.n	80038d4 <UART_SetConfig+0x33c>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <UART_SetConfig+0x324>
 80038b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b8:	d006      	beq.n	80038c8 <UART_SetConfig+0x330>
 80038ba:	e00b      	b.n	80038d4 <UART_SetConfig+0x33c>
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e00d      	b.n	80038de <UART_SetConfig+0x346>
 80038c2:	2302      	movs	r3, #2
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e00a      	b.n	80038de <UART_SetConfig+0x346>
 80038c8:	2304      	movs	r3, #4
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e007      	b.n	80038de <UART_SetConfig+0x346>
 80038ce:	2308      	movs	r3, #8
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e004      	b.n	80038de <UART_SetConfig+0x346>
 80038d4:	2310      	movs	r3, #16
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e001      	b.n	80038de <UART_SetConfig+0x346>
 80038da:	2310      	movs	r3, #16
 80038dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e6:	d15b      	bne.n	80039a0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80038e8:	7ffb      	ldrb	r3, [r7, #31]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d827      	bhi.n	800393e <UART_SetConfig+0x3a6>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <UART_SetConfig+0x35c>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003921 	.word	0x08003921
 80038fc:	08003929 	.word	0x08003929
 8003900:	0800393f 	.word	0x0800393f
 8003904:	0800392f 	.word	0x0800392f
 8003908:	0800393f 	.word	0x0800393f
 800390c:	0800393f 	.word	0x0800393f
 8003910:	0800393f 	.word	0x0800393f
 8003914:	08003937 	.word	0x08003937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003918:	f7fe fbea 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 800391c:	61b8      	str	r0, [r7, #24]
        break;
 800391e:	e013      	b.n	8003948 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7fe fbfa 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8003924:	61b8      	str	r0, [r7, #24]
        break;
 8003926:	e00f      	b.n	8003948 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <UART_SetConfig+0x4c0>)
 800392a:	61bb      	str	r3, [r7, #24]
        break;
 800392c:	e00c      	b.n	8003948 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392e:	f7fe fb1d 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003932:	61b8      	str	r0, [r7, #24]
        break;
 8003934:	e008      	b.n	8003948 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393a:	61bb      	str	r3, [r7, #24]
        break;
 800393c:	e004      	b.n	8003948 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77bb      	strb	r3, [r7, #30]
        break;
 8003946:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d074      	beq.n	8003a38 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	005a      	lsls	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	b29b      	uxth	r3, r3
 8003964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b0f      	cmp	r3, #15
 800396a:	d916      	bls.n	800399a <UART_SetConfig+0x402>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d212      	bcs.n	800399a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f023 030f 	bic.w	r3, r3, #15
 800397c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	b29b      	uxth	r3, r3
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	b29a      	uxth	r2, r3
 800398a:	89fb      	ldrh	r3, [r7, #14]
 800398c:	4313      	orrs	r3, r2
 800398e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	89fa      	ldrh	r2, [r7, #14]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e04e      	b.n	8003a38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	77bb      	strb	r3, [r7, #30]
 800399e:	e04b      	b.n	8003a38 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d827      	bhi.n	80039f6 <UART_SetConfig+0x45e>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0x414>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039e1 	.word	0x080039e1
 80039b8:	080039f7 	.word	0x080039f7
 80039bc:	080039e7 	.word	0x080039e7
 80039c0:	080039f7 	.word	0x080039f7
 80039c4:	080039f7 	.word	0x080039f7
 80039c8:	080039f7 	.word	0x080039f7
 80039cc:	080039ef 	.word	0x080039ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fb8e 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80039d4:	61b8      	str	r0, [r7, #24]
        break;
 80039d6:	e013      	b.n	8003a00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7fe fb9e 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 80039dc:	61b8      	str	r0, [r7, #24]
        break;
 80039de:	e00f      	b.n	8003a00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <UART_SetConfig+0x4c0>)
 80039e2:	61bb      	str	r3, [r7, #24]
        break;
 80039e4:	e00c      	b.n	8003a00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7fe fac1 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 80039ea:	61b8      	str	r0, [r7, #24]
        break;
 80039ec:	e008      	b.n	8003a00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e004      	b.n	8003a00 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	77bb      	strb	r3, [r7, #30]
        break;
 80039fe:	bf00      	nop
    }

    if (pclk != 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	085a      	lsrs	r2, r3, #1
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d908      	bls.n	8003a34 <UART_SetConfig+0x49c>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d204      	bcs.n	8003a34 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	e001      	b.n	8003a38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a44:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40007c00 	.word	0x40007c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	00f42400 	.word	0x00f42400

08003a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01a      	beq.n	8003b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5a:	d10a      	bne.n	8003b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb0:	f7fd faac 	bl	800110c <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d10e      	bne.n	8003be2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f817 	bl	8003c06 <UART_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e00d      	b.n	8003bfe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c16:	e05e      	b.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d05a      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fd fa74 	bl	800110c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11b      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e043      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02c      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8a:	d124      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ca4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00f      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d091      	beq.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d10e      	bne.n	8003d52 <UART_Start_Receive_IT+0x52>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <UART_Start_Receive_IT+0x48>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d46:	e02d      	b.n	8003da4 <UART_Start_Receive_IT+0xa4>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	22ff      	movs	r2, #255	; 0xff
 8003d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d50:	e028      	b.n	8003da4 <UART_Start_Receive_IT+0xa4>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <UART_Start_Receive_IT+0x76>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <UART_Start_Receive_IT+0x6c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	22ff      	movs	r2, #255	; 0xff
 8003d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d6a:	e01b      	b.n	8003da4 <UART_Start_Receive_IT+0xa4>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	227f      	movs	r2, #127	; 0x7f
 8003d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d74:	e016      	b.n	8003da4 <UART_Start_Receive_IT+0xa4>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7e:	d10d      	bne.n	8003d9c <UART_Start_Receive_IT+0x9c>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <UART_Start_Receive_IT+0x92>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	227f      	movs	r2, #127	; 0x7f
 8003d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d90:	e008      	b.n	8003da4 <UART_Start_Receive_IT+0xa4>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	223f      	movs	r2, #63	; 0x3f
 8003d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d9a:	e003      	b.n	8003da4 <UART_Start_Receive_IT+0xa4>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2222      	movs	r2, #34	; 0x22
 8003db0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d107      	bne.n	8003ddc <UART_Start_Receive_IT+0xdc>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <UART_Start_Receive_IT+0x108>)
 8003dd8:	665a      	str	r2, [r3, #100]	; 0x64
 8003dda:	e002      	b.n	8003de2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <UART_Start_Receive_IT+0x10c>)
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003df8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	08003fa1 	.word	0x08003fa1
 8003e0c:	08003ecd 	.word	0x08003ecd

08003e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0210 	bic.w	r2, r2, #16
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff fb6d 	bl	800356c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fb4a 	bl	8003558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003eda:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee0:	2b22      	cmp	r3, #34	; 0x22
 8003ee2:	d151      	bne.n	8003f88 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003eec:	89bb      	ldrh	r3, [r7, #12]
 8003eee:	b2d9      	uxtb	r1, r3
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	400a      	ands	r2, r1
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d138      	bne.n	8003f98 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f34:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d10f      	bne.n	8003f7a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0210 	bic.w	r2, r2, #16
 8003f68:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fb04 	bl	8003580 <HAL_UARTEx_RxEventCallback>
 8003f78:	e002      	b.n	8003f80 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fcc4 	bl	8000908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f86:	e007      	b.n	8003f98 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0208 	orr.w	r2, r2, #8
 8003f96:	619a      	str	r2, [r3, #24]
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb4:	2b22      	cmp	r3, #34	; 0x22
 8003fb6:	d151      	bne.n	800405c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003fc6:	89ba      	ldrh	r2, [r7, #12]
 8003fc8:	89fb      	ldrh	r3, [r7, #14]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d138      	bne.n	800406c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004008:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10f      	bne.n	800404e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0210 	bic.w	r2, r2, #16
 800403c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fa9a 	bl	8003580 <HAL_UARTEx_RxEventCallback>
 800404c:	e002      	b.n	8004054 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fc5a 	bl	8000908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800405a:	e007      	b.n	800406c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	619a      	str	r2, [r3, #24]
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004086:	2b84      	cmp	r3, #132	; 0x84
 8004088:	d005      	beq.n	8004096 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800408a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	3303      	adds	r3, #3
 8004094:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004096:	68fb      	ldr	r3, [r7, #12]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80040a8:	f000 fe4a 	bl	8004d40 <vTaskStartScheduler>
  
  return osOK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b4:	b089      	sub	sp, #36	; 0x24
 80040b6:	af04      	add	r7, sp, #16
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <osThreadCreate+0x54>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01c      	beq.n	8004106 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685c      	ldr	r4, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681d      	ldr	r5, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691e      	ldr	r6, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ffc8 	bl	8004074 <makeFreeRtosPriority>
 80040e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ee:	9202      	str	r2, [sp, #8]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	9100      	str	r1, [sp, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4632      	mov	r2, r6
 80040f8:	4629      	mov	r1, r5
 80040fa:	4620      	mov	r0, r4
 80040fc:	f000 fc38 	bl	8004970 <xTaskCreateStatic>
 8004100:	4603      	mov	r3, r0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e01c      	b.n	8004140 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685c      	ldr	r4, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004112:	b29e      	uxth	r6, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ffaa 	bl	8004074 <makeFreeRtosPriority>
 8004120:	4602      	mov	r2, r0
 8004122:	f107 030c 	add.w	r3, r7, #12
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	4632      	mov	r2, r6
 800412e:	4629      	mov	r1, r5
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fc80 	bl	8004a36 <xTaskCreate>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800414a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <osDelay+0x16>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e000      	b.n	8004162 <osDelay+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fdb6 	bl	8004cd4 <vTaskDelay>
  
  return osOK;
 8004168:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f103 0208 	add.w	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0208 	add.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f103 0208 	add.w	r2, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d103      	bne.n	8004234 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e00c      	b.n	800424e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3308      	adds	r3, #8
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e002      	b.n	8004242 <vListInsert+0x2e>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	d2f6      	bcs.n	800423c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6852      	ldr	r2, [r2, #4]
 80042a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d103      	bne.n	80042ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	1e5a      	subs	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	b672      	cpsid	i
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	b662      	cpsie	i
 8004304:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800430a:	f001 fb57 	bl	80059bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	441a      	add	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	3b01      	subs	r3, #1
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	441a      	add	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	22ff      	movs	r2, #255	; 0xff
 800434e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d114      	bne.n	800438a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01a      	beq.n	800439e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3310      	adds	r3, #16
 800436c:	4618      	mov	r0, r3
 800436e:	f000 ff45 	bl	80051fc <xTaskRemoveFromEventList>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <xQueueGenericReset+0xd0>)
 800437a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	e009      	b.n	800439e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3310      	adds	r3, #16
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff feef 	bl	8004172 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3324      	adds	r3, #36	; 0x24
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff feea 	bl	8004172 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800439e:	f001 fb41 	bl	8005a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043a2:	2301      	movs	r3, #1
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10c      	bne.n	80043de <xQueueGenericCreate+0x2e>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	b672      	cpsid	i
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	b662      	cpsie	i
 80043d8:	613b      	str	r3, [r7, #16]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	e004      	b.n	80043f4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	3348      	adds	r3, #72	; 0x48
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fc0b 	bl	8005c14 <pvPortMalloc>
 80043fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d011      	beq.n	800442a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3348      	adds	r3, #72	; 0x48
 800440e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004418:	79fa      	ldrb	r2, [r7, #7]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	4613      	mov	r3, r2
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f805 	bl	8004434 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800442a:	69bb      	ldr	r3, [r7, #24]
	}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d103      	bne.n	8004450 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e002      	b.n	8004456 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004462:	2101      	movs	r1, #1
 8004464:	69b8      	ldr	r0, [r7, #24]
 8004466:	f7ff ff39 	bl	80042dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08e      	sub	sp, #56	; 0x38
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10c      	bne.n	80044a4 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	b672      	cpsid	i
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	b662      	cpsie	i
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <xQueueGenericSendFromISR+0x40>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <xQueueGenericSendFromISR+0x44>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <xQueueGenericSendFromISR+0x46>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10c      	bne.n	80044d6 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	b672      	cpsid	i
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	b662      	cpsie	i
 80044d0:	623b      	str	r3, [r7, #32]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d103      	bne.n	80044e4 <xQueueGenericSendFromISR+0x72>
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <xQueueGenericSendFromISR+0x76>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <xQueueGenericSendFromISR+0x78>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10c      	bne.n	8004508 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	b672      	cpsid	i
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	b662      	cpsie	i
 8004502:	61fb      	str	r3, [r7, #28]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004508:	f001 fb40 	bl	8005b8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800450c:	f3ef 8211 	mrs	r2, BASEPRI
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	b672      	cpsid	i
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	b662      	cpsie	i
 8004524:	61ba      	str	r2, [r7, #24]
 8004526:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004528:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <xQueueGenericSendFromISR+0xcc>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d12c      	bne.n	8004598 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800454e:	f000 f917 	bl	8004780 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004552:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d112      	bne.n	8004582 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d016      	beq.n	8004592 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	3324      	adds	r3, #36	; 0x24
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fe47 	bl	80051fc <xTaskRemoveFromEventList>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00e      	beq.n	8004592 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e007      	b.n	8004592 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004586:	3301      	adds	r3, #1
 8004588:	b2db      	uxtb	r3, r3
 800458a:	b25a      	sxtb	r2, r3
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004592:	2301      	movs	r3, #1
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004596:	e001      	b.n	800459c <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004598:	2300      	movs	r3, #0
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3738      	adds	r7, #56	; 0x38
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08c      	sub	sp, #48	; 0x30
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <xQueueReceive+0x34>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	b672      	cpsid	i
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	b662      	cpsie	i
 80045e2:	623b      	str	r3, [r7, #32]
}
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <xQueueReceive+0x42>
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <xQueueReceive+0x46>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xQueueReceive+0x48>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <xQueueReceive+0x66>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	b672      	cpsid	i
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	b662      	cpsie	i
 8004614:	61fb      	str	r3, [r7, #28]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800461a:	f000 ffb7 	bl	800558c <xTaskGetSchedulerState>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <xQueueReceive+0x76>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <xQueueReceive+0x7a>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <xQueueReceive+0x7c>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10c      	bne.n	800464e <xQueueReceive+0x9a>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	b672      	cpsid	i
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	b662      	cpsie	i
 8004648:	61bb      	str	r3, [r7, #24]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800464e:	f001 f9b5 	bl	80059bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01f      	beq.n	800469e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004662:	f000 f8f7 	bl	8004854 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00f      	beq.n	8004696 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	3310      	adds	r3, #16
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fdbe 	bl	80051fc <xTaskRemoveFromEventList>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <xQueueReceive+0x1c8>)
 8004688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004696:	f001 f9c5 	bl	8005a24 <vPortExitCritical>
				return pdPASS;
 800469a:	2301      	movs	r3, #1
 800469c:	e069      	b.n	8004772 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046a4:	f001 f9be 	bl	8005a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e062      	b.n	8004772 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046b2:	f107 0310 	add.w	r3, r7, #16
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fe04 	bl	80052c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046c0:	f001 f9b0 	bl	8005a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046c4:	f000 fbaa 	bl	8004e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046c8:	f001 f978 	bl	80059bc <vPortEnterCritical>
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046d2:	b25b      	sxtb	r3, r3
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d103      	bne.n	80046e2 <xQueueReceive+0x12e>
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e8:	b25b      	sxtb	r3, r3
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ee:	d103      	bne.n	80046f8 <xQueueReceive+0x144>
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f8:	f001 f994 	bl	8005a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046fc:	1d3a      	adds	r2, r7, #4
 80046fe:	f107 0310 	add.w	r3, r7, #16
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fdf3 	bl	80052f0 <xTaskCheckForTimeOut>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d123      	bne.n	8004758 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004712:	f000 f917 	bl	8004944 <prvIsQueueEmpty>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d017      	beq.n	800474c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	3324      	adds	r3, #36	; 0x24
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fd43 	bl	80051b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800472a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472c:	f000 f8b8 	bl	80048a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004730:	f000 fb82 	bl	8004e38 <xTaskResumeAll>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d189      	bne.n	800464e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <xQueueReceive+0x1c8>)
 800473c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	e780      	b.n	800464e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800474c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474e:	f000 f8a7 	bl	80048a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004752:	f000 fb71 	bl	8004e38 <xTaskResumeAll>
 8004756:	e77a      	b.n	800464e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800475a:	f000 f8a1 	bl	80048a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800475e:	f000 fb6b 	bl	8004e38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004764:	f000 f8ee 	bl	8004944 <prvIsQueueEmpty>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f43f af6f 	beq.w	800464e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004770:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004772:	4618      	mov	r0, r3
 8004774:	3730      	adds	r7, #48	; 0x30
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10d      	bne.n	80047ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d14d      	bne.n	8004842 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 ff0c 	bl	80055c8 <xTaskPriorityDisinherit>
 80047b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	e043      	b.n	8004842 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d119      	bne.n	80047f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6858      	ldr	r0, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	461a      	mov	r2, r3
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	f001 fd2d 	bl	800622a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	441a      	add	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d32b      	bcc.n	8004842 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	e026      	b.n	8004842 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68d8      	ldr	r0, [r3, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	461a      	mov	r2, r3
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	f001 fd13 	bl	800622a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	425b      	negs	r3, r3
 800480e:	441a      	add	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d207      	bcs.n	8004830 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	425b      	negs	r3, r3
 800482a:	441a      	add	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d105      	bne.n	8004842 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3b01      	subs	r3, #1
 8004840:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800484a:	697b      	ldr	r3, [r7, #20]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d018      	beq.n	8004898 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	441a      	add	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	429a      	cmp	r2, r3
 800487e:	d303      	bcc.n	8004888 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68d9      	ldr	r1, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	461a      	mov	r2, r3
 8004892:	6838      	ldr	r0, [r7, #0]
 8004894:	f001 fcc9 	bl	800622a <memcpy>
	}
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048a8:	f001 f888 	bl	80059bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048b4:	e011      	b.n	80048da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d012      	beq.n	80048e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3324      	adds	r3, #36	; 0x24
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fc9a 	bl	80051fc <xTaskRemoveFromEventList>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048ce:	f000 fd75 	bl	80053bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dce9      	bgt.n	80048b6 <prvUnlockQueue+0x16>
 80048e2:	e000      	b.n	80048e6 <prvUnlockQueue+0x46>
					break;
 80048e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	22ff      	movs	r2, #255	; 0xff
 80048ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048ee:	f001 f899 	bl	8005a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048f2:	f001 f863 	bl	80059bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048fe:	e011      	b.n	8004924 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d012      	beq.n	800492e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3310      	adds	r3, #16
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fc75 	bl	80051fc <xTaskRemoveFromEventList>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004918:	f000 fd50 	bl	80053bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800491c:	7bbb      	ldrb	r3, [r7, #14]
 800491e:	3b01      	subs	r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004928:	2b00      	cmp	r3, #0
 800492a:	dce9      	bgt.n	8004900 <prvUnlockQueue+0x60>
 800492c:	e000      	b.n	8004930 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800492e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	22ff      	movs	r2, #255	; 0xff
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004938:	f001 f874 	bl	8005a24 <vPortExitCritical>
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800494c:	f001 f836 	bl	80059bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e001      	b.n	8004962 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004962:	f001 f85f 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	; 0x38
 8004974:	af04      	add	r7, sp, #16
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10c      	bne.n	800499e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	b672      	cpsid	i
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	b662      	cpsie	i
 8004998:	623b      	str	r3, [r7, #32]
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10c      	bne.n	80049be <xTaskCreateStatic+0x4e>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	b672      	cpsid	i
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	b662      	cpsie	i
 80049b8:	61fb      	str	r3, [r7, #28]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049be:	23b4      	movs	r3, #180	; 0xb4
 80049c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2bb4      	cmp	r3, #180	; 0xb4
 80049c6:	d00c      	beq.n	80049e2 <xTaskCreateStatic+0x72>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	b672      	cpsid	i
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	b662      	cpsie	i
 80049dc:	61bb      	str	r3, [r7, #24]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01e      	beq.n	8004a28 <xTaskCreateStatic+0xb8>
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a02:	2300      	movs	r3, #0
 8004a04:	9303      	str	r3, [sp, #12]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	9302      	str	r3, [sp, #8]
 8004a0a:	f107 0314 	add.w	r3, r7, #20
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f850 	bl	8004ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a22:	f000 f8ed 	bl	8004c00 <prvAddNewTaskToReadyList>
 8004a26:	e001      	b.n	8004a2c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a2c:	697b      	ldr	r3, [r7, #20]
	}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3728      	adds	r7, #40	; 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b08c      	sub	sp, #48	; 0x30
 8004a3a:	af04      	add	r7, sp, #16
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 f8e2 	bl	8005c14 <pvPortMalloc>
 8004a50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00e      	beq.n	8004a76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a58:	20b4      	movs	r0, #180	; 0xb4
 8004a5a:	f001 f8db 	bl	8005c14 <pvPortMalloc>
 8004a5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a6c:	e005      	b.n	8004a7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a6e:	6978      	ldr	r0, [r7, #20]
 8004a70:	f001 f99a 	bl	8005da8 <vPortFree>
 8004a74:	e001      	b.n	8004a7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d017      	beq.n	8004ab0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9303      	str	r3, [sp, #12]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	9302      	str	r3, [sp, #8]
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f80e 	bl	8004ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aa4:	69f8      	ldr	r0, [r7, #28]
 8004aa6:	f000 f8ab 	bl	8004c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	e002      	b.n	8004ab6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3720      	adds	r7, #32
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004ad8:	440b      	add	r3, r1
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00c      	beq.n	8004b0c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	b672      	cpsid	i
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	b662      	cpsie	i
 8004b06:	617b      	str	r3, [r7, #20]
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01f      	beq.n	8004b52 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	e012      	b.n	8004b3e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	7819      	ldrb	r1, [r3, #0]
 8004b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	3334      	adds	r3, #52	; 0x34
 8004b28:	460a      	mov	r2, r1
 8004b2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d9e9      	bls.n	8004b18 <prvInitialiseNewTask+0x58>
 8004b44:	e000      	b.n	8004b48 <prvInitialiseNewTask+0x88>
			{
				break;
 8004b46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b50:	e003      	b.n	8004b5a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	2b06      	cmp	r3, #6
 8004b5e:	d901      	bls.n	8004b64 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b60:	2306      	movs	r3, #6
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	2200      	movs	r2, #0
 8004b74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb19 	bl	80041b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	3318      	adds	r3, #24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fb14 	bl	80041b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	f1c3 0207 	rsb	r2, r3, #7
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	334c      	adds	r3, #76	; 0x4c
 8004bb4:	2260      	movs	r2, #96	; 0x60
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 fb44 	bl	8006246 <memset>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <prvInitialiseNewTask+0x134>)
 8004bc2:	651a      	str	r2, [r3, #80]	; 0x50
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <prvInitialiseNewTask+0x138>)
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	4a0b      	ldr	r2, [pc, #44]	; (8004bfc <prvInitialiseNewTask+0x13c>)
 8004bce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	69b8      	ldr	r0, [r7, #24]
 8004bd6:	f000 fde7 	bl	80057a8 <pxPortInitialiseStack>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bec:	bf00      	nop
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	080073c8 	.word	0x080073c8
 8004bf8:	080073e8 	.word	0x080073e8
 8004bfc:	080073a8 	.word	0x080073a8

08004c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c08:	f000 fed8 	bl	80059bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c0c:	4b2a      	ldr	r3, [pc, #168]	; (8004cb8 <prvAddNewTaskToReadyList+0xb8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	4a29      	ldr	r2, [pc, #164]	; (8004cb8 <prvAddNewTaskToReadyList+0xb8>)
 8004c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c16:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <prvAddNewTaskToReadyList+0xbc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c1e:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <prvAddNewTaskToReadyList+0xbc>)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <prvAddNewTaskToReadyList+0xb8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d110      	bne.n	8004c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c2c:	f000 fbea 	bl	8005404 <prvInitialiseTaskLists>
 8004c30:	e00d      	b.n	8004c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c32:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <prvAddNewTaskToReadyList+0xc0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c3a:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <prvAddNewTaskToReadyList+0xbc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d802      	bhi.n	8004c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c48:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <prvAddNewTaskToReadyList+0xbc>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <prvAddNewTaskToReadyList+0xc4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <prvAddNewTaskToReadyList+0xc4>)
 8004c56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <prvAddNewTaskToReadyList+0xc8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <prvAddNewTaskToReadyList+0xc8>)
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <prvAddNewTaskToReadyList+0xcc>)
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f7ff faa3 	bl	80041cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c86:	f000 fecd 	bl	8005a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <prvAddNewTaskToReadyList+0xc0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00e      	beq.n	8004cb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <prvAddNewTaskToReadyList+0xbc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d207      	bcs.n	8004cb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <prvAddNewTaskToReadyList+0xd0>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000788 	.word	0x20000788
 8004cbc:	20000688 	.word	0x20000688
 8004cc0:	20000794 	.word	0x20000794
 8004cc4:	200007a4 	.word	0x200007a4
 8004cc8:	20000790 	.word	0x20000790
 8004ccc:	2000068c 	.word	0x2000068c
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d019      	beq.n	8004d1a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <vTaskDelay+0x64>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <vTaskDelay+0x34>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	b672      	cpsid	i
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	b662      	cpsie	i
 8004d02:	60bb      	str	r3, [r7, #8]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004d08:	f000 f888 	bl	8004e1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fce4 	bl	80056dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d14:	f000 f890 	bl	8004e38 <xTaskResumeAll>
 8004d18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d107      	bne.n	8004d30 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <vTaskDelay+0x68>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	200007b0 	.word	0x200007b0
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d4e:	463a      	mov	r2, r7
 8004d50:	1d39      	adds	r1, r7, #4
 8004d52:	f107 0308 	add.w	r3, r7, #8
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fb fc26 	bl	80005a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	9202      	str	r2, [sp, #8]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	4923      	ldr	r1, [pc, #140]	; (8004dfc <vTaskStartScheduler+0xbc>)
 8004d70:	4823      	ldr	r0, [pc, #140]	; (8004e00 <vTaskStartScheduler+0xc0>)
 8004d72:	f7ff fdfd 	bl	8004970 <xTaskCreateStatic>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <vTaskStartScheduler+0xc4>)
 8004d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d7c:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <vTaskStartScheduler+0xc4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d84:	2301      	movs	r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e001      	b.n	8004d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d11d      	bne.n	8004dd0 <vTaskStartScheduler+0x90>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	b672      	cpsid	i
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	b662      	cpsie	i
 8004da8:	613b      	str	r3, [r7, #16]
}
 8004daa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dac:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <vTaskStartScheduler+0xc8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	334c      	adds	r3, #76	; 0x4c
 8004db2:	4a16      	ldr	r2, [pc, #88]	; (8004e0c <vTaskStartScheduler+0xcc>)
 8004db4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <vTaskStartScheduler+0xd0>)
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <vTaskStartScheduler+0xd4>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dc4:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <vTaskStartScheduler+0xd8>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dca:	f000 fd79 	bl	80058c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dce:	e010      	b.n	8004df2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d10c      	bne.n	8004df2 <vTaskStartScheduler+0xb2>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	b672      	cpsid	i
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	b662      	cpsie	i
 8004dec:	60fb      	str	r3, [r7, #12]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <vTaskStartScheduler+0xb0>
}
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08007388 	.word	0x08007388
 8004e00:	080053d5 	.word	0x080053d5
 8004e04:	200007ac 	.word	0x200007ac
 8004e08:	20000688 	.word	0x20000688
 8004e0c:	20000020 	.word	0x20000020
 8004e10:	200007a8 	.word	0x200007a8
 8004e14:	20000794 	.word	0x20000794
 8004e18:	2000078c 	.word	0x2000078c

08004e1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <vTaskSuspendAll+0x18>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3301      	adds	r3, #1
 8004e26:	4a03      	ldr	r2, [pc, #12]	; (8004e34 <vTaskSuspendAll+0x18>)
 8004e28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	200007b0 	.word	0x200007b0

08004e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e46:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <xTaskResumeAll+0x118>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <xTaskResumeAll+0x30>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	b672      	cpsid	i
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	b662      	cpsie	i
 8004e62:	603b      	str	r3, [r7, #0]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e68:	f000 fda8 	bl	80059bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e6c:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <xTaskResumeAll+0x118>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4a37      	ldr	r2, [pc, #220]	; (8004f50 <xTaskResumeAll+0x118>)
 8004e74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e76:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <xTaskResumeAll+0x118>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d161      	bne.n	8004f42 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e7e:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <xTaskResumeAll+0x11c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d05d      	beq.n	8004f42 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e86:	e02e      	b.n	8004ee6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e88:	4b33      	ldr	r3, [pc, #204]	; (8004f58 <xTaskResumeAll+0x120>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3318      	adds	r3, #24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff f9f6 	bl	8004286 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff f9f1 	bl	8004286 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <xTaskResumeAll+0x124>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <xTaskResumeAll+0x124>)
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4a27      	ldr	r2, [pc, #156]	; (8004f60 <xTaskResumeAll+0x128>)
 8004ec4:	441a      	add	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7ff f97d 	bl	80041cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <xTaskResumeAll+0x12c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ee0:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <xTaskResumeAll+0x130>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <xTaskResumeAll+0x120>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1cc      	bne.n	8004e88 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ef4:	f000 fb2a 	bl	800554c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <xTaskResumeAll+0x134>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f04:	f000 f836 	bl	8004f74 <xTaskIncrementTick>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <xTaskResumeAll+0x130>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f1      	bne.n	8004f04 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004f20:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <xTaskResumeAll+0x134>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f26:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <xTaskResumeAll+0x130>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <xTaskResumeAll+0x138>)
 8004f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f42:	f000 fd6f 	bl	8005a24 <vPortExitCritical>

	return xAlreadyYielded;
 8004f46:	68bb      	ldr	r3, [r7, #8]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	200007b0 	.word	0x200007b0
 8004f54:	20000788 	.word	0x20000788
 8004f58:	20000748 	.word	0x20000748
 8004f5c:	20000790 	.word	0x20000790
 8004f60:	2000068c 	.word	0x2000068c
 8004f64:	20000688 	.word	0x20000688
 8004f68:	2000079c 	.word	0x2000079c
 8004f6c:	20000798 	.word	0x20000798
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7e:	4b4f      	ldr	r3, [pc, #316]	; (80050bc <xTaskIncrementTick+0x148>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 808a 	bne.w	800509c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f88:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <xTaskIncrementTick+0x14c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f90:	4a4b      	ldr	r2, [pc, #300]	; (80050c0 <xTaskIncrementTick+0x14c>)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d122      	bne.n	8004fe2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f9c:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <xTaskIncrementTick+0x150>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	b672      	cpsid	i
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	b662      	cpsie	i
 8004fba:	603b      	str	r3, [r7, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <xTaskIncrementTick+0x4a>
 8004fc0:	4b40      	ldr	r3, [pc, #256]	; (80050c4 <xTaskIncrementTick+0x150>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	4b40      	ldr	r3, [pc, #256]	; (80050c8 <xTaskIncrementTick+0x154>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3e      	ldr	r2, [pc, #248]	; (80050c4 <xTaskIncrementTick+0x150>)
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	4a3e      	ldr	r2, [pc, #248]	; (80050c8 <xTaskIncrementTick+0x154>)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <xTaskIncrementTick+0x158>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <xTaskIncrementTick+0x158>)
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	f000 fab5 	bl	800554c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <xTaskIncrementTick+0x15c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d348      	bcc.n	800507e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fec:	4b35      	ldr	r3, [pc, #212]	; (80050c4 <xTaskIncrementTick+0x150>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <xTaskIncrementTick+0x15c>)
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffc:	601a      	str	r2, [r3, #0]
					break;
 8004ffe:	e03e      	b.n	800507e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005000:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <xTaskIncrementTick+0x150>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d203      	bcs.n	8005020 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005018:	4a2d      	ldr	r2, [pc, #180]	; (80050d0 <xTaskIncrementTick+0x15c>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800501e:	e02e      	b.n	800507e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff f92e 	bl	8004286 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	3318      	adds	r3, #24
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff f925 	bl	8004286 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	2201      	movs	r2, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <xTaskIncrementTick+0x160>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4313      	orrs	r3, r2
 800504a:	4a22      	ldr	r2, [pc, #136]	; (80050d4 <xTaskIncrementTick+0x160>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <xTaskIncrementTick+0x164>)
 800505c:	441a      	add	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7ff f8b1 	bl	80041cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <xTaskIncrementTick+0x168>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d3b9      	bcc.n	8004fec <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507c:	e7b6      	b.n	8004fec <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800507e:	4b17      	ldr	r3, [pc, #92]	; (80050dc <xTaskIncrementTick+0x168>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	4914      	ldr	r1, [pc, #80]	; (80050d8 <xTaskIncrementTick+0x164>)
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d907      	bls.n	80050a6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005096:	2301      	movs	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e004      	b.n	80050a6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <xTaskIncrementTick+0x16c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4a0f      	ldr	r2, [pc, #60]	; (80050e0 <xTaskIncrementTick+0x16c>)
 80050a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <xTaskIncrementTick+0x170>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050b2:	697b      	ldr	r3, [r7, #20]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	200007b0 	.word	0x200007b0
 80050c0:	2000078c 	.word	0x2000078c
 80050c4:	20000740 	.word	0x20000740
 80050c8:	20000744 	.word	0x20000744
 80050cc:	200007a0 	.word	0x200007a0
 80050d0:	200007a8 	.word	0x200007a8
 80050d4:	20000790 	.word	0x20000790
 80050d8:	2000068c 	.word	0x2000068c
 80050dc:	20000688 	.word	0x20000688
 80050e0:	20000798 	.word	0x20000798
 80050e4:	2000079c 	.word	0x2000079c

080050e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050ee:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <vTaskSwitchContext+0xb0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050f6:	4b29      	ldr	r3, [pc, #164]	; (800519c <vTaskSwitchContext+0xb4>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050fc:	e046      	b.n	800518c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80050fe:	4b27      	ldr	r3, [pc, #156]	; (800519c <vTaskSwitchContext+0xb4>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005104:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <vTaskSwitchContext+0xb8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	fab3 f383 	clz	r3, r3
 8005110:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	f1c3 031f 	rsb	r3, r3, #31
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	4922      	ldr	r1, [pc, #136]	; (80051a4 <vTaskSwitchContext+0xbc>)
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <vTaskSwitchContext+0x60>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	b672      	cpsid	i
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	b662      	cpsie	i
 8005142:	607b      	str	r3, [r7, #4]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vTaskSwitchContext+0x5e>
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <vTaskSwitchContext+0xbc>)
 8005154:	4413      	add	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3308      	adds	r3, #8
 800516a:	429a      	cmp	r2, r3
 800516c:	d104      	bne.n	8005178 <vTaskSwitchContext+0x90>
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	605a      	str	r2, [r3, #4]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <vTaskSwitchContext+0xc0>)
 8005180:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <vTaskSwitchContext+0xc0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	334c      	adds	r3, #76	; 0x4c
 8005188:	4a08      	ldr	r2, [pc, #32]	; (80051ac <vTaskSwitchContext+0xc4>)
 800518a:	6013      	str	r3, [r2, #0]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	200007b0 	.word	0x200007b0
 800519c:	2000079c 	.word	0x2000079c
 80051a0:	20000790 	.word	0x20000790
 80051a4:	2000068c 	.word	0x2000068c
 80051a8:	20000688 	.word	0x20000688
 80051ac:	20000020 	.word	0x20000020

080051b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	b672      	cpsid	i
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	b662      	cpsie	i
 80051d4:	60fb      	str	r3, [r7, #12]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <vTaskPlaceOnEventList+0x48>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3318      	adds	r3, #24
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff f816 	bl	8004214 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051e8:	2101      	movs	r1, #1
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	f000 fa76 	bl	80056dc <prvAddCurrentTaskToDelayedList>
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000688 	.word	0x20000688

080051fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10c      	bne.n	800522c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	b672      	cpsid	i
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	b662      	cpsie	i
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3318      	adds	r3, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff f828 	bl	8004286 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <xTaskRemoveFromEventList+0xb0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11c      	bne.n	8005278 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3304      	adds	r3, #4
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff f81f 	bl	8004286 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	2201      	movs	r2, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <xTaskRemoveFromEventList+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <xTaskRemoveFromEventList+0xb4>)
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <xTaskRemoveFromEventList+0xb8>)
 8005268:	441a      	add	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3304      	adds	r3, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fe ffab 	bl	80041cc <vListInsertEnd>
 8005276:	e005      	b.n	8005284 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3318      	adds	r3, #24
 800527c:	4619      	mov	r1, r3
 800527e:	480e      	ldr	r0, [pc, #56]	; (80052b8 <xTaskRemoveFromEventList+0xbc>)
 8005280:	f7fe ffa4 	bl	80041cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <xTaskRemoveFromEventList+0xc0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	429a      	cmp	r2, r3
 8005290:	d905      	bls.n	800529e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <xTaskRemoveFromEventList+0xc4>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e001      	b.n	80052a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	200007b0 	.word	0x200007b0
 80052b0:	20000790 	.word	0x20000790
 80052b4:	2000068c 	.word	0x2000068c
 80052b8:	20000748 	.word	0x20000748
 80052bc:	20000688 	.word	0x20000688
 80052c0:	2000079c 	.word	0x2000079c

080052c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <vTaskInternalSetTimeOutState+0x24>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <vTaskInternalSetTimeOutState+0x28>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	605a      	str	r2, [r3, #4]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	200007a0 	.word	0x200007a0
 80052ec:	2000078c 	.word	0x2000078c

080052f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10c      	bne.n	800531a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	b672      	cpsid	i
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	b662      	cpsie	i
 8005314:	613b      	str	r3, [r7, #16]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10c      	bne.n	800533a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	b672      	cpsid	i
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	b662      	cpsie	i
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800533a:	f000 fb3f 	bl	80059bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800533e:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <xTaskCheckForTimeOut+0xc4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d102      	bne.n	800535e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e023      	b.n	80053a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <xTaskCheckForTimeOut+0xc8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d007      	beq.n	800537a <xTaskCheckForTimeOut+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d302      	bcc.n	800537a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e015      	b.n	80053a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	d20b      	bcs.n	800539c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ff97 	bl	80052c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	e004      	b.n	80053a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053a6:	f000 fb3d 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 80053aa:	69fb      	ldr	r3, [r7, #28]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000078c 	.word	0x2000078c
 80053b8:	200007a0 	.word	0x200007a0

080053bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <vTaskMissedYield+0x14>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	2000079c 	.word	0x2000079c

080053d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053dc:	f000 f852 	bl	8005484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <prvIdleTask+0x28>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d9f9      	bls.n	80053dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <prvIdleTask+0x2c>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053f8:	e7f0      	b.n	80053dc <prvIdleTask+0x8>
 80053fa:	bf00      	nop
 80053fc:	2000068c 	.word	0x2000068c
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	e00c      	b.n	800542a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <prvInitialiseTaskLists+0x60>)
 800541c:	4413      	add	r3, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fea7 	bl	8004172 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3301      	adds	r3, #1
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d9ef      	bls.n	8005410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005430:	480d      	ldr	r0, [pc, #52]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005432:	f7fe fe9e 	bl	8004172 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005436:	480d      	ldr	r0, [pc, #52]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005438:	f7fe fe9b 	bl	8004172 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800543c:	480c      	ldr	r0, [pc, #48]	; (8005470 <prvInitialiseTaskLists+0x6c>)
 800543e:	f7fe fe98 	bl	8004172 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005442:	480c      	ldr	r0, [pc, #48]	; (8005474 <prvInitialiseTaskLists+0x70>)
 8005444:	f7fe fe95 	bl	8004172 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005448:	480b      	ldr	r0, [pc, #44]	; (8005478 <prvInitialiseTaskLists+0x74>)
 800544a:	f7fe fe92 	bl	8004172 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <prvInitialiseTaskLists+0x78>)
 8005450:	4a05      	ldr	r2, [pc, #20]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <prvInitialiseTaskLists+0x7c>)
 8005456:	4a05      	ldr	r2, [pc, #20]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	2000068c 	.word	0x2000068c
 8005468:	20000718 	.word	0x20000718
 800546c:	2000072c 	.word	0x2000072c
 8005470:	20000748 	.word	0x20000748
 8005474:	2000075c 	.word	0x2000075c
 8005478:	20000774 	.word	0x20000774
 800547c:	20000740 	.word	0x20000740
 8005480:	20000744 	.word	0x20000744

08005484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800548a:	e019      	b.n	80054c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800548c:	f000 fa96 	bl	80059bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005490:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <prvCheckTasksWaitingTermination+0x50>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	4618      	mov	r0, r3
 800549e:	f7fe fef2 	bl	8004286 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054b6:	f000 fab5 	bl	8005a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f810 	bl	80054e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e1      	bne.n	800548c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	2000075c 	.word	0x2000075c
 80054d8:	20000788 	.word	0x20000788
 80054dc:	20000770 	.word	0x20000770

080054e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	334c      	adds	r3, #76	; 0x4c
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 ffa9 	bl	8006444 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fc51 	bl	8005da8 <vPortFree>
				vPortFree( pxTCB );
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fc4e 	bl	8005da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800550c:	e01a      	b.n	8005544 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d103      	bne.n	8005520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fc45 	bl	8005da8 <vPortFree>
	}
 800551e:	e011      	b.n	8005544 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005526:	2b02      	cmp	r3, #2
 8005528:	d00c      	beq.n	8005544 <prvDeleteTCB+0x64>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	b672      	cpsid	i
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	b662      	cpsie	i
 800553e:	60fb      	str	r3, [r7, #12]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <prvDeleteTCB+0x62>
	}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <prvResetNextTaskUnblockTime+0x38>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <prvResetNextTaskUnblockTime+0x3c>)
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005564:	e008      	b.n	8005578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <prvResetNextTaskUnblockTime+0x38>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <prvResetNextTaskUnblockTime+0x3c>)
 8005576:	6013      	str	r3, [r2, #0]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	20000740 	.word	0x20000740
 8005588:	200007a8 	.word	0x200007a8

0800558c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <xTaskGetSchedulerState+0x34>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800559a:	2301      	movs	r3, #1
 800559c:	607b      	str	r3, [r7, #4]
 800559e:	e008      	b.n	80055b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <xTaskGetSchedulerState+0x38>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055a8:	2302      	movs	r3, #2
 80055aa:	607b      	str	r3, [r7, #4]
 80055ac:	e001      	b.n	80055b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055b2:	687b      	ldr	r3, [r7, #4]
	}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000794 	.word	0x20000794
 80055c4:	200007b0 	.word	0x200007b0

080055c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d072      	beq.n	80056c4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055de:	4b3c      	ldr	r3, [pc, #240]	; (80056d0 <xTaskPriorityDisinherit+0x108>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d00c      	beq.n	8005602 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	b672      	cpsid	i
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	b662      	cpsie	i
 80055fc:	60fb      	str	r3, [r7, #12]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	b672      	cpsid	i
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	b662      	cpsie	i
 800561e:	60bb      	str	r3, [r7, #8]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	429a      	cmp	r2, r3
 8005638:	d044      	beq.n	80056c4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563e:	2b00      	cmp	r3, #0
 8005640:	d140      	bne.n	80056c4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fe1d 	bl	8004286 <uxListRemove>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d115      	bne.n	800567e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005656:	491f      	ldr	r1, [pc, #124]	; (80056d4 <xTaskPriorityDisinherit+0x10c>)
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xTaskPriorityDisinherit+0xb6>
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2201      	movs	r2, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43da      	mvns	r2, r3
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <xTaskPriorityDisinherit+0x110>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4013      	ands	r3, r2
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <xTaskPriorityDisinherit+0x110>)
 800567c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	f1c3 0207 	rsb	r2, r3, #7
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	2201      	movs	r2, #1
 8005698:	409a      	lsls	r2, r3
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <xTaskPriorityDisinherit+0x110>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4313      	orrs	r3, r2
 80056a0:	4a0d      	ldr	r2, [pc, #52]	; (80056d8 <xTaskPriorityDisinherit+0x110>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <xTaskPriorityDisinherit+0x10c>)
 80056b2:	441a      	add	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f7fe fd86 	bl	80041cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056c4:	697b      	ldr	r3, [r7, #20]
	}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000688 	.word	0x20000688
 80056d4:	2000068c 	.word	0x2000068c
 80056d8:	20000790 	.word	0x20000790

080056dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056e6:	4b29      	ldr	r3, [pc, #164]	; (800578c <prvAddCurrentTaskToDelayedList+0xb0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe fdc7 	bl	8004286 <uxListRemove>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10b      	bne.n	8005716 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	2201      	movs	r2, #1
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	43da      	mvns	r2, r3
 800570c:	4b21      	ldr	r3, [pc, #132]	; (8005794 <prvAddCurrentTaskToDelayedList+0xb8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4013      	ands	r3, r2
 8005712:	4a20      	ldr	r2, [pc, #128]	; (8005794 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005714:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d10a      	bne.n	8005734 <prvAddCurrentTaskToDelayedList+0x58>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005724:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	481a      	ldr	r0, [pc, #104]	; (8005798 <prvAddCurrentTaskToDelayedList+0xbc>)
 800572e:	f7fe fd4d 	bl	80041cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005732:	e026      	b.n	8005782 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d209      	bcs.n	8005760 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800574c:	4b13      	ldr	r3, [pc, #76]	; (800579c <prvAddCurrentTaskToDelayedList+0xc0>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fe fd5b 	bl	8004214 <vListInsert>
}
 800575e:	e010      	b.n	8005782 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7fe fd51 	bl	8004214 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d202      	bcs.n	8005782 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800577c:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6013      	str	r3, [r2, #0]
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	2000078c 	.word	0x2000078c
 8005790:	20000688 	.word	0x20000688
 8005794:	20000790 	.word	0x20000790
 8005798:	20000774 	.word	0x20000774
 800579c:	20000744 	.word	0x20000744
 80057a0:	20000740 	.word	0x20000740
 80057a4:	200007a8 	.word	0x200007a8

080057a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3b04      	subs	r3, #4
 80057b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b04      	subs	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057d8:	4a0c      	ldr	r2, [pc, #48]	; (800580c <pxPortInitialiseStack+0x64>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3b14      	subs	r3, #20
 80057e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b04      	subs	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f06f 0202 	mvn.w	r2, #2
 80057f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3b20      	subs	r3, #32
 80057fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057fe:	68fb      	ldr	r3, [r7, #12]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	08005811 	.word	0x08005811

08005810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <prvTaskExitError+0x5c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d00c      	beq.n	800583e <prvTaskExitError+0x2e>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	b672      	cpsid	i
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	b662      	cpsie	i
 8005838:	60fb      	str	r3, [r7, #12]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <prvTaskExitError+0x2c>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	b672      	cpsid	i
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	b662      	cpsie	i
 8005852:	60bb      	str	r3, [r7, #8]
}
 8005854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005856:	bf00      	nop
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0fc      	beq.n	8005858 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800585e:	bf00      	nop
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	2000001c 	.word	0x2000001c

08005870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <pxCurrentTCBConst2>)
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f380 8809 	msr	PSP, r0
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8811 	msr	BASEPRI, r0
 800588a:	4770      	bx	lr
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst2>:
 8005890:	20000688 	.word	0x20000688
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005898:	4808      	ldr	r0, [pc, #32]	; (80058bc <prvPortStartFirstTask+0x24>)
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	f380 8808 	msr	MSP, r0
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8814 	msr	CONTROL, r0
 80058aa:	b662      	cpsie	i
 80058ac:	b661      	cpsie	f
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	df00      	svc	0
 80058b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ba:	bf00      	nop
 80058bc:	e000ed08 	.word	0xe000ed08

080058c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058c6:	4b37      	ldr	r3, [pc, #220]	; (80059a4 <xPortStartScheduler+0xe4>)
 80058c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4b2f      	ldr	r3, [pc, #188]	; (80059a8 <xPortStartScheduler+0xe8>)
 80058ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <xPortStartScheduler+0xec>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058f4:	e009      	b.n	800590a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80058f6:	4b2d      	ldr	r3, [pc, #180]	; (80059ac <xPortStartScheduler+0xec>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	4a2b      	ldr	r2, [pc, #172]	; (80059ac <xPortStartScheduler+0xec>)
 80058fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b80      	cmp	r3, #128	; 0x80
 8005914:	d0ef      	beq.n	80058f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005916:	4b25      	ldr	r3, [pc, #148]	; (80059ac <xPortStartScheduler+0xec>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1c3 0307 	rsb	r3, r3, #7
 800591e:	2b04      	cmp	r3, #4
 8005920:	d00c      	beq.n	800593c <xPortStartScheduler+0x7c>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	b672      	cpsid	i
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	b662      	cpsie	i
 8005936:	60bb      	str	r3, [r7, #8]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <xPortStartScheduler+0xec>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <xPortStartScheduler+0xec>)
 8005944:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005946:	4b19      	ldr	r3, [pc, #100]	; (80059ac <xPortStartScheduler+0xec>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800594e:	4a17      	ldr	r2, [pc, #92]	; (80059ac <xPortStartScheduler+0xec>)
 8005950:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800595a:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <xPortStartScheduler+0xf0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a14      	ldr	r2, [pc, #80]	; (80059b0 <xPortStartScheduler+0xf0>)
 8005960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005964:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005966:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <xPortStartScheduler+0xf0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a11      	ldr	r2, [pc, #68]	; (80059b0 <xPortStartScheduler+0xf0>)
 800596c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005970:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005972:	f000 f8dd 	bl	8005b30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <xPortStartScheduler+0xf4>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800597c:	f000 f8fc 	bl	8005b78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <xPortStartScheduler+0xf8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <xPortStartScheduler+0xf8>)
 8005986:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800598a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800598c:	f7ff ff84 	bl	8005898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005990:	f7ff fbaa 	bl	80050e8 <vTaskSwitchContext>
	prvTaskExitError();
 8005994:	f7ff ff3c 	bl	8005810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	e000e400 	.word	0xe000e400
 80059a8:	200007b4 	.word	0x200007b4
 80059ac:	200007b8 	.word	0x200007b8
 80059b0:	e000ed20 	.word	0xe000ed20
 80059b4:	2000001c 	.word	0x2000001c
 80059b8:	e000ef34 	.word	0xe000ef34

080059bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	b672      	cpsid	i
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	b662      	cpsie	i
 80059d6:	607b      	str	r3, [r7, #4]
}
 80059d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059da:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <vPortEnterCritical+0x60>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	4a0e      	ldr	r2, [pc, #56]	; (8005a1c <vPortEnterCritical+0x60>)
 80059e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059e4:	4b0d      	ldr	r3, [pc, #52]	; (8005a1c <vPortEnterCritical+0x60>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d111      	bne.n	8005a10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059ec:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <vPortEnterCritical+0x64>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <vPortEnterCritical+0x54>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	b672      	cpsid	i
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	b662      	cpsie	i
 8005a0a:	603b      	str	r3, [r7, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <vPortEnterCritical+0x52>
	}
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	2000001c 	.word	0x2000001c
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <vPortExitCritical+0x54>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10c      	bne.n	8005a4c <vPortExitCritical+0x28>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	b672      	cpsid	i
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	b662      	cpsie	i
 8005a46:	607b      	str	r3, [r7, #4]
}
 8005a48:	bf00      	nop
 8005a4a:	e7fe      	b.n	8005a4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <vPortExitCritical+0x54>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <vPortExitCritical+0x54>)
 8005a54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <vPortExitCritical+0x54>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d105      	bne.n	8005a6a <vPortExitCritical+0x46>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	f383 8811 	msr	BASEPRI, r3
}
 8005a68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	2000001c 	.word	0x2000001c
 8005a7c:	00000000 	.word	0x00000000

08005a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a80:	f3ef 8009 	mrs	r0, PSP
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <pxCurrentTCBConst>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f01e 0f10 	tst.w	lr, #16
 8005a90:	bf08      	it	eq
 8005a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	6010      	str	r0, [r2, #0]
 8005a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aa4:	b672      	cpsid	i
 8005aa6:	f380 8811 	msr	BASEPRI, r0
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	b662      	cpsie	i
 8005ab4:	f7ff fb18 	bl	80050e8 <vTaskSwitchContext>
 8005ab8:	f04f 0000 	mov.w	r0, #0
 8005abc:	f380 8811 	msr	BASEPRI, r0
 8005ac0:	bc09      	pop	{r0, r3}
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	6808      	ldr	r0, [r1, #0]
 8005ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	f01e 0f10 	tst.w	lr, #16
 8005ace:	bf08      	it	eq
 8005ad0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ad4:	f380 8809 	msr	PSP, r0
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <pxCurrentTCBConst>:
 8005ae0:	20000688 	.word	0x20000688
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop

08005ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	b672      	cpsid	i
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	b662      	cpsie	i
 8005b02:	607b      	str	r3, [r7, #4]
}
 8005b04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b06:	f7ff fa35 	bl	8004f74 <xTaskIncrementTick>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <SysTick_Handler+0x44>)
 8005b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f383 8811 	msr	BASEPRI, r3
}
 8005b22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <vPortSetupTimerInterrupt+0x34>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <vPortSetupTimerInterrupt+0x38>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <vPortSetupTimerInterrupt+0x3c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <vPortSetupTimerInterrupt+0x40>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	099b      	lsrs	r3, r3, #6
 8005b4c:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <vPortSetupTimerInterrupt+0x44>)
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <vPortSetupTimerInterrupt+0x34>)
 8005b54:	2207      	movs	r2, #7
 8005b56:	601a      	str	r2, [r3, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	e000e010 	.word	0xe000e010
 8005b68:	e000e018 	.word	0xe000e018
 8005b6c:	20000010 	.word	0x20000010
 8005b70:	10624dd3 	.word	0x10624dd3
 8005b74:	e000e014 	.word	0xe000e014

08005b78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b88 <vPortEnableVFP+0x10>
 8005b7c:	6801      	ldr	r1, [r0, #0]
 8005b7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b82:	6001      	str	r1, [r0, #0]
 8005b84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b86:	bf00      	nop
 8005b88:	e000ed88 	.word	0xe000ed88

08005b8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b92:	f3ef 8305 	mrs	r3, IPSR
 8005b96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	d916      	bls.n	8005bcc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b9e:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <vPortValidateInterruptPriority+0x78>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <vPortValidateInterruptPriority+0x7c>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	7afa      	ldrb	r2, [r7, #11]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d20c      	bcs.n	8005bcc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	b672      	cpsid	i
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	b662      	cpsie	i
 8005bc6:	607b      	str	r3, [r7, #4]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <vPortValidateInterruptPriority+0x80>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <vPortValidateInterruptPriority+0x84>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d90c      	bls.n	8005bf6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	b672      	cpsid	i
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	b662      	cpsie	i
 8005bf0:	603b      	str	r3, [r7, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <vPortValidateInterruptPriority+0x68>
	}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	e000e3f0 	.word	0xe000e3f0
 8005c08:	200007b4 	.word	0x200007b4
 8005c0c:	e000ed0c 	.word	0xe000ed0c
 8005c10:	200007b8 	.word	0x200007b8

08005c14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c20:	f7ff f8fc 	bl	8004e1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c24:	4b5b      	ldr	r3, [pc, #364]	; (8005d94 <pvPortMalloc+0x180>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c2c:	f000 f91a 	bl	8005e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c30:	4b59      	ldr	r3, [pc, #356]	; (8005d98 <pvPortMalloc+0x184>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 8092 	bne.w	8005d62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01f      	beq.n	8005c84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005c44:	2208      	movs	r2, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4413      	add	r3, r2
 8005c4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f023 0307 	bic.w	r3, r3, #7
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00c      	beq.n	8005c84 <pvPortMalloc+0x70>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	b672      	cpsid	i
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	b662      	cpsie	i
 8005c7e:	617b      	str	r3, [r7, #20]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d06b      	beq.n	8005d62 <pvPortMalloc+0x14e>
 8005c8a:	4b44      	ldr	r3, [pc, #272]	; (8005d9c <pvPortMalloc+0x188>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d866      	bhi.n	8005d62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c94:	4b42      	ldr	r3, [pc, #264]	; (8005da0 <pvPortMalloc+0x18c>)
 8005c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c98:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <pvPortMalloc+0x18c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9e:	e004      	b.n	8005caa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d903      	bls.n	8005cbc <pvPortMalloc+0xa8>
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f1      	bne.n	8005ca0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cbc:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <pvPortMalloc+0x180>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d04d      	beq.n	8005d62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	4413      	add	r3, r2
 8005cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d921      	bls.n	8005d2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <pvPortMalloc+0x100>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	b672      	cpsid	i
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	b662      	cpsie	i
 8005d0e:	613b      	str	r3, [r7, #16]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d26:	69b8      	ldr	r0, [r7, #24]
 8005d28:	f000 f8fe 	bl	8005f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <pvPortMalloc+0x188>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <pvPortMalloc+0x188>)
 8005d38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d3a:	4b18      	ldr	r3, [pc, #96]	; (8005d9c <pvPortMalloc+0x188>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <pvPortMalloc+0x190>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d203      	bcs.n	8005d4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d46:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <pvPortMalloc+0x188>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <pvPortMalloc+0x190>)
 8005d4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <pvPortMalloc+0x184>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d62:	f7ff f869 	bl	8004e38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00c      	beq.n	8005d8a <pvPortMalloc+0x176>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	b672      	cpsid	i
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	b662      	cpsie	i
 8005d84:	60fb      	str	r3, [r7, #12]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <pvPortMalloc+0x174>
	return pvReturn;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3728      	adds	r7, #40	; 0x28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200043c4 	.word	0x200043c4
 8005d98:	200043d0 	.word	0x200043d0
 8005d9c:	200043c8 	.word	0x200043c8
 8005da0:	200043bc 	.word	0x200043bc
 8005da4:	200043cc 	.word	0x200043cc

08005da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d04c      	beq.n	8005e54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dba:	2308      	movs	r3, #8
 8005dbc:	425b      	negs	r3, r3
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <vPortFree+0xb4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10c      	bne.n	8005df0 <vPortFree+0x48>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	b672      	cpsid	i
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	b662      	cpsie	i
 8005dea:	60fb      	str	r3, [r7, #12]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00c      	beq.n	8005e12 <vPortFree+0x6a>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	b672      	cpsid	i
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	b662      	cpsie	i
 8005e0c:	60bb      	str	r3, [r7, #8]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <vPortFree+0xb4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d019      	beq.n	8005e54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d115      	bne.n	8005e54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <vPortFree+0xb4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e38:	f7fe fff0 	bl	8004e1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <vPortFree+0xb8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <vPortFree+0xb8>)
 8005e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f000 f86c 	bl	8005f28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e50:	f7fe fff2 	bl	8004e38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e54:	bf00      	nop
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200043d0 	.word	0x200043d0
 8005e60:	200043c8 	.word	0x200043c8

08005e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e70:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <prvHeapInit+0xac>)
 8005e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3307      	adds	r3, #7
 8005e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <prvHeapInit+0xac>)
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <prvHeapInit+0xb0>)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <prvHeapInit+0xb0>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4413      	add	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <prvHeapInit+0xb4>)
 8005ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ec6:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <prvHeapInit+0xb4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <prvHeapInit+0xb4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <prvHeapInit+0xb4>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <prvHeapInit+0xb8>)
 8005ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <prvHeapInit+0xbc>)
 8005efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <prvHeapInit+0xc0>)
 8005efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	200007bc 	.word	0x200007bc
 8005f14:	200043bc 	.word	0x200043bc
 8005f18:	200043c4 	.word	0x200043c4
 8005f1c:	200043cc 	.word	0x200043cc
 8005f20:	200043c8 	.word	0x200043c8
 8005f24:	200043d0 	.word	0x200043d0

08005f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f30:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <prvInsertBlockIntoFreeList+0xac>)
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e002      	b.n	8005f3c <prvInsertBlockIntoFreeList+0x14>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d8f7      	bhi.n	8005f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4413      	add	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d108      	bne.n	8005f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	441a      	add	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	441a      	add	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d118      	bne.n	8005fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d00d      	beq.n	8005fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e008      	b.n	8005fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e003      	b.n	8005fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d002      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	200043bc 	.word	0x200043bc
 8005fd8:	200043c4 	.word	0x200043c4

08005fdc <atoi>:
 8005fdc:	220a      	movs	r2, #10
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f000 bb64 	b.w	80066ac <strtol>

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000020 	.word	0x20000020

08005ff0 <std>:
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8005ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ffe:	6083      	str	r3, [r0, #8]
 8006000:	8181      	strh	r1, [r0, #12]
 8006002:	6643      	str	r3, [r0, #100]	; 0x64
 8006004:	81c2      	strh	r2, [r0, #14]
 8006006:	6183      	str	r3, [r0, #24]
 8006008:	4619      	mov	r1, r3
 800600a:	2208      	movs	r2, #8
 800600c:	305c      	adds	r0, #92	; 0x5c
 800600e:	f000 f91a 	bl	8006246 <memset>
 8006012:	4b05      	ldr	r3, [pc, #20]	; (8006028 <std+0x38>)
 8006014:	6263      	str	r3, [r4, #36]	; 0x24
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <std+0x3c>)
 8006018:	62a3      	str	r3, [r4, #40]	; 0x28
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <std+0x40>)
 800601c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <std+0x44>)
 8006020:	6224      	str	r4, [r4, #32]
 8006022:	6323      	str	r3, [r4, #48]	; 0x30
 8006024:	bd10      	pop	{r4, pc}
 8006026:	bf00      	nop
 8006028:	0800651d 	.word	0x0800651d
 800602c:	0800653f 	.word	0x0800653f
 8006030:	08006577 	.word	0x08006577
 8006034:	0800659b 	.word	0x0800659b

08006038 <_cleanup_r>:
 8006038:	4901      	ldr	r1, [pc, #4]	; (8006040 <_cleanup_r+0x8>)
 800603a:	f000 b8af 	b.w	800619c <_fwalk_reent>
 800603e:	bf00      	nop
 8006040:	08006991 	.word	0x08006991

08006044 <__sfmoreglue>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	1e4a      	subs	r2, r1, #1
 8006048:	2568      	movs	r5, #104	; 0x68
 800604a:	4355      	muls	r5, r2
 800604c:	460e      	mov	r6, r1
 800604e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006052:	f000 f901 	bl	8006258 <_malloc_r>
 8006056:	4604      	mov	r4, r0
 8006058:	b140      	cbz	r0, 800606c <__sfmoreglue+0x28>
 800605a:	2100      	movs	r1, #0
 800605c:	e9c0 1600 	strd	r1, r6, [r0]
 8006060:	300c      	adds	r0, #12
 8006062:	60a0      	str	r0, [r4, #8]
 8006064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006068:	f000 f8ed 	bl	8006246 <memset>
 800606c:	4620      	mov	r0, r4
 800606e:	bd70      	pop	{r4, r5, r6, pc}

08006070 <__sfp_lock_acquire>:
 8006070:	4801      	ldr	r0, [pc, #4]	; (8006078 <__sfp_lock_acquire+0x8>)
 8006072:	f000 b8d8 	b.w	8006226 <__retarget_lock_acquire_recursive>
 8006076:	bf00      	nop
 8006078:	200044c0 	.word	0x200044c0

0800607c <__sfp_lock_release>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__sfp_lock_release+0x8>)
 800607e:	f000 b8d3 	b.w	8006228 <__retarget_lock_release_recursive>
 8006082:	bf00      	nop
 8006084:	200044c0 	.word	0x200044c0

08006088 <__sinit_lock_acquire>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__sinit_lock_acquire+0x8>)
 800608a:	f000 b8cc 	b.w	8006226 <__retarget_lock_acquire_recursive>
 800608e:	bf00      	nop
 8006090:	200044bb 	.word	0x200044bb

08006094 <__sinit_lock_release>:
 8006094:	4801      	ldr	r0, [pc, #4]	; (800609c <__sinit_lock_release+0x8>)
 8006096:	f000 b8c7 	b.w	8006228 <__retarget_lock_release_recursive>
 800609a:	bf00      	nop
 800609c:	200044bb 	.word	0x200044bb

080060a0 <__sinit>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	4604      	mov	r4, r0
 80060a4:	f7ff fff0 	bl	8006088 <__sinit_lock_acquire>
 80060a8:	69a3      	ldr	r3, [r4, #24]
 80060aa:	b11b      	cbz	r3, 80060b4 <__sinit+0x14>
 80060ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b0:	f7ff bff0 	b.w	8006094 <__sinit_lock_release>
 80060b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060b8:	6523      	str	r3, [r4, #80]	; 0x50
 80060ba:	4b13      	ldr	r3, [pc, #76]	; (8006108 <__sinit+0x68>)
 80060bc:	4a13      	ldr	r2, [pc, #76]	; (800610c <__sinit+0x6c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80060c2:	42a3      	cmp	r3, r4
 80060c4:	bf04      	itt	eq
 80060c6:	2301      	moveq	r3, #1
 80060c8:	61a3      	streq	r3, [r4, #24]
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 f820 	bl	8006110 <__sfp>
 80060d0:	6060      	str	r0, [r4, #4]
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 f81c 	bl	8006110 <__sfp>
 80060d8:	60a0      	str	r0, [r4, #8]
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f818 	bl	8006110 <__sfp>
 80060e0:	2200      	movs	r2, #0
 80060e2:	60e0      	str	r0, [r4, #12]
 80060e4:	2104      	movs	r1, #4
 80060e6:	6860      	ldr	r0, [r4, #4]
 80060e8:	f7ff ff82 	bl	8005ff0 <std>
 80060ec:	68a0      	ldr	r0, [r4, #8]
 80060ee:	2201      	movs	r2, #1
 80060f0:	2109      	movs	r1, #9
 80060f2:	f7ff ff7d 	bl	8005ff0 <std>
 80060f6:	68e0      	ldr	r0, [r4, #12]
 80060f8:	2202      	movs	r2, #2
 80060fa:	2112      	movs	r1, #18
 80060fc:	f7ff ff78 	bl	8005ff0 <std>
 8006100:	2301      	movs	r3, #1
 8006102:	61a3      	str	r3, [r4, #24]
 8006104:	e7d2      	b.n	80060ac <__sinit+0xc>
 8006106:	bf00      	nop
 8006108:	08007408 	.word	0x08007408
 800610c:	08006039 	.word	0x08006039

08006110 <__sfp>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	4607      	mov	r7, r0
 8006114:	f7ff ffac 	bl	8006070 <__sfp_lock_acquire>
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <__sfp+0x84>)
 800611a:	681e      	ldr	r6, [r3, #0]
 800611c:	69b3      	ldr	r3, [r6, #24]
 800611e:	b913      	cbnz	r3, 8006126 <__sfp+0x16>
 8006120:	4630      	mov	r0, r6
 8006122:	f7ff ffbd 	bl	80060a0 <__sinit>
 8006126:	3648      	adds	r6, #72	; 0x48
 8006128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800612c:	3b01      	subs	r3, #1
 800612e:	d503      	bpl.n	8006138 <__sfp+0x28>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	b30b      	cbz	r3, 8006178 <__sfp+0x68>
 8006134:	6836      	ldr	r6, [r6, #0]
 8006136:	e7f7      	b.n	8006128 <__sfp+0x18>
 8006138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800613c:	b9d5      	cbnz	r5, 8006174 <__sfp+0x64>
 800613e:	4b16      	ldr	r3, [pc, #88]	; (8006198 <__sfp+0x88>)
 8006140:	60e3      	str	r3, [r4, #12]
 8006142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006146:	6665      	str	r5, [r4, #100]	; 0x64
 8006148:	f000 f86c 	bl	8006224 <__retarget_lock_init_recursive>
 800614c:	f7ff ff96 	bl	800607c <__sfp_lock_release>
 8006150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006158:	6025      	str	r5, [r4, #0]
 800615a:	61a5      	str	r5, [r4, #24]
 800615c:	2208      	movs	r2, #8
 800615e:	4629      	mov	r1, r5
 8006160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006164:	f000 f86f 	bl	8006246 <memset>
 8006168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800616c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006170:	4620      	mov	r0, r4
 8006172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006174:	3468      	adds	r4, #104	; 0x68
 8006176:	e7d9      	b.n	800612c <__sfp+0x1c>
 8006178:	2104      	movs	r1, #4
 800617a:	4638      	mov	r0, r7
 800617c:	f7ff ff62 	bl	8006044 <__sfmoreglue>
 8006180:	4604      	mov	r4, r0
 8006182:	6030      	str	r0, [r6, #0]
 8006184:	2800      	cmp	r0, #0
 8006186:	d1d5      	bne.n	8006134 <__sfp+0x24>
 8006188:	f7ff ff78 	bl	800607c <__sfp_lock_release>
 800618c:	230c      	movs	r3, #12
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	e7ee      	b.n	8006170 <__sfp+0x60>
 8006192:	bf00      	nop
 8006194:	08007408 	.word	0x08007408
 8006198:	ffff0001 	.word	0xffff0001

0800619c <_fwalk_reent>:
 800619c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a0:	4606      	mov	r6, r0
 80061a2:	4688      	mov	r8, r1
 80061a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061a8:	2700      	movs	r7, #0
 80061aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ae:	f1b9 0901 	subs.w	r9, r9, #1
 80061b2:	d505      	bpl.n	80061c0 <_fwalk_reent+0x24>
 80061b4:	6824      	ldr	r4, [r4, #0]
 80061b6:	2c00      	cmp	r4, #0
 80061b8:	d1f7      	bne.n	80061aa <_fwalk_reent+0xe>
 80061ba:	4638      	mov	r0, r7
 80061bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c0:	89ab      	ldrh	r3, [r5, #12]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d907      	bls.n	80061d6 <_fwalk_reent+0x3a>
 80061c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061ca:	3301      	adds	r3, #1
 80061cc:	d003      	beq.n	80061d6 <_fwalk_reent+0x3a>
 80061ce:	4629      	mov	r1, r5
 80061d0:	4630      	mov	r0, r6
 80061d2:	47c0      	blx	r8
 80061d4:	4307      	orrs	r7, r0
 80061d6:	3568      	adds	r5, #104	; 0x68
 80061d8:	e7e9      	b.n	80061ae <_fwalk_reent+0x12>
	...

080061dc <__libc_init_array>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4d0d      	ldr	r5, [pc, #52]	; (8006214 <__libc_init_array+0x38>)
 80061e0:	4c0d      	ldr	r4, [pc, #52]	; (8006218 <__libc_init_array+0x3c>)
 80061e2:	1b64      	subs	r4, r4, r5
 80061e4:	10a4      	asrs	r4, r4, #2
 80061e6:	2600      	movs	r6, #0
 80061e8:	42a6      	cmp	r6, r4
 80061ea:	d109      	bne.n	8006200 <__libc_init_array+0x24>
 80061ec:	4d0b      	ldr	r5, [pc, #44]	; (800621c <__libc_init_array+0x40>)
 80061ee:	4c0c      	ldr	r4, [pc, #48]	; (8006220 <__libc_init_array+0x44>)
 80061f0:	f000 fffe 	bl	80071f0 <_init>
 80061f4:	1b64      	subs	r4, r4, r5
 80061f6:	10a4      	asrs	r4, r4, #2
 80061f8:	2600      	movs	r6, #0
 80061fa:	42a6      	cmp	r6, r4
 80061fc:	d105      	bne.n	800620a <__libc_init_array+0x2e>
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	f855 3b04 	ldr.w	r3, [r5], #4
 8006204:	4798      	blx	r3
 8006206:	3601      	adds	r6, #1
 8006208:	e7ee      	b.n	80061e8 <__libc_init_array+0xc>
 800620a:	f855 3b04 	ldr.w	r3, [r5], #4
 800620e:	4798      	blx	r3
 8006210:	3601      	adds	r6, #1
 8006212:	e7f2      	b.n	80061fa <__libc_init_array+0x1e>
 8006214:	08007548 	.word	0x08007548
 8006218:	08007548 	.word	0x08007548
 800621c:	08007548 	.word	0x08007548
 8006220:	0800754c 	.word	0x0800754c

08006224 <__retarget_lock_init_recursive>:
 8006224:	4770      	bx	lr

08006226 <__retarget_lock_acquire_recursive>:
 8006226:	4770      	bx	lr

08006228 <__retarget_lock_release_recursive>:
 8006228:	4770      	bx	lr

0800622a <memcpy>:
 800622a:	440a      	add	r2, r1
 800622c:	4291      	cmp	r1, r2
 800622e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006232:	d100      	bne.n	8006236 <memcpy+0xc>
 8006234:	4770      	bx	lr
 8006236:	b510      	push	{r4, lr}
 8006238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800623c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006240:	4291      	cmp	r1, r2
 8006242:	d1f9      	bne.n	8006238 <memcpy+0xe>
 8006244:	bd10      	pop	{r4, pc}

08006246 <memset>:
 8006246:	4402      	add	r2, r0
 8006248:	4603      	mov	r3, r0
 800624a:	4293      	cmp	r3, r2
 800624c:	d100      	bne.n	8006250 <memset+0xa>
 800624e:	4770      	bx	lr
 8006250:	f803 1b01 	strb.w	r1, [r3], #1
 8006254:	e7f9      	b.n	800624a <memset+0x4>
	...

08006258 <_malloc_r>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	1ccd      	adds	r5, r1, #3
 800625c:	f025 0503 	bic.w	r5, r5, #3
 8006260:	3508      	adds	r5, #8
 8006262:	2d0c      	cmp	r5, #12
 8006264:	bf38      	it	cc
 8006266:	250c      	movcc	r5, #12
 8006268:	2d00      	cmp	r5, #0
 800626a:	4606      	mov	r6, r0
 800626c:	db01      	blt.n	8006272 <_malloc_r+0x1a>
 800626e:	42a9      	cmp	r1, r5
 8006270:	d903      	bls.n	800627a <_malloc_r+0x22>
 8006272:	230c      	movs	r3, #12
 8006274:	6033      	str	r3, [r6, #0]
 8006276:	2000      	movs	r0, #0
 8006278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800627a:	f000 fc3b 	bl	8006af4 <__malloc_lock>
 800627e:	4921      	ldr	r1, [pc, #132]	; (8006304 <_malloc_r+0xac>)
 8006280:	680a      	ldr	r2, [r1, #0]
 8006282:	4614      	mov	r4, r2
 8006284:	b99c      	cbnz	r4, 80062ae <_malloc_r+0x56>
 8006286:	4f20      	ldr	r7, [pc, #128]	; (8006308 <_malloc_r+0xb0>)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	b923      	cbnz	r3, 8006296 <_malloc_r+0x3e>
 800628c:	4621      	mov	r1, r4
 800628e:	4630      	mov	r0, r6
 8006290:	f000 f934 	bl	80064fc <_sbrk_r>
 8006294:	6038      	str	r0, [r7, #0]
 8006296:	4629      	mov	r1, r5
 8006298:	4630      	mov	r0, r6
 800629a:	f000 f92f 	bl	80064fc <_sbrk_r>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d123      	bne.n	80062ea <_malloc_r+0x92>
 80062a2:	230c      	movs	r3, #12
 80062a4:	6033      	str	r3, [r6, #0]
 80062a6:	4630      	mov	r0, r6
 80062a8:	f000 fc2a 	bl	8006b00 <__malloc_unlock>
 80062ac:	e7e3      	b.n	8006276 <_malloc_r+0x1e>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	1b5b      	subs	r3, r3, r5
 80062b2:	d417      	bmi.n	80062e4 <_malloc_r+0x8c>
 80062b4:	2b0b      	cmp	r3, #11
 80062b6:	d903      	bls.n	80062c0 <_malloc_r+0x68>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	441c      	add	r4, r3
 80062bc:	6025      	str	r5, [r4, #0]
 80062be:	e004      	b.n	80062ca <_malloc_r+0x72>
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	42a2      	cmp	r2, r4
 80062c4:	bf0c      	ite	eq
 80062c6:	600b      	streq	r3, [r1, #0]
 80062c8:	6053      	strne	r3, [r2, #4]
 80062ca:	4630      	mov	r0, r6
 80062cc:	f000 fc18 	bl	8006b00 <__malloc_unlock>
 80062d0:	f104 000b 	add.w	r0, r4, #11
 80062d4:	1d23      	adds	r3, r4, #4
 80062d6:	f020 0007 	bic.w	r0, r0, #7
 80062da:	1ac2      	subs	r2, r0, r3
 80062dc:	d0cc      	beq.n	8006278 <_malloc_r+0x20>
 80062de:	1a1b      	subs	r3, r3, r0
 80062e0:	50a3      	str	r3, [r4, r2]
 80062e2:	e7c9      	b.n	8006278 <_malloc_r+0x20>
 80062e4:	4622      	mov	r2, r4
 80062e6:	6864      	ldr	r4, [r4, #4]
 80062e8:	e7cc      	b.n	8006284 <_malloc_r+0x2c>
 80062ea:	1cc4      	adds	r4, r0, #3
 80062ec:	f024 0403 	bic.w	r4, r4, #3
 80062f0:	42a0      	cmp	r0, r4
 80062f2:	d0e3      	beq.n	80062bc <_malloc_r+0x64>
 80062f4:	1a21      	subs	r1, r4, r0
 80062f6:	4630      	mov	r0, r6
 80062f8:	f000 f900 	bl	80064fc <_sbrk_r>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d1dd      	bne.n	80062bc <_malloc_r+0x64>
 8006300:	e7cf      	b.n	80062a2 <_malloc_r+0x4a>
 8006302:	bf00      	nop
 8006304:	200043d4 	.word	0x200043d4
 8006308:	200043d8 	.word	0x200043d8

0800630c <iprintf>:
 800630c:	b40f      	push	{r0, r1, r2, r3}
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <iprintf+0x2c>)
 8006310:	b513      	push	{r0, r1, r4, lr}
 8006312:	681c      	ldr	r4, [r3, #0]
 8006314:	b124      	cbz	r4, 8006320 <iprintf+0x14>
 8006316:	69a3      	ldr	r3, [r4, #24]
 8006318:	b913      	cbnz	r3, 8006320 <iprintf+0x14>
 800631a:	4620      	mov	r0, r4
 800631c:	f7ff fec0 	bl	80060a0 <__sinit>
 8006320:	ab05      	add	r3, sp, #20
 8006322:	9a04      	ldr	r2, [sp, #16]
 8006324:	68a1      	ldr	r1, [r4, #8]
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fc69 	bl	8006c00 <_vfiprintf_r>
 800632e:	b002      	add	sp, #8
 8006330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006334:	b004      	add	sp, #16
 8006336:	4770      	bx	lr
 8006338:	20000020 	.word	0x20000020

0800633c <_puts_r>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	460e      	mov	r6, r1
 8006340:	4605      	mov	r5, r0
 8006342:	b118      	cbz	r0, 800634c <_puts_r+0x10>
 8006344:	6983      	ldr	r3, [r0, #24]
 8006346:	b90b      	cbnz	r3, 800634c <_puts_r+0x10>
 8006348:	f7ff feaa 	bl	80060a0 <__sinit>
 800634c:	69ab      	ldr	r3, [r5, #24]
 800634e:	68ac      	ldr	r4, [r5, #8]
 8006350:	b913      	cbnz	r3, 8006358 <_puts_r+0x1c>
 8006352:	4628      	mov	r0, r5
 8006354:	f7ff fea4 	bl	80060a0 <__sinit>
 8006358:	4b2c      	ldr	r3, [pc, #176]	; (800640c <_puts_r+0xd0>)
 800635a:	429c      	cmp	r4, r3
 800635c:	d120      	bne.n	80063a0 <_puts_r+0x64>
 800635e:	686c      	ldr	r4, [r5, #4]
 8006360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006362:	07db      	lsls	r3, r3, #31
 8006364:	d405      	bmi.n	8006372 <_puts_r+0x36>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	0598      	lsls	r0, r3, #22
 800636a:	d402      	bmi.n	8006372 <_puts_r+0x36>
 800636c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800636e:	f7ff ff5a 	bl	8006226 <__retarget_lock_acquire_recursive>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	0719      	lsls	r1, r3, #28
 8006376:	d51d      	bpl.n	80063b4 <_puts_r+0x78>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	b1db      	cbz	r3, 80063b4 <_puts_r+0x78>
 800637c:	3e01      	subs	r6, #1
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006384:	3b01      	subs	r3, #1
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	bb39      	cbnz	r1, 80063da <_puts_r+0x9e>
 800638a:	2b00      	cmp	r3, #0
 800638c:	da38      	bge.n	8006400 <_puts_r+0xc4>
 800638e:	4622      	mov	r2, r4
 8006390:	210a      	movs	r1, #10
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f994 	bl	80066c0 <__swbuf_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d011      	beq.n	80063c0 <_puts_r+0x84>
 800639c:	250a      	movs	r5, #10
 800639e:	e011      	b.n	80063c4 <_puts_r+0x88>
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <_puts_r+0xd4>)
 80063a2:	429c      	cmp	r4, r3
 80063a4:	d101      	bne.n	80063aa <_puts_r+0x6e>
 80063a6:	68ac      	ldr	r4, [r5, #8]
 80063a8:	e7da      	b.n	8006360 <_puts_r+0x24>
 80063aa:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <_puts_r+0xd8>)
 80063ac:	429c      	cmp	r4, r3
 80063ae:	bf08      	it	eq
 80063b0:	68ec      	ldreq	r4, [r5, #12]
 80063b2:	e7d5      	b.n	8006360 <_puts_r+0x24>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f9e6 	bl	8006788 <__swsetup_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0dd      	beq.n	800637c <_puts_r+0x40>
 80063c0:	f04f 35ff 	mov.w	r5, #4294967295
 80063c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063c6:	07da      	lsls	r2, r3, #31
 80063c8:	d405      	bmi.n	80063d6 <_puts_r+0x9a>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	059b      	lsls	r3, r3, #22
 80063ce:	d402      	bmi.n	80063d6 <_puts_r+0x9a>
 80063d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063d2:	f7ff ff29 	bl	8006228 <__retarget_lock_release_recursive>
 80063d6:	4628      	mov	r0, r5
 80063d8:	bd70      	pop	{r4, r5, r6, pc}
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da04      	bge.n	80063e8 <_puts_r+0xac>
 80063de:	69a2      	ldr	r2, [r4, #24]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	dc06      	bgt.n	80063f2 <_puts_r+0xb6>
 80063e4:	290a      	cmp	r1, #10
 80063e6:	d004      	beq.n	80063f2 <_puts_r+0xb6>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	7019      	strb	r1, [r3, #0]
 80063f0:	e7c5      	b.n	800637e <_puts_r+0x42>
 80063f2:	4622      	mov	r2, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f963 	bl	80066c0 <__swbuf_r>
 80063fa:	3001      	adds	r0, #1
 80063fc:	d1bf      	bne.n	800637e <_puts_r+0x42>
 80063fe:	e7df      	b.n	80063c0 <_puts_r+0x84>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	250a      	movs	r5, #10
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	6022      	str	r2, [r4, #0]
 8006408:	701d      	strb	r5, [r3, #0]
 800640a:	e7db      	b.n	80063c4 <_puts_r+0x88>
 800640c:	080073c8 	.word	0x080073c8
 8006410:	080073e8 	.word	0x080073e8
 8006414:	080073a8 	.word	0x080073a8

08006418 <puts>:
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <puts+0xc>)
 800641a:	4601      	mov	r1, r0
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f7ff bf8d 	b.w	800633c <_puts_r>
 8006422:	bf00      	nop
 8006424:	20000020 	.word	0x20000020

08006428 <cleanup_glue>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	460c      	mov	r4, r1
 800642c:	6809      	ldr	r1, [r1, #0]
 800642e:	4605      	mov	r5, r0
 8006430:	b109      	cbz	r1, 8006436 <cleanup_glue+0xe>
 8006432:	f7ff fff9 	bl	8006428 <cleanup_glue>
 8006436:	4621      	mov	r1, r4
 8006438:	4628      	mov	r0, r5
 800643a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800643e:	f000 bb65 	b.w	8006b0c <_free_r>
	...

08006444 <_reclaim_reent>:
 8006444:	4b2c      	ldr	r3, [pc, #176]	; (80064f8 <_reclaim_reent+0xb4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4283      	cmp	r3, r0
 800644a:	b570      	push	{r4, r5, r6, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	d051      	beq.n	80064f4 <_reclaim_reent+0xb0>
 8006450:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006452:	b143      	cbz	r3, 8006466 <_reclaim_reent+0x22>
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d14a      	bne.n	80064f0 <_reclaim_reent+0xac>
 800645a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800645c:	6819      	ldr	r1, [r3, #0]
 800645e:	b111      	cbz	r1, 8006466 <_reclaim_reent+0x22>
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fb53 	bl	8006b0c <_free_r>
 8006466:	6961      	ldr	r1, [r4, #20]
 8006468:	b111      	cbz	r1, 8006470 <_reclaim_reent+0x2c>
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fb4e 	bl	8006b0c <_free_r>
 8006470:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006472:	b111      	cbz	r1, 800647a <_reclaim_reent+0x36>
 8006474:	4620      	mov	r0, r4
 8006476:	f000 fb49 	bl	8006b0c <_free_r>
 800647a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800647c:	b111      	cbz	r1, 8006484 <_reclaim_reent+0x40>
 800647e:	4620      	mov	r0, r4
 8006480:	f000 fb44 	bl	8006b0c <_free_r>
 8006484:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006486:	b111      	cbz	r1, 800648e <_reclaim_reent+0x4a>
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fb3f 	bl	8006b0c <_free_r>
 800648e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006490:	b111      	cbz	r1, 8006498 <_reclaim_reent+0x54>
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fb3a 	bl	8006b0c <_free_r>
 8006498:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800649a:	b111      	cbz	r1, 80064a2 <_reclaim_reent+0x5e>
 800649c:	4620      	mov	r0, r4
 800649e:	f000 fb35 	bl	8006b0c <_free_r>
 80064a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80064a4:	b111      	cbz	r1, 80064ac <_reclaim_reent+0x68>
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 fb30 	bl	8006b0c <_free_r>
 80064ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ae:	b111      	cbz	r1, 80064b6 <_reclaim_reent+0x72>
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fb2b 	bl	8006b0c <_free_r>
 80064b6:	69a3      	ldr	r3, [r4, #24]
 80064b8:	b1e3      	cbz	r3, 80064f4 <_reclaim_reent+0xb0>
 80064ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064bc:	4620      	mov	r0, r4
 80064be:	4798      	blx	r3
 80064c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064c2:	b1b9      	cbz	r1, 80064f4 <_reclaim_reent+0xb0>
 80064c4:	4620      	mov	r0, r4
 80064c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064ca:	f7ff bfad 	b.w	8006428 <cleanup_glue>
 80064ce:	5949      	ldr	r1, [r1, r5]
 80064d0:	b941      	cbnz	r1, 80064e4 <_reclaim_reent+0xa0>
 80064d2:	3504      	adds	r5, #4
 80064d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d6:	2d80      	cmp	r5, #128	; 0x80
 80064d8:	68d9      	ldr	r1, [r3, #12]
 80064da:	d1f8      	bne.n	80064ce <_reclaim_reent+0x8a>
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 fb15 	bl	8006b0c <_free_r>
 80064e2:	e7ba      	b.n	800645a <_reclaim_reent+0x16>
 80064e4:	680e      	ldr	r6, [r1, #0]
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 fb10 	bl	8006b0c <_free_r>
 80064ec:	4631      	mov	r1, r6
 80064ee:	e7ef      	b.n	80064d0 <_reclaim_reent+0x8c>
 80064f0:	2500      	movs	r5, #0
 80064f2:	e7ef      	b.n	80064d4 <_reclaim_reent+0x90>
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	bf00      	nop
 80064f8:	20000020 	.word	0x20000020

080064fc <_sbrk_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d06      	ldr	r5, [pc, #24]	; (8006518 <_sbrk_r+0x1c>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fa fcd4 	bl	8000eb4 <_sbrk>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_sbrk_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_sbrk_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	200044c4 	.word	0x200044c4

0800651c <__sread>:
 800651c:	b510      	push	{r4, lr}
 800651e:	460c      	mov	r4, r1
 8006520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006524:	f000 fe30 	bl	8007188 <_read_r>
 8006528:	2800      	cmp	r0, #0
 800652a:	bfab      	itete	ge
 800652c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800652e:	89a3      	ldrhlt	r3, [r4, #12]
 8006530:	181b      	addge	r3, r3, r0
 8006532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006536:	bfac      	ite	ge
 8006538:	6563      	strge	r3, [r4, #84]	; 0x54
 800653a:	81a3      	strhlt	r3, [r4, #12]
 800653c:	bd10      	pop	{r4, pc}

0800653e <__swrite>:
 800653e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	461f      	mov	r7, r3
 8006544:	898b      	ldrh	r3, [r1, #12]
 8006546:	05db      	lsls	r3, r3, #23
 8006548:	4605      	mov	r5, r0
 800654a:	460c      	mov	r4, r1
 800654c:	4616      	mov	r6, r2
 800654e:	d505      	bpl.n	800655c <__swrite+0x1e>
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	2302      	movs	r3, #2
 8006556:	2200      	movs	r2, #0
 8006558:	f000 fa56 	bl	8006a08 <_lseek_r>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	4632      	mov	r2, r6
 800656a:	463b      	mov	r3, r7
 800656c:	4628      	mov	r0, r5
 800656e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	f000 b8f7 	b.w	8006764 <_write_r>

08006576 <__sseek>:
 8006576:	b510      	push	{r4, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657e:	f000 fa43 	bl	8006a08 <_lseek_r>
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	bf15      	itete	ne
 8006588:	6560      	strne	r0, [r4, #84]	; 0x54
 800658a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800658e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006592:	81a3      	strheq	r3, [r4, #12]
 8006594:	bf18      	it	ne
 8006596:	81a3      	strhne	r3, [r4, #12]
 8006598:	bd10      	pop	{r4, pc}

0800659a <__sclose>:
 800659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659e:	f000 b961 	b.w	8006864 <_close_r>
	...

080065a4 <_strtol_l.isra.0>:
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065aa:	d001      	beq.n	80065b0 <_strtol_l.isra.0+0xc>
 80065ac:	2b24      	cmp	r3, #36	; 0x24
 80065ae:	d906      	bls.n	80065be <_strtol_l.isra.0+0x1a>
 80065b0:	f7ff fd18 	bl	8005fe4 <__errno>
 80065b4:	2316      	movs	r3, #22
 80065b6:	6003      	str	r3, [r0, #0]
 80065b8:	2000      	movs	r0, #0
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	4f3a      	ldr	r7, [pc, #232]	; (80066a8 <_strtol_l.isra.0+0x104>)
 80065c0:	468e      	mov	lr, r1
 80065c2:	4676      	mov	r6, lr
 80065c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80065c8:	5de5      	ldrb	r5, [r4, r7]
 80065ca:	f015 0508 	ands.w	r5, r5, #8
 80065ce:	d1f8      	bne.n	80065c2 <_strtol_l.isra.0+0x1e>
 80065d0:	2c2d      	cmp	r4, #45	; 0x2d
 80065d2:	d134      	bne.n	800663e <_strtol_l.isra.0+0x9a>
 80065d4:	f89e 4000 	ldrb.w	r4, [lr]
 80065d8:	f04f 0801 	mov.w	r8, #1
 80065dc:	f106 0e02 	add.w	lr, r6, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d05c      	beq.n	800669e <_strtol_l.isra.0+0xfa>
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d10c      	bne.n	8006602 <_strtol_l.isra.0+0x5e>
 80065e8:	2c30      	cmp	r4, #48	; 0x30
 80065ea:	d10a      	bne.n	8006602 <_strtol_l.isra.0+0x5e>
 80065ec:	f89e 4000 	ldrb.w	r4, [lr]
 80065f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80065f4:	2c58      	cmp	r4, #88	; 0x58
 80065f6:	d14d      	bne.n	8006694 <_strtol_l.isra.0+0xf0>
 80065f8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80065fc:	2310      	movs	r3, #16
 80065fe:	f10e 0e02 	add.w	lr, lr, #2
 8006602:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006606:	f10c 3cff 	add.w	ip, ip, #4294967295
 800660a:	2600      	movs	r6, #0
 800660c:	fbbc f9f3 	udiv	r9, ip, r3
 8006610:	4635      	mov	r5, r6
 8006612:	fb03 ca19 	mls	sl, r3, r9, ip
 8006616:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800661a:	2f09      	cmp	r7, #9
 800661c:	d818      	bhi.n	8006650 <_strtol_l.isra.0+0xac>
 800661e:	463c      	mov	r4, r7
 8006620:	42a3      	cmp	r3, r4
 8006622:	dd24      	ble.n	800666e <_strtol_l.isra.0+0xca>
 8006624:	2e00      	cmp	r6, #0
 8006626:	db1f      	blt.n	8006668 <_strtol_l.isra.0+0xc4>
 8006628:	45a9      	cmp	r9, r5
 800662a:	d31d      	bcc.n	8006668 <_strtol_l.isra.0+0xc4>
 800662c:	d101      	bne.n	8006632 <_strtol_l.isra.0+0x8e>
 800662e:	45a2      	cmp	sl, r4
 8006630:	db1a      	blt.n	8006668 <_strtol_l.isra.0+0xc4>
 8006632:	fb05 4503 	mla	r5, r5, r3, r4
 8006636:	2601      	movs	r6, #1
 8006638:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800663c:	e7eb      	b.n	8006616 <_strtol_l.isra.0+0x72>
 800663e:	2c2b      	cmp	r4, #43	; 0x2b
 8006640:	bf08      	it	eq
 8006642:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006646:	46a8      	mov	r8, r5
 8006648:	bf08      	it	eq
 800664a:	f106 0e02 	addeq.w	lr, r6, #2
 800664e:	e7c7      	b.n	80065e0 <_strtol_l.isra.0+0x3c>
 8006650:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006654:	2f19      	cmp	r7, #25
 8006656:	d801      	bhi.n	800665c <_strtol_l.isra.0+0xb8>
 8006658:	3c37      	subs	r4, #55	; 0x37
 800665a:	e7e1      	b.n	8006620 <_strtol_l.isra.0+0x7c>
 800665c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006660:	2f19      	cmp	r7, #25
 8006662:	d804      	bhi.n	800666e <_strtol_l.isra.0+0xca>
 8006664:	3c57      	subs	r4, #87	; 0x57
 8006666:	e7db      	b.n	8006620 <_strtol_l.isra.0+0x7c>
 8006668:	f04f 36ff 	mov.w	r6, #4294967295
 800666c:	e7e4      	b.n	8006638 <_strtol_l.isra.0+0x94>
 800666e:	2e00      	cmp	r6, #0
 8006670:	da05      	bge.n	800667e <_strtol_l.isra.0+0xda>
 8006672:	2322      	movs	r3, #34	; 0x22
 8006674:	6003      	str	r3, [r0, #0]
 8006676:	4665      	mov	r5, ip
 8006678:	b942      	cbnz	r2, 800668c <_strtol_l.isra.0+0xe8>
 800667a:	4628      	mov	r0, r5
 800667c:	e79d      	b.n	80065ba <_strtol_l.isra.0+0x16>
 800667e:	f1b8 0f00 	cmp.w	r8, #0
 8006682:	d000      	beq.n	8006686 <_strtol_l.isra.0+0xe2>
 8006684:	426d      	negs	r5, r5
 8006686:	2a00      	cmp	r2, #0
 8006688:	d0f7      	beq.n	800667a <_strtol_l.isra.0+0xd6>
 800668a:	b10e      	cbz	r6, 8006690 <_strtol_l.isra.0+0xec>
 800668c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006690:	6011      	str	r1, [r2, #0]
 8006692:	e7f2      	b.n	800667a <_strtol_l.isra.0+0xd6>
 8006694:	2430      	movs	r4, #48	; 0x30
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1b3      	bne.n	8006602 <_strtol_l.isra.0+0x5e>
 800669a:	2308      	movs	r3, #8
 800669c:	e7b1      	b.n	8006602 <_strtol_l.isra.0+0x5e>
 800669e:	2c30      	cmp	r4, #48	; 0x30
 80066a0:	d0a4      	beq.n	80065ec <_strtol_l.isra.0+0x48>
 80066a2:	230a      	movs	r3, #10
 80066a4:	e7ad      	b.n	8006602 <_strtol_l.isra.0+0x5e>
 80066a6:	bf00      	nop
 80066a8:	0800740d 	.word	0x0800740d

080066ac <strtol>:
 80066ac:	4613      	mov	r3, r2
 80066ae:	460a      	mov	r2, r1
 80066b0:	4601      	mov	r1, r0
 80066b2:	4802      	ldr	r0, [pc, #8]	; (80066bc <strtol+0x10>)
 80066b4:	6800      	ldr	r0, [r0, #0]
 80066b6:	f7ff bf75 	b.w	80065a4 <_strtol_l.isra.0>
 80066ba:	bf00      	nop
 80066bc:	20000020 	.word	0x20000020

080066c0 <__swbuf_r>:
 80066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c2:	460e      	mov	r6, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	4605      	mov	r5, r0
 80066c8:	b118      	cbz	r0, 80066d2 <__swbuf_r+0x12>
 80066ca:	6983      	ldr	r3, [r0, #24]
 80066cc:	b90b      	cbnz	r3, 80066d2 <__swbuf_r+0x12>
 80066ce:	f7ff fce7 	bl	80060a0 <__sinit>
 80066d2:	4b21      	ldr	r3, [pc, #132]	; (8006758 <__swbuf_r+0x98>)
 80066d4:	429c      	cmp	r4, r3
 80066d6:	d12b      	bne.n	8006730 <__swbuf_r+0x70>
 80066d8:	686c      	ldr	r4, [r5, #4]
 80066da:	69a3      	ldr	r3, [r4, #24]
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	071a      	lsls	r2, r3, #28
 80066e2:	d52f      	bpl.n	8006744 <__swbuf_r+0x84>
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	b36b      	cbz	r3, 8006744 <__swbuf_r+0x84>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	1ac0      	subs	r0, r0, r3
 80066ee:	6963      	ldr	r3, [r4, #20]
 80066f0:	b2f6      	uxtb	r6, r6
 80066f2:	4283      	cmp	r3, r0
 80066f4:	4637      	mov	r7, r6
 80066f6:	dc04      	bgt.n	8006702 <__swbuf_r+0x42>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 f948 	bl	8006990 <_fflush_r>
 8006700:	bb30      	cbnz	r0, 8006750 <__swbuf_r+0x90>
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	3b01      	subs	r3, #1
 8006706:	60a3      	str	r3, [r4, #8]
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	701e      	strb	r6, [r3, #0]
 8006710:	6963      	ldr	r3, [r4, #20]
 8006712:	3001      	adds	r0, #1
 8006714:	4283      	cmp	r3, r0
 8006716:	d004      	beq.n	8006722 <__swbuf_r+0x62>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	07db      	lsls	r3, r3, #31
 800671c:	d506      	bpl.n	800672c <__swbuf_r+0x6c>
 800671e:	2e0a      	cmp	r6, #10
 8006720:	d104      	bne.n	800672c <__swbuf_r+0x6c>
 8006722:	4621      	mov	r1, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f933 	bl	8006990 <_fflush_r>
 800672a:	b988      	cbnz	r0, 8006750 <__swbuf_r+0x90>
 800672c:	4638      	mov	r0, r7
 800672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <__swbuf_r+0x9c>)
 8006732:	429c      	cmp	r4, r3
 8006734:	d101      	bne.n	800673a <__swbuf_r+0x7a>
 8006736:	68ac      	ldr	r4, [r5, #8]
 8006738:	e7cf      	b.n	80066da <__swbuf_r+0x1a>
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <__swbuf_r+0xa0>)
 800673c:	429c      	cmp	r4, r3
 800673e:	bf08      	it	eq
 8006740:	68ec      	ldreq	r4, [r5, #12]
 8006742:	e7ca      	b.n	80066da <__swbuf_r+0x1a>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f81e 	bl	8006788 <__swsetup_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0cb      	beq.n	80066e8 <__swbuf_r+0x28>
 8006750:	f04f 37ff 	mov.w	r7, #4294967295
 8006754:	e7ea      	b.n	800672c <__swbuf_r+0x6c>
 8006756:	bf00      	nop
 8006758:	080073c8 	.word	0x080073c8
 800675c:	080073e8 	.word	0x080073e8
 8006760:	080073a8 	.word	0x080073a8

08006764 <_write_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d07      	ldr	r5, [pc, #28]	; (8006784 <_write_r+0x20>)
 8006768:	4604      	mov	r4, r0
 800676a:	4608      	mov	r0, r1
 800676c:	4611      	mov	r1, r2
 800676e:	2200      	movs	r2, #0
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f7fa fb4d 	bl	8000e12 <_write>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_write_r+0x1e>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_write_r+0x1e>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	200044c4 	.word	0x200044c4

08006788 <__swsetup_r>:
 8006788:	4b32      	ldr	r3, [pc, #200]	; (8006854 <__swsetup_r+0xcc>)
 800678a:	b570      	push	{r4, r5, r6, lr}
 800678c:	681d      	ldr	r5, [r3, #0]
 800678e:	4606      	mov	r6, r0
 8006790:	460c      	mov	r4, r1
 8006792:	b125      	cbz	r5, 800679e <__swsetup_r+0x16>
 8006794:	69ab      	ldr	r3, [r5, #24]
 8006796:	b913      	cbnz	r3, 800679e <__swsetup_r+0x16>
 8006798:	4628      	mov	r0, r5
 800679a:	f7ff fc81 	bl	80060a0 <__sinit>
 800679e:	4b2e      	ldr	r3, [pc, #184]	; (8006858 <__swsetup_r+0xd0>)
 80067a0:	429c      	cmp	r4, r3
 80067a2:	d10f      	bne.n	80067c4 <__swsetup_r+0x3c>
 80067a4:	686c      	ldr	r4, [r5, #4]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ac:	0719      	lsls	r1, r3, #28
 80067ae:	d42c      	bmi.n	800680a <__swsetup_r+0x82>
 80067b0:	06dd      	lsls	r5, r3, #27
 80067b2:	d411      	bmi.n	80067d8 <__swsetup_r+0x50>
 80067b4:	2309      	movs	r3, #9
 80067b6:	6033      	str	r3, [r6, #0]
 80067b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	f04f 30ff 	mov.w	r0, #4294967295
 80067c2:	e03e      	b.n	8006842 <__swsetup_r+0xba>
 80067c4:	4b25      	ldr	r3, [pc, #148]	; (800685c <__swsetup_r+0xd4>)
 80067c6:	429c      	cmp	r4, r3
 80067c8:	d101      	bne.n	80067ce <__swsetup_r+0x46>
 80067ca:	68ac      	ldr	r4, [r5, #8]
 80067cc:	e7eb      	b.n	80067a6 <__swsetup_r+0x1e>
 80067ce:	4b24      	ldr	r3, [pc, #144]	; (8006860 <__swsetup_r+0xd8>)
 80067d0:	429c      	cmp	r4, r3
 80067d2:	bf08      	it	eq
 80067d4:	68ec      	ldreq	r4, [r5, #12]
 80067d6:	e7e6      	b.n	80067a6 <__swsetup_r+0x1e>
 80067d8:	0758      	lsls	r0, r3, #29
 80067da:	d512      	bpl.n	8006802 <__swsetup_r+0x7a>
 80067dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067de:	b141      	cbz	r1, 80067f2 <__swsetup_r+0x6a>
 80067e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067e4:	4299      	cmp	r1, r3
 80067e6:	d002      	beq.n	80067ee <__swsetup_r+0x66>
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 f98f 	bl	8006b0c <_free_r>
 80067ee:	2300      	movs	r3, #0
 80067f0:	6363      	str	r3, [r4, #52]	; 0x34
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	2300      	movs	r3, #0
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0308 	orr.w	r3, r3, #8
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	b94b      	cbnz	r3, 8006822 <__swsetup_r+0x9a>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006818:	d003      	beq.n	8006822 <__swsetup_r+0x9a>
 800681a:	4621      	mov	r1, r4
 800681c:	4630      	mov	r0, r6
 800681e:	f000 f929 	bl	8006a74 <__smakebuf_r>
 8006822:	89a0      	ldrh	r0, [r4, #12]
 8006824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006828:	f010 0301 	ands.w	r3, r0, #1
 800682c:	d00a      	beq.n	8006844 <__swsetup_r+0xbc>
 800682e:	2300      	movs	r3, #0
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	6963      	ldr	r3, [r4, #20]
 8006834:	425b      	negs	r3, r3
 8006836:	61a3      	str	r3, [r4, #24]
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	b943      	cbnz	r3, 800684e <__swsetup_r+0xc6>
 800683c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006840:	d1ba      	bne.n	80067b8 <__swsetup_r+0x30>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	0781      	lsls	r1, r0, #30
 8006846:	bf58      	it	pl
 8006848:	6963      	ldrpl	r3, [r4, #20]
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	e7f4      	b.n	8006838 <__swsetup_r+0xb0>
 800684e:	2000      	movs	r0, #0
 8006850:	e7f7      	b.n	8006842 <__swsetup_r+0xba>
 8006852:	bf00      	nop
 8006854:	20000020 	.word	0x20000020
 8006858:	080073c8 	.word	0x080073c8
 800685c:	080073e8 	.word	0x080073e8
 8006860:	080073a8 	.word	0x080073a8

08006864 <_close_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d06      	ldr	r5, [pc, #24]	; (8006880 <_close_r+0x1c>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fa faeb 	bl	8000e4a <_close>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_close_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_close_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	200044c4 	.word	0x200044c4

08006884 <__sflush_r>:
 8006884:	898a      	ldrh	r2, [r1, #12]
 8006886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688a:	4605      	mov	r5, r0
 800688c:	0710      	lsls	r0, r2, #28
 800688e:	460c      	mov	r4, r1
 8006890:	d458      	bmi.n	8006944 <__sflush_r+0xc0>
 8006892:	684b      	ldr	r3, [r1, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	dc05      	bgt.n	80068a4 <__sflush_r+0x20>
 8006898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	dc02      	bgt.n	80068a4 <__sflush_r+0x20>
 800689e:	2000      	movs	r0, #0
 80068a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	d0f9      	beq.n	800689e <__sflush_r+0x1a>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068b0:	682f      	ldr	r7, [r5, #0]
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	d032      	beq.n	800691c <__sflush_r+0x98>
 80068b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	075a      	lsls	r2, r3, #29
 80068bc:	d505      	bpl.n	80068ca <__sflush_r+0x46>
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	1ac0      	subs	r0, r0, r3
 80068c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068c4:	b10b      	cbz	r3, 80068ca <__sflush_r+0x46>
 80068c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068c8:	1ac0      	subs	r0, r0, r3
 80068ca:	2300      	movs	r3, #0
 80068cc:	4602      	mov	r2, r0
 80068ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068d0:	6a21      	ldr	r1, [r4, #32]
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b0      	blx	r6
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	d106      	bne.n	80068ea <__sflush_r+0x66>
 80068dc:	6829      	ldr	r1, [r5, #0]
 80068de:	291d      	cmp	r1, #29
 80068e0:	d82c      	bhi.n	800693c <__sflush_r+0xb8>
 80068e2:	4a2a      	ldr	r2, [pc, #168]	; (800698c <__sflush_r+0x108>)
 80068e4:	40ca      	lsrs	r2, r1
 80068e6:	07d6      	lsls	r6, r2, #31
 80068e8:	d528      	bpl.n	800693c <__sflush_r+0xb8>
 80068ea:	2200      	movs	r2, #0
 80068ec:	6062      	str	r2, [r4, #4]
 80068ee:	04d9      	lsls	r1, r3, #19
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	6022      	str	r2, [r4, #0]
 80068f4:	d504      	bpl.n	8006900 <__sflush_r+0x7c>
 80068f6:	1c42      	adds	r2, r0, #1
 80068f8:	d101      	bne.n	80068fe <__sflush_r+0x7a>
 80068fa:	682b      	ldr	r3, [r5, #0]
 80068fc:	b903      	cbnz	r3, 8006900 <__sflush_r+0x7c>
 80068fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006902:	602f      	str	r7, [r5, #0]
 8006904:	2900      	cmp	r1, #0
 8006906:	d0ca      	beq.n	800689e <__sflush_r+0x1a>
 8006908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800690c:	4299      	cmp	r1, r3
 800690e:	d002      	beq.n	8006916 <__sflush_r+0x92>
 8006910:	4628      	mov	r0, r5
 8006912:	f000 f8fb 	bl	8006b0c <_free_r>
 8006916:	2000      	movs	r0, #0
 8006918:	6360      	str	r0, [r4, #52]	; 0x34
 800691a:	e7c1      	b.n	80068a0 <__sflush_r+0x1c>
 800691c:	6a21      	ldr	r1, [r4, #32]
 800691e:	2301      	movs	r3, #1
 8006920:	4628      	mov	r0, r5
 8006922:	47b0      	blx	r6
 8006924:	1c41      	adds	r1, r0, #1
 8006926:	d1c7      	bne.n	80068b8 <__sflush_r+0x34>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0c4      	beq.n	80068b8 <__sflush_r+0x34>
 800692e:	2b1d      	cmp	r3, #29
 8006930:	d001      	beq.n	8006936 <__sflush_r+0xb2>
 8006932:	2b16      	cmp	r3, #22
 8006934:	d101      	bne.n	800693a <__sflush_r+0xb6>
 8006936:	602f      	str	r7, [r5, #0]
 8006938:	e7b1      	b.n	800689e <__sflush_r+0x1a>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	e7ad      	b.n	80068a0 <__sflush_r+0x1c>
 8006944:	690f      	ldr	r7, [r1, #16]
 8006946:	2f00      	cmp	r7, #0
 8006948:	d0a9      	beq.n	800689e <__sflush_r+0x1a>
 800694a:	0793      	lsls	r3, r2, #30
 800694c:	680e      	ldr	r6, [r1, #0]
 800694e:	bf08      	it	eq
 8006950:	694b      	ldreq	r3, [r1, #20]
 8006952:	600f      	str	r7, [r1, #0]
 8006954:	bf18      	it	ne
 8006956:	2300      	movne	r3, #0
 8006958:	eba6 0807 	sub.w	r8, r6, r7
 800695c:	608b      	str	r3, [r1, #8]
 800695e:	f1b8 0f00 	cmp.w	r8, #0
 8006962:	dd9c      	ble.n	800689e <__sflush_r+0x1a>
 8006964:	6a21      	ldr	r1, [r4, #32]
 8006966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006968:	4643      	mov	r3, r8
 800696a:	463a      	mov	r2, r7
 800696c:	4628      	mov	r0, r5
 800696e:	47b0      	blx	r6
 8006970:	2800      	cmp	r0, #0
 8006972:	dc06      	bgt.n	8006982 <__sflush_r+0xfe>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	e78e      	b.n	80068a0 <__sflush_r+0x1c>
 8006982:	4407      	add	r7, r0
 8006984:	eba8 0800 	sub.w	r8, r8, r0
 8006988:	e7e9      	b.n	800695e <__sflush_r+0xda>
 800698a:	bf00      	nop
 800698c:	20400001 	.word	0x20400001

08006990 <_fflush_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	690b      	ldr	r3, [r1, #16]
 8006994:	4605      	mov	r5, r0
 8006996:	460c      	mov	r4, r1
 8006998:	b913      	cbnz	r3, 80069a0 <_fflush_r+0x10>
 800699a:	2500      	movs	r5, #0
 800699c:	4628      	mov	r0, r5
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	b118      	cbz	r0, 80069aa <_fflush_r+0x1a>
 80069a2:	6983      	ldr	r3, [r0, #24]
 80069a4:	b90b      	cbnz	r3, 80069aa <_fflush_r+0x1a>
 80069a6:	f7ff fb7b 	bl	80060a0 <__sinit>
 80069aa:	4b14      	ldr	r3, [pc, #80]	; (80069fc <_fflush_r+0x6c>)
 80069ac:	429c      	cmp	r4, r3
 80069ae:	d11b      	bne.n	80069e8 <_fflush_r+0x58>
 80069b0:	686c      	ldr	r4, [r5, #4]
 80069b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0ef      	beq.n	800699a <_fflush_r+0xa>
 80069ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069bc:	07d0      	lsls	r0, r2, #31
 80069be:	d404      	bmi.n	80069ca <_fflush_r+0x3a>
 80069c0:	0599      	lsls	r1, r3, #22
 80069c2:	d402      	bmi.n	80069ca <_fflush_r+0x3a>
 80069c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c6:	f7ff fc2e 	bl	8006226 <__retarget_lock_acquire_recursive>
 80069ca:	4628      	mov	r0, r5
 80069cc:	4621      	mov	r1, r4
 80069ce:	f7ff ff59 	bl	8006884 <__sflush_r>
 80069d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069d4:	07da      	lsls	r2, r3, #31
 80069d6:	4605      	mov	r5, r0
 80069d8:	d4e0      	bmi.n	800699c <_fflush_r+0xc>
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	059b      	lsls	r3, r3, #22
 80069de:	d4dd      	bmi.n	800699c <_fflush_r+0xc>
 80069e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069e2:	f7ff fc21 	bl	8006228 <__retarget_lock_release_recursive>
 80069e6:	e7d9      	b.n	800699c <_fflush_r+0xc>
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <_fflush_r+0x70>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d101      	bne.n	80069f2 <_fflush_r+0x62>
 80069ee:	68ac      	ldr	r4, [r5, #8]
 80069f0:	e7df      	b.n	80069b2 <_fflush_r+0x22>
 80069f2:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <_fflush_r+0x74>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	bf08      	it	eq
 80069f8:	68ec      	ldreq	r4, [r5, #12]
 80069fa:	e7da      	b.n	80069b2 <_fflush_r+0x22>
 80069fc:	080073c8 	.word	0x080073c8
 8006a00:	080073e8 	.word	0x080073e8
 8006a04:	080073a8 	.word	0x080073a8

08006a08 <_lseek_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d07      	ldr	r5, [pc, #28]	; (8006a28 <_lseek_r+0x20>)
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	4608      	mov	r0, r1
 8006a10:	4611      	mov	r1, r2
 8006a12:	2200      	movs	r2, #0
 8006a14:	602a      	str	r2, [r5, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f7fa fa3e 	bl	8000e98 <_lseek>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_lseek_r+0x1e>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_lseek_r+0x1e>
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	200044c4 	.word	0x200044c4

08006a2c <__swhatbuf_r>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	460e      	mov	r6, r1
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	2900      	cmp	r1, #0
 8006a36:	b096      	sub	sp, #88	; 0x58
 8006a38:	4614      	mov	r4, r2
 8006a3a:	461d      	mov	r5, r3
 8006a3c:	da07      	bge.n	8006a4e <__swhatbuf_r+0x22>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	89b3      	ldrh	r3, [r6, #12]
 8006a44:	061a      	lsls	r2, r3, #24
 8006a46:	d410      	bmi.n	8006a6a <__swhatbuf_r+0x3e>
 8006a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4c:	e00e      	b.n	8006a6c <__swhatbuf_r+0x40>
 8006a4e:	466a      	mov	r2, sp
 8006a50:	f000 fbac 	bl	80071ac <_fstat_r>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	dbf2      	blt.n	8006a3e <__swhatbuf_r+0x12>
 8006a58:	9a01      	ldr	r2, [sp, #4]
 8006a5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a62:	425a      	negs	r2, r3
 8006a64:	415a      	adcs	r2, r3
 8006a66:	602a      	str	r2, [r5, #0]
 8006a68:	e7ee      	b.n	8006a48 <__swhatbuf_r+0x1c>
 8006a6a:	2340      	movs	r3, #64	; 0x40
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	6023      	str	r3, [r4, #0]
 8006a70:	b016      	add	sp, #88	; 0x58
 8006a72:	bd70      	pop	{r4, r5, r6, pc}

08006a74 <__smakebuf_r>:
 8006a74:	898b      	ldrh	r3, [r1, #12]
 8006a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a78:	079d      	lsls	r5, r3, #30
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	d507      	bpl.n	8006a90 <__smakebuf_r+0x1c>
 8006a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	6163      	str	r3, [r4, #20]
 8006a8c:	b002      	add	sp, #8
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	ab01      	add	r3, sp, #4
 8006a92:	466a      	mov	r2, sp
 8006a94:	f7ff ffca 	bl	8006a2c <__swhatbuf_r>
 8006a98:	9900      	ldr	r1, [sp, #0]
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff fbdb 	bl	8006258 <_malloc_r>
 8006aa2:	b948      	cbnz	r0, 8006ab8 <__smakebuf_r+0x44>
 8006aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa8:	059a      	lsls	r2, r3, #22
 8006aaa:	d4ef      	bmi.n	8006a8c <__smakebuf_r+0x18>
 8006aac:	f023 0303 	bic.w	r3, r3, #3
 8006ab0:	f043 0302 	orr.w	r3, r3, #2
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	e7e3      	b.n	8006a80 <__smakebuf_r+0xc>
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <__smakebuf_r+0x7c>)
 8006aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	6020      	str	r0, [r4, #0]
 8006ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	9b00      	ldr	r3, [sp, #0]
 8006ac8:	6163      	str	r3, [r4, #20]
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	6120      	str	r0, [r4, #16]
 8006ace:	b15b      	cbz	r3, 8006ae8 <__smakebuf_r+0x74>
 8006ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 fb7b 	bl	80071d0 <_isatty_r>
 8006ada:	b128      	cbz	r0, 8006ae8 <__smakebuf_r+0x74>
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	89a0      	ldrh	r0, [r4, #12]
 8006aea:	4305      	orrs	r5, r0
 8006aec:	81a5      	strh	r5, [r4, #12]
 8006aee:	e7cd      	b.n	8006a8c <__smakebuf_r+0x18>
 8006af0:	08006039 	.word	0x08006039

08006af4 <__malloc_lock>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__malloc_lock+0x8>)
 8006af6:	f7ff bb96 	b.w	8006226 <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	200044bc 	.word	0x200044bc

08006b00 <__malloc_unlock>:
 8006b00:	4801      	ldr	r0, [pc, #4]	; (8006b08 <__malloc_unlock+0x8>)
 8006b02:	f7ff bb91 	b.w	8006228 <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	200044bc 	.word	0x200044bc

08006b0c <_free_r>:
 8006b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	d048      	beq.n	8006ba4 <_free_r+0x98>
 8006b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b16:	9001      	str	r0, [sp, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b1e:	bfb8      	it	lt
 8006b20:	18e4      	addlt	r4, r4, r3
 8006b22:	f7ff ffe7 	bl	8006af4 <__malloc_lock>
 8006b26:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <_free_r+0x9c>)
 8006b28:	9801      	ldr	r0, [sp, #4]
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	4615      	mov	r5, r2
 8006b2e:	b933      	cbnz	r3, 8006b3e <_free_r+0x32>
 8006b30:	6063      	str	r3, [r4, #4]
 8006b32:	6014      	str	r4, [r2, #0]
 8006b34:	b003      	add	sp, #12
 8006b36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b3a:	f7ff bfe1 	b.w	8006b00 <__malloc_unlock>
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	d90b      	bls.n	8006b5a <_free_r+0x4e>
 8006b42:	6821      	ldr	r1, [r4, #0]
 8006b44:	1862      	adds	r2, r4, r1
 8006b46:	4293      	cmp	r3, r2
 8006b48:	bf04      	itt	eq
 8006b4a:	681a      	ldreq	r2, [r3, #0]
 8006b4c:	685b      	ldreq	r3, [r3, #4]
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	bf04      	itt	eq
 8006b52:	1852      	addeq	r2, r2, r1
 8006b54:	6022      	streq	r2, [r4, #0]
 8006b56:	602c      	str	r4, [r5, #0]
 8006b58:	e7ec      	b.n	8006b34 <_free_r+0x28>
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b10b      	cbz	r3, 8006b64 <_free_r+0x58>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d9fa      	bls.n	8006b5a <_free_r+0x4e>
 8006b64:	6811      	ldr	r1, [r2, #0]
 8006b66:	1855      	adds	r5, r2, r1
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	d10b      	bne.n	8006b84 <_free_r+0x78>
 8006b6c:	6824      	ldr	r4, [r4, #0]
 8006b6e:	4421      	add	r1, r4
 8006b70:	1854      	adds	r4, r2, r1
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	d1dd      	bne.n	8006b34 <_free_r+0x28>
 8006b78:	681c      	ldr	r4, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	6053      	str	r3, [r2, #4]
 8006b7e:	4421      	add	r1, r4
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	e7d7      	b.n	8006b34 <_free_r+0x28>
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x80>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	e7d3      	b.n	8006b34 <_free_r+0x28>
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	1961      	adds	r1, r4, r5
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf04      	itt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	bf04      	itt	eq
 8006b9c:	1949      	addeq	r1, r1, r5
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	6054      	str	r4, [r2, #4]
 8006ba2:	e7c7      	b.n	8006b34 <_free_r+0x28>
 8006ba4:	b003      	add	sp, #12
 8006ba6:	bd30      	pop	{r4, r5, pc}
 8006ba8:	200043d4 	.word	0x200043d4

08006bac <__sfputc_r>:
 8006bac:	6893      	ldr	r3, [r2, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	b410      	push	{r4}
 8006bb4:	6093      	str	r3, [r2, #8]
 8006bb6:	da08      	bge.n	8006bca <__sfputc_r+0x1e>
 8006bb8:	6994      	ldr	r4, [r2, #24]
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	db01      	blt.n	8006bc2 <__sfputc_r+0x16>
 8006bbe:	290a      	cmp	r1, #10
 8006bc0:	d103      	bne.n	8006bca <__sfputc_r+0x1e>
 8006bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc6:	f7ff bd7b 	b.w	80066c0 <__swbuf_r>
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	1c58      	adds	r0, r3, #1
 8006bce:	6010      	str	r0, [r2, #0]
 8006bd0:	7019      	strb	r1, [r3, #0]
 8006bd2:	4608      	mov	r0, r1
 8006bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <__sfputs_r>:
 8006bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bdc:	4606      	mov	r6, r0
 8006bde:	460f      	mov	r7, r1
 8006be0:	4614      	mov	r4, r2
 8006be2:	18d5      	adds	r5, r2, r3
 8006be4:	42ac      	cmp	r4, r5
 8006be6:	d101      	bne.n	8006bec <__sfputs_r+0x12>
 8006be8:	2000      	movs	r0, #0
 8006bea:	e007      	b.n	8006bfc <__sfputs_r+0x22>
 8006bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf0:	463a      	mov	r2, r7
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7ff ffda 	bl	8006bac <__sfputc_r>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d1f3      	bne.n	8006be4 <__sfputs_r+0xa>
 8006bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c00 <_vfiprintf_r>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	460d      	mov	r5, r1
 8006c06:	b09d      	sub	sp, #116	; 0x74
 8006c08:	4614      	mov	r4, r2
 8006c0a:	4698      	mov	r8, r3
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	b118      	cbz	r0, 8006c18 <_vfiprintf_r+0x18>
 8006c10:	6983      	ldr	r3, [r0, #24]
 8006c12:	b90b      	cbnz	r3, 8006c18 <_vfiprintf_r+0x18>
 8006c14:	f7ff fa44 	bl	80060a0 <__sinit>
 8006c18:	4b89      	ldr	r3, [pc, #548]	; (8006e40 <_vfiprintf_r+0x240>)
 8006c1a:	429d      	cmp	r5, r3
 8006c1c:	d11b      	bne.n	8006c56 <_vfiprintf_r+0x56>
 8006c1e:	6875      	ldr	r5, [r6, #4]
 8006c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c22:	07d9      	lsls	r1, r3, #31
 8006c24:	d405      	bmi.n	8006c32 <_vfiprintf_r+0x32>
 8006c26:	89ab      	ldrh	r3, [r5, #12]
 8006c28:	059a      	lsls	r2, r3, #22
 8006c2a:	d402      	bmi.n	8006c32 <_vfiprintf_r+0x32>
 8006c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c2e:	f7ff fafa 	bl	8006226 <__retarget_lock_acquire_recursive>
 8006c32:	89ab      	ldrh	r3, [r5, #12]
 8006c34:	071b      	lsls	r3, r3, #28
 8006c36:	d501      	bpl.n	8006c3c <_vfiprintf_r+0x3c>
 8006c38:	692b      	ldr	r3, [r5, #16]
 8006c3a:	b9eb      	cbnz	r3, 8006c78 <_vfiprintf_r+0x78>
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff fda2 	bl	8006788 <__swsetup_r>
 8006c44:	b1c0      	cbz	r0, 8006c78 <_vfiprintf_r+0x78>
 8006c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c48:	07dc      	lsls	r4, r3, #31
 8006c4a:	d50e      	bpl.n	8006c6a <_vfiprintf_r+0x6a>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	b01d      	add	sp, #116	; 0x74
 8006c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c56:	4b7b      	ldr	r3, [pc, #492]	; (8006e44 <_vfiprintf_r+0x244>)
 8006c58:	429d      	cmp	r5, r3
 8006c5a:	d101      	bne.n	8006c60 <_vfiprintf_r+0x60>
 8006c5c:	68b5      	ldr	r5, [r6, #8]
 8006c5e:	e7df      	b.n	8006c20 <_vfiprintf_r+0x20>
 8006c60:	4b79      	ldr	r3, [pc, #484]	; (8006e48 <_vfiprintf_r+0x248>)
 8006c62:	429d      	cmp	r5, r3
 8006c64:	bf08      	it	eq
 8006c66:	68f5      	ldreq	r5, [r6, #12]
 8006c68:	e7da      	b.n	8006c20 <_vfiprintf_r+0x20>
 8006c6a:	89ab      	ldrh	r3, [r5, #12]
 8006c6c:	0598      	lsls	r0, r3, #22
 8006c6e:	d4ed      	bmi.n	8006c4c <_vfiprintf_r+0x4c>
 8006c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c72:	f7ff fad9 	bl	8006228 <__retarget_lock_release_recursive>
 8006c76:	e7e9      	b.n	8006c4c <_vfiprintf_r+0x4c>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c86:	2330      	movs	r3, #48	; 0x30
 8006c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e4c <_vfiprintf_r+0x24c>
 8006c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c90:	f04f 0901 	mov.w	r9, #1
 8006c94:	4623      	mov	r3, r4
 8006c96:	469a      	mov	sl, r3
 8006c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c9c:	b10a      	cbz	r2, 8006ca2 <_vfiprintf_r+0xa2>
 8006c9e:	2a25      	cmp	r2, #37	; 0x25
 8006ca0:	d1f9      	bne.n	8006c96 <_vfiprintf_r+0x96>
 8006ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ca6:	d00b      	beq.n	8006cc0 <_vfiprintf_r+0xc0>
 8006ca8:	465b      	mov	r3, fp
 8006caa:	4622      	mov	r2, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7ff ff93 	bl	8006bda <__sfputs_r>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f000 80aa 	beq.w	8006e0e <_vfiprintf_r+0x20e>
 8006cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbc:	445a      	add	r2, fp
 8006cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80a2 	beq.w	8006e0e <_vfiprintf_r+0x20e>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd4:	f10a 0a01 	add.w	sl, sl, #1
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	9307      	str	r3, [sp, #28]
 8006cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce2:	4654      	mov	r4, sl
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cea:	4858      	ldr	r0, [pc, #352]	; (8006e4c <_vfiprintf_r+0x24c>)
 8006cec:	f7f9 fa90 	bl	8000210 <memchr>
 8006cf0:	9a04      	ldr	r2, [sp, #16]
 8006cf2:	b9d8      	cbnz	r0, 8006d2c <_vfiprintf_r+0x12c>
 8006cf4:	06d1      	lsls	r1, r2, #27
 8006cf6:	bf44      	itt	mi
 8006cf8:	2320      	movmi	r3, #32
 8006cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cfe:	0713      	lsls	r3, r2, #28
 8006d00:	bf44      	itt	mi
 8006d02:	232b      	movmi	r3, #43	; 0x2b
 8006d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d08:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0e:	d015      	beq.n	8006d3c <_vfiprintf_r+0x13c>
 8006d10:	9a07      	ldr	r2, [sp, #28]
 8006d12:	4654      	mov	r4, sl
 8006d14:	2000      	movs	r0, #0
 8006d16:	f04f 0c0a 	mov.w	ip, #10
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d20:	3b30      	subs	r3, #48	; 0x30
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d94e      	bls.n	8006dc4 <_vfiprintf_r+0x1c4>
 8006d26:	b1b0      	cbz	r0, 8006d56 <_vfiprintf_r+0x156>
 8006d28:	9207      	str	r2, [sp, #28]
 8006d2a:	e014      	b.n	8006d56 <_vfiprintf_r+0x156>
 8006d2c:	eba0 0308 	sub.w	r3, r0, r8
 8006d30:	fa09 f303 	lsl.w	r3, r9, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	46a2      	mov	sl, r4
 8006d3a:	e7d2      	b.n	8006ce2 <_vfiprintf_r+0xe2>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	1d19      	adds	r1, r3, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	9103      	str	r1, [sp, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bfbb      	ittet	lt
 8006d48:	425b      	neglt	r3, r3
 8006d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d4e:	9307      	strge	r3, [sp, #28]
 8006d50:	9307      	strlt	r3, [sp, #28]
 8006d52:	bfb8      	it	lt
 8006d54:	9204      	strlt	r2, [sp, #16]
 8006d56:	7823      	ldrb	r3, [r4, #0]
 8006d58:	2b2e      	cmp	r3, #46	; 0x2e
 8006d5a:	d10c      	bne.n	8006d76 <_vfiprintf_r+0x176>
 8006d5c:	7863      	ldrb	r3, [r4, #1]
 8006d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d60:	d135      	bne.n	8006dce <_vfiprintf_r+0x1ce>
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	1d1a      	adds	r2, r3, #4
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	9203      	str	r2, [sp, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bfb8      	it	lt
 8006d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d72:	3402      	adds	r4, #2
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e5c <_vfiprintf_r+0x25c>
 8006d7a:	7821      	ldrb	r1, [r4, #0]
 8006d7c:	2203      	movs	r2, #3
 8006d7e:	4650      	mov	r0, sl
 8006d80:	f7f9 fa46 	bl	8000210 <memchr>
 8006d84:	b140      	cbz	r0, 8006d98 <_vfiprintf_r+0x198>
 8006d86:	2340      	movs	r3, #64	; 0x40
 8006d88:	eba0 000a 	sub.w	r0, r0, sl
 8006d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d90:	9b04      	ldr	r3, [sp, #16]
 8006d92:	4303      	orrs	r3, r0
 8006d94:	3401      	adds	r4, #1
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9c:	482c      	ldr	r0, [pc, #176]	; (8006e50 <_vfiprintf_r+0x250>)
 8006d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da2:	2206      	movs	r2, #6
 8006da4:	f7f9 fa34 	bl	8000210 <memchr>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d03f      	beq.n	8006e2c <_vfiprintf_r+0x22c>
 8006dac:	4b29      	ldr	r3, [pc, #164]	; (8006e54 <_vfiprintf_r+0x254>)
 8006dae:	bb1b      	cbnz	r3, 8006df8 <_vfiprintf_r+0x1f8>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	3307      	adds	r3, #7
 8006db4:	f023 0307 	bic.w	r3, r3, #7
 8006db8:	3308      	adds	r3, #8
 8006dba:	9303      	str	r3, [sp, #12]
 8006dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dbe:	443b      	add	r3, r7
 8006dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc2:	e767      	b.n	8006c94 <_vfiprintf_r+0x94>
 8006dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dc8:	460c      	mov	r4, r1
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e7a5      	b.n	8006d1a <_vfiprintf_r+0x11a>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	3401      	adds	r4, #1
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f04f 0c0a 	mov.w	ip, #10
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de0:	3a30      	subs	r2, #48	; 0x30
 8006de2:	2a09      	cmp	r2, #9
 8006de4:	d903      	bls.n	8006dee <_vfiprintf_r+0x1ee>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0c5      	beq.n	8006d76 <_vfiprintf_r+0x176>
 8006dea:	9105      	str	r1, [sp, #20]
 8006dec:	e7c3      	b.n	8006d76 <_vfiprintf_r+0x176>
 8006dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df2:	4604      	mov	r4, r0
 8006df4:	2301      	movs	r3, #1
 8006df6:	e7f0      	b.n	8006dda <_vfiprintf_r+0x1da>
 8006df8:	ab03      	add	r3, sp, #12
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <_vfiprintf_r+0x258>)
 8006e00:	a904      	add	r1, sp, #16
 8006e02:	4630      	mov	r0, r6
 8006e04:	f3af 8000 	nop.w
 8006e08:	4607      	mov	r7, r0
 8006e0a:	1c78      	adds	r0, r7, #1
 8006e0c:	d1d6      	bne.n	8006dbc <_vfiprintf_r+0x1bc>
 8006e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e10:	07d9      	lsls	r1, r3, #31
 8006e12:	d405      	bmi.n	8006e20 <_vfiprintf_r+0x220>
 8006e14:	89ab      	ldrh	r3, [r5, #12]
 8006e16:	059a      	lsls	r2, r3, #22
 8006e18:	d402      	bmi.n	8006e20 <_vfiprintf_r+0x220>
 8006e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e1c:	f7ff fa04 	bl	8006228 <__retarget_lock_release_recursive>
 8006e20:	89ab      	ldrh	r3, [r5, #12]
 8006e22:	065b      	lsls	r3, r3, #25
 8006e24:	f53f af12 	bmi.w	8006c4c <_vfiprintf_r+0x4c>
 8006e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e2a:	e711      	b.n	8006c50 <_vfiprintf_r+0x50>
 8006e2c:	ab03      	add	r3, sp, #12
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	462a      	mov	r2, r5
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <_vfiprintf_r+0x258>)
 8006e34:	a904      	add	r1, sp, #16
 8006e36:	4630      	mov	r0, r6
 8006e38:	f000 f880 	bl	8006f3c <_printf_i>
 8006e3c:	e7e4      	b.n	8006e08 <_vfiprintf_r+0x208>
 8006e3e:	bf00      	nop
 8006e40:	080073c8 	.word	0x080073c8
 8006e44:	080073e8 	.word	0x080073e8
 8006e48:	080073a8 	.word	0x080073a8
 8006e4c:	0800750d 	.word	0x0800750d
 8006e50:	08007517 	.word	0x08007517
 8006e54:	00000000 	.word	0x00000000
 8006e58:	08006bdb 	.word	0x08006bdb
 8006e5c:	08007513 	.word	0x08007513

08006e60 <_printf_common>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	4616      	mov	r6, r2
 8006e66:	4699      	mov	r9, r3
 8006e68:	688a      	ldr	r2, [r1, #8]
 8006e6a:	690b      	ldr	r3, [r1, #16]
 8006e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e70:	4293      	cmp	r3, r2
 8006e72:	bfb8      	it	lt
 8006e74:	4613      	movlt	r3, r2
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	b10a      	cbz	r2, 8006e86 <_printf_common+0x26>
 8006e82:	3301      	adds	r3, #1
 8006e84:	6033      	str	r3, [r6, #0]
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	0699      	lsls	r1, r3, #26
 8006e8a:	bf42      	ittt	mi
 8006e8c:	6833      	ldrmi	r3, [r6, #0]
 8006e8e:	3302      	addmi	r3, #2
 8006e90:	6033      	strmi	r3, [r6, #0]
 8006e92:	6825      	ldr	r5, [r4, #0]
 8006e94:	f015 0506 	ands.w	r5, r5, #6
 8006e98:	d106      	bne.n	8006ea8 <_printf_common+0x48>
 8006e9a:	f104 0a19 	add.w	sl, r4, #25
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	6832      	ldr	r2, [r6, #0]
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	dc26      	bgt.n	8006ef6 <_printf_common+0x96>
 8006ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eac:	1e13      	subs	r3, r2, #0
 8006eae:	6822      	ldr	r2, [r4, #0]
 8006eb0:	bf18      	it	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	0692      	lsls	r2, r2, #26
 8006eb6:	d42b      	bmi.n	8006f10 <_printf_common+0xb0>
 8006eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	47c0      	blx	r8
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d01e      	beq.n	8006f04 <_printf_common+0xa4>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	68e5      	ldr	r5, [r4, #12]
 8006eca:	6832      	ldr	r2, [r6, #0]
 8006ecc:	f003 0306 	and.w	r3, r3, #6
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	bf08      	it	eq
 8006ed4:	1aad      	subeq	r5, r5, r2
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	6922      	ldr	r2, [r4, #16]
 8006eda:	bf0c      	ite	eq
 8006edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee0:	2500      	movne	r5, #0
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	bfc4      	itt	gt
 8006ee6:	1a9b      	subgt	r3, r3, r2
 8006ee8:	18ed      	addgt	r5, r5, r3
 8006eea:	2600      	movs	r6, #0
 8006eec:	341a      	adds	r4, #26
 8006eee:	42b5      	cmp	r5, r6
 8006ef0:	d11a      	bne.n	8006f28 <_printf_common+0xc8>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e008      	b.n	8006f08 <_printf_common+0xa8>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4652      	mov	r2, sl
 8006efa:	4649      	mov	r1, r9
 8006efc:	4638      	mov	r0, r7
 8006efe:	47c0      	blx	r8
 8006f00:	3001      	adds	r0, #1
 8006f02:	d103      	bne.n	8006f0c <_printf_common+0xac>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	e7c6      	b.n	8006e9e <_printf_common+0x3e>
 8006f10:	18e1      	adds	r1, r4, r3
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	2030      	movs	r0, #48	; 0x30
 8006f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f1a:	4422      	add	r2, r4
 8006f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f24:	3302      	adds	r3, #2
 8006f26:	e7c7      	b.n	8006eb8 <_printf_common+0x58>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	4638      	mov	r0, r7
 8006f30:	47c0      	blx	r8
 8006f32:	3001      	adds	r0, #1
 8006f34:	d0e6      	beq.n	8006f04 <_printf_common+0xa4>
 8006f36:	3601      	adds	r6, #1
 8006f38:	e7d9      	b.n	8006eee <_printf_common+0x8e>
	...

08006f3c <_printf_i>:
 8006f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	460c      	mov	r4, r1
 8006f42:	4691      	mov	r9, r2
 8006f44:	7e27      	ldrb	r7, [r4, #24]
 8006f46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f48:	2f78      	cmp	r7, #120	; 0x78
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	469a      	mov	sl, r3
 8006f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f52:	d807      	bhi.n	8006f64 <_printf_i+0x28>
 8006f54:	2f62      	cmp	r7, #98	; 0x62
 8006f56:	d80a      	bhi.n	8006f6e <_printf_i+0x32>
 8006f58:	2f00      	cmp	r7, #0
 8006f5a:	f000 80d8 	beq.w	800710e <_printf_i+0x1d2>
 8006f5e:	2f58      	cmp	r7, #88	; 0x58
 8006f60:	f000 80a3 	beq.w	80070aa <_printf_i+0x16e>
 8006f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f6c:	e03a      	b.n	8006fe4 <_printf_i+0xa8>
 8006f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f72:	2b15      	cmp	r3, #21
 8006f74:	d8f6      	bhi.n	8006f64 <_printf_i+0x28>
 8006f76:	a001      	add	r0, pc, #4	; (adr r0, 8006f7c <_printf_i+0x40>)
 8006f78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f7c:	08006fd5 	.word	0x08006fd5
 8006f80:	08006fe9 	.word	0x08006fe9
 8006f84:	08006f65 	.word	0x08006f65
 8006f88:	08006f65 	.word	0x08006f65
 8006f8c:	08006f65 	.word	0x08006f65
 8006f90:	08006f65 	.word	0x08006f65
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	08006f65 	.word	0x08006f65
 8006f9c:	08006f65 	.word	0x08006f65
 8006fa0:	08006f65 	.word	0x08006f65
 8006fa4:	08006f65 	.word	0x08006f65
 8006fa8:	080070f5 	.word	0x080070f5
 8006fac:	08007019 	.word	0x08007019
 8006fb0:	080070d7 	.word	0x080070d7
 8006fb4:	08006f65 	.word	0x08006f65
 8006fb8:	08006f65 	.word	0x08006f65
 8006fbc:	08007117 	.word	0x08007117
 8006fc0:	08006f65 	.word	0x08006f65
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	08006f65 	.word	0x08006f65
 8006fcc:	08006f65 	.word	0x08006f65
 8006fd0:	080070df 	.word	0x080070df
 8006fd4:	680b      	ldr	r3, [r1, #0]
 8006fd6:	1d1a      	adds	r2, r3, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	600a      	str	r2, [r1, #0]
 8006fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0a3      	b.n	8007130 <_printf_i+0x1f4>
 8006fe8:	6825      	ldr	r5, [r4, #0]
 8006fea:	6808      	ldr	r0, [r1, #0]
 8006fec:	062e      	lsls	r6, r5, #24
 8006fee:	f100 0304 	add.w	r3, r0, #4
 8006ff2:	d50a      	bpl.n	800700a <_printf_i+0xce>
 8006ff4:	6805      	ldr	r5, [r0, #0]
 8006ff6:	600b      	str	r3, [r1, #0]
 8006ff8:	2d00      	cmp	r5, #0
 8006ffa:	da03      	bge.n	8007004 <_printf_i+0xc8>
 8006ffc:	232d      	movs	r3, #45	; 0x2d
 8006ffe:	426d      	negs	r5, r5
 8007000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007004:	485e      	ldr	r0, [pc, #376]	; (8007180 <_printf_i+0x244>)
 8007006:	230a      	movs	r3, #10
 8007008:	e019      	b.n	800703e <_printf_i+0x102>
 800700a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800700e:	6805      	ldr	r5, [r0, #0]
 8007010:	600b      	str	r3, [r1, #0]
 8007012:	bf18      	it	ne
 8007014:	b22d      	sxthne	r5, r5
 8007016:	e7ef      	b.n	8006ff8 <_printf_i+0xbc>
 8007018:	680b      	ldr	r3, [r1, #0]
 800701a:	6825      	ldr	r5, [r4, #0]
 800701c:	1d18      	adds	r0, r3, #4
 800701e:	6008      	str	r0, [r1, #0]
 8007020:	0628      	lsls	r0, r5, #24
 8007022:	d501      	bpl.n	8007028 <_printf_i+0xec>
 8007024:	681d      	ldr	r5, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0xf2>
 8007028:	0669      	lsls	r1, r5, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0xe8>
 800702c:	881d      	ldrh	r5, [r3, #0]
 800702e:	4854      	ldr	r0, [pc, #336]	; (8007180 <_printf_i+0x244>)
 8007030:	2f6f      	cmp	r7, #111	; 0x6f
 8007032:	bf0c      	ite	eq
 8007034:	2308      	moveq	r3, #8
 8007036:	230a      	movne	r3, #10
 8007038:	2100      	movs	r1, #0
 800703a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800703e:	6866      	ldr	r6, [r4, #4]
 8007040:	60a6      	str	r6, [r4, #8]
 8007042:	2e00      	cmp	r6, #0
 8007044:	bfa2      	ittt	ge
 8007046:	6821      	ldrge	r1, [r4, #0]
 8007048:	f021 0104 	bicge.w	r1, r1, #4
 800704c:	6021      	strge	r1, [r4, #0]
 800704e:	b90d      	cbnz	r5, 8007054 <_printf_i+0x118>
 8007050:	2e00      	cmp	r6, #0
 8007052:	d04d      	beq.n	80070f0 <_printf_i+0x1b4>
 8007054:	4616      	mov	r6, r2
 8007056:	fbb5 f1f3 	udiv	r1, r5, r3
 800705a:	fb03 5711 	mls	r7, r3, r1, r5
 800705e:	5dc7      	ldrb	r7, [r0, r7]
 8007060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007064:	462f      	mov	r7, r5
 8007066:	42bb      	cmp	r3, r7
 8007068:	460d      	mov	r5, r1
 800706a:	d9f4      	bls.n	8007056 <_printf_i+0x11a>
 800706c:	2b08      	cmp	r3, #8
 800706e:	d10b      	bne.n	8007088 <_printf_i+0x14c>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07df      	lsls	r7, r3, #31
 8007074:	d508      	bpl.n	8007088 <_printf_i+0x14c>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	6861      	ldr	r1, [r4, #4]
 800707a:	4299      	cmp	r1, r3
 800707c:	bfde      	ittt	le
 800707e:	2330      	movle	r3, #48	; 0x30
 8007080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007084:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007088:	1b92      	subs	r2, r2, r6
 800708a:	6122      	str	r2, [r4, #16]
 800708c:	f8cd a000 	str.w	sl, [sp]
 8007090:	464b      	mov	r3, r9
 8007092:	aa03      	add	r2, sp, #12
 8007094:	4621      	mov	r1, r4
 8007096:	4640      	mov	r0, r8
 8007098:	f7ff fee2 	bl	8006e60 <_printf_common>
 800709c:	3001      	adds	r0, #1
 800709e:	d14c      	bne.n	800713a <_printf_i+0x1fe>
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	b004      	add	sp, #16
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	4835      	ldr	r0, [pc, #212]	; (8007180 <_printf_i+0x244>)
 80070ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	680e      	ldr	r6, [r1, #0]
 80070b4:	061f      	lsls	r7, r3, #24
 80070b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80070ba:	600e      	str	r6, [r1, #0]
 80070bc:	d514      	bpl.n	80070e8 <_printf_i+0x1ac>
 80070be:	07d9      	lsls	r1, r3, #31
 80070c0:	bf44      	itt	mi
 80070c2:	f043 0320 	orrmi.w	r3, r3, #32
 80070c6:	6023      	strmi	r3, [r4, #0]
 80070c8:	b91d      	cbnz	r5, 80070d2 <_printf_i+0x196>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	f023 0320 	bic.w	r3, r3, #32
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	2310      	movs	r3, #16
 80070d4:	e7b0      	b.n	8007038 <_printf_i+0xfc>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	f043 0320 	orr.w	r3, r3, #32
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	2378      	movs	r3, #120	; 0x78
 80070e0:	4828      	ldr	r0, [pc, #160]	; (8007184 <_printf_i+0x248>)
 80070e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070e6:	e7e3      	b.n	80070b0 <_printf_i+0x174>
 80070e8:	065e      	lsls	r6, r3, #25
 80070ea:	bf48      	it	mi
 80070ec:	b2ad      	uxthmi	r5, r5
 80070ee:	e7e6      	b.n	80070be <_printf_i+0x182>
 80070f0:	4616      	mov	r6, r2
 80070f2:	e7bb      	b.n	800706c <_printf_i+0x130>
 80070f4:	680b      	ldr	r3, [r1, #0]
 80070f6:	6826      	ldr	r6, [r4, #0]
 80070f8:	6960      	ldr	r0, [r4, #20]
 80070fa:	1d1d      	adds	r5, r3, #4
 80070fc:	600d      	str	r5, [r1, #0]
 80070fe:	0635      	lsls	r5, r6, #24
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	d501      	bpl.n	8007108 <_printf_i+0x1cc>
 8007104:	6018      	str	r0, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0x1d2>
 8007108:	0671      	lsls	r1, r6, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0x1c8>
 800710c:	8018      	strh	r0, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	6123      	str	r3, [r4, #16]
 8007112:	4616      	mov	r6, r2
 8007114:	e7ba      	b.n	800708c <_printf_i+0x150>
 8007116:	680b      	ldr	r3, [r1, #0]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	600a      	str	r2, [r1, #0]
 800711c:	681e      	ldr	r6, [r3, #0]
 800711e:	6862      	ldr	r2, [r4, #4]
 8007120:	2100      	movs	r1, #0
 8007122:	4630      	mov	r0, r6
 8007124:	f7f9 f874 	bl	8000210 <memchr>
 8007128:	b108      	cbz	r0, 800712e <_printf_i+0x1f2>
 800712a:	1b80      	subs	r0, r0, r6
 800712c:	6060      	str	r0, [r4, #4]
 800712e:	6863      	ldr	r3, [r4, #4]
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	2300      	movs	r3, #0
 8007134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007138:	e7a8      	b.n	800708c <_printf_i+0x150>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	4632      	mov	r2, r6
 800713e:	4649      	mov	r1, r9
 8007140:	4640      	mov	r0, r8
 8007142:	47d0      	blx	sl
 8007144:	3001      	adds	r0, #1
 8007146:	d0ab      	beq.n	80070a0 <_printf_i+0x164>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	079b      	lsls	r3, r3, #30
 800714c:	d413      	bmi.n	8007176 <_printf_i+0x23a>
 800714e:	68e0      	ldr	r0, [r4, #12]
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	4298      	cmp	r0, r3
 8007154:	bfb8      	it	lt
 8007156:	4618      	movlt	r0, r3
 8007158:	e7a4      	b.n	80070a4 <_printf_i+0x168>
 800715a:	2301      	movs	r3, #1
 800715c:	4632      	mov	r2, r6
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d09b      	beq.n	80070a0 <_printf_i+0x164>
 8007168:	3501      	adds	r5, #1
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	9903      	ldr	r1, [sp, #12]
 800716e:	1a5b      	subs	r3, r3, r1
 8007170:	42ab      	cmp	r3, r5
 8007172:	dcf2      	bgt.n	800715a <_printf_i+0x21e>
 8007174:	e7eb      	b.n	800714e <_printf_i+0x212>
 8007176:	2500      	movs	r5, #0
 8007178:	f104 0619 	add.w	r6, r4, #25
 800717c:	e7f5      	b.n	800716a <_printf_i+0x22e>
 800717e:	bf00      	nop
 8007180:	0800751e 	.word	0x0800751e
 8007184:	0800752f 	.word	0x0800752f

08007188 <_read_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d07      	ldr	r5, [pc, #28]	; (80071a8 <_read_r+0x20>)
 800718c:	4604      	mov	r4, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	2200      	movs	r2, #0
 8007194:	602a      	str	r2, [r5, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	f7f9 fe1e 	bl	8000dd8 <_read>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_read_r+0x1e>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_read_r+0x1e>
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	200044c4 	.word	0x200044c4

080071ac <_fstat_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d07      	ldr	r5, [pc, #28]	; (80071cc <_fstat_r+0x20>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	4604      	mov	r4, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	4611      	mov	r1, r2
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	f7f9 fe52 	bl	8000e62 <_fstat>
 80071be:	1c43      	adds	r3, r0, #1
 80071c0:	d102      	bne.n	80071c8 <_fstat_r+0x1c>
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	b103      	cbz	r3, 80071c8 <_fstat_r+0x1c>
 80071c6:	6023      	str	r3, [r4, #0]
 80071c8:	bd38      	pop	{r3, r4, r5, pc}
 80071ca:	bf00      	nop
 80071cc:	200044c4 	.word	0x200044c4

080071d0 <_isatty_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d06      	ldr	r5, [pc, #24]	; (80071ec <_isatty_r+0x1c>)
 80071d4:	2300      	movs	r3, #0
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	f7f9 fe51 	bl	8000e82 <_isatty>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_isatty_r+0x1a>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_isatty_r+0x1a>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	200044c4 	.word	0x200044c4

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
