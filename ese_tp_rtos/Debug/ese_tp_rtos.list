
ese_tp_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f4  080060f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004114  20000074  08006170  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004188  08006170  00024188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a00  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387f  00000000  00000000  00039aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029149  00000000  00000000  0003f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161fe  00000000  00000000  000689d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f987f  00000000  00000000  0007ebd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005630  00000000  00000000  001784ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006008 	.word	0x08006008

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006008 	.word	0x08006008

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000090 	.word	0x20000090
 8000538:	20000144 	.word	0x20000144

0800053c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_FREERTOS_Init+0x30>)
 8000544:	1d3c      	adds	r4, r7, #4
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fec1 	bl	80032e0 <osThreadCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <MX_FREERTOS_Init+0x34>)
 8000562:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bdb0      	pop	{r4, r5, r7, pc}
 800056c:	0800602c 	.word	0x0800602c
 8000570:	2000409c 	.word	0x2000409c

08000574 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f002 fefb 	bl	8003378 <osDelay>
 8000582:	e7fb      	b.n	800057c <StartDefaultTask+0x8>

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_GPIO_Init+0x5c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <MX_GPIO_Init+0x5c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_GPIO_Init+0x5c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_GPIO_Init+0x5c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <MX_GPIO_Init+0x5c>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_GPIO_Init+0x5c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_GPIO_Init+0x5c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <MX_GPIO_Init+0x5c>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_GPIO_Init+0x5c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f002 fa0d 	bl	8002a14 <HAL_UART_Transmit>
	return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200040f0 	.word	0x200040f0

08000608 <vTask1>:

void vTask1(void *p){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	while(1){
		printf("Task1\r\n");
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <vTask1+0x28>)
 8000612:	f005 f989 	bl	8005928 <puts>
		xSemaphoreGive(semQ3);
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <vTask1+0x2c>)
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	f003 f83e 	bl	80036a0 <xQueueGenericSend>
		vTaskDelay(1000);
 8000624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000628:	f003 fd08 	bl	800403c <vTaskDelay>
		printf("Task1\r\n");
 800062c:	e7f0      	b.n	8000610 <vTask1+0x8>
 800062e:	bf00      	nop
 8000630:	08006048 	.word	0x08006048
 8000634:	200040a0 	.word	0x200040a0

08000638 <vTask2>:
	}
}

void vTask2(void *p){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(semQ3,portMAX_DELAY);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <vTask2+0x20>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f04f 31ff 	mov.w	r1, #4294967295
 8000648:	4618      	mov	r0, r3
 800064a:	f003 f92f 	bl	80038ac <xQueueSemaphoreTake>
		printf("Task2\r\n");
 800064e:	4803      	ldr	r0, [pc, #12]	; (800065c <vTask2+0x24>)
 8000650:	f005 f96a 	bl	8005928 <puts>
		xSemaphoreTake(semQ3,portMAX_DELAY);
 8000654:	e7f4      	b.n	8000640 <vTask2+0x8>
 8000656:	bf00      	nop
 8000658:	200040a0 	.word	0x200040a0
 800065c:	08006050 	.word	0x08006050

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fb00 	bl	8000c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f845 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f7ff ff89 	bl	8000584 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000672:	f000 fa3f 	bl	8000af4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BaseType_t xReturned;
  TaskHandle_t xHandle1 = NULL, xHandle2 = NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]

  xReturned = xTaskCreate(
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	2301      	movs	r3, #1
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800068e:	4915      	ldr	r1, [pc, #84]	; (80006e4 <main+0x84>)
 8000690:	4815      	ldr	r0, [pc, #84]	; (80006e8 <main+0x88>)
 8000692:	f003 fb84 	bl	8003d9e <xTaskCreate>
 8000696:	60f8      	str	r0, [r7, #12]
		  "Task1",
		  STACK_SIZE,
		  (void *) NULL,
		  1,
		  &xHandle1);
  if(xReturned != pdPASS) while(1){}
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d000      	beq.n	80006a0 <main+0x40>
 800069e:	e7fe      	b.n	800069e <main+0x3e>

  xReturned = xTaskCreate(
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ae:	490f      	ldr	r1, [pc, #60]	; (80006ec <main+0x8c>)
 80006b0:	480f      	ldr	r0, [pc, #60]	; (80006f0 <main+0x90>)
 80006b2:	f003 fb74 	bl	8003d9e <xTaskCreate>
 80006b6:	60f8      	str	r0, [r7, #12]
		  "Task2",
		  STACK_SIZE,
		  (void *) NULL,
		  2,
		  &xHandle2);
  if(xReturned != pdPASS) while(1){}
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d000      	beq.n	80006c0 <main+0x60>
 80006be:	e7fe      	b.n	80006be <main+0x5e>

  semQ3 = xSemaphoreCreateBinary();
 80006c0:	2203      	movs	r2, #3
 80006c2:	2100      	movs	r1, #0
 80006c4:	2001      	movs	r0, #1
 80006c6:	f002 ff89 	bl	80035dc <xQueueGenericCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <main+0x94>)
 80006ce:	6013      	str	r3, [r2, #0]
  if(semQ3 == NULL) while(1);
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <main+0x94>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d100      	bne.n	80006da <main+0x7a>
 80006d8:	e7fe      	b.n	80006d8 <main+0x78>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006da:	f7ff ff2f 	bl	800053c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006de:	f002 fdf8 	bl	80032d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x82>
 80006e4:	08006058 	.word	0x08006058
 80006e8:	08000609 	.word	0x08000609
 80006ec:	08006060 	.word	0x08006060
 80006f0:	08000639 	.word	0x08000639
 80006f4:	200040a0 	.word	0x200040a0

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0b4      	sub	sp, #208	; 0xd0
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 f83d 	bl	8005786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2284      	movs	r2, #132	; 0x84
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f005 f82e 	bl	8005786 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <SystemClock_Config+0x118>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a38      	ldr	r2, [pc, #224]	; (8000810 <SystemClock_Config+0x118>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <SystemClock_Config+0x118>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000742:	4b34      	ldr	r3, [pc, #208]	; (8000814 <SystemClock_Config+0x11c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a33      	ldr	r2, [pc, #204]	; (8000814 <SystemClock_Config+0x11c>)
 8000748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <SystemClock_Config+0x11c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2310      	movs	r3, #16
 8000768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800077e:	23d8      	movs	r3, #216	; 0xd8
 8000780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fd73 	bl	8001280 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007a0:	f000 f84c 	bl	800083c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a4:	f000 fd1c 	bl	80011e0 <HAL_PWREx_EnableOverDrive>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007ae:	f000 f845 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007d8:	2107      	movs	r1, #7
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fff4 	bl	80017c8 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007e6:	f000 f829 	bl	800083c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007ea:	2340      	movs	r3, #64	; 0x40
 80007ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007ee:	2300      	movs	r3, #0
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f9ee 	bl	8001bd8 <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000802:	f000 f81b 	bl	800083c <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	37d0      	adds	r7, #208	; 0xd0
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 fa2b 	bl	8000c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f000 fad5 	bl	8000e34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2036      	movs	r0, #54	; 0x36
 80008ae:	f000 fac1 	bl	8000e34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b2:	2036      	movs	r0, #54	; 0x36
 80008b4:	f000 fada 	bl	8000e6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <HAL_InitTick+0xa0>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <HAL_InitTick+0xa0>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_InitTick+0xa0>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f003 0310 	and.w	r3, r3, #16
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f94a 	bl	8001b74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008e0:	f001 f920 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 80008e4:	4603      	mov	r3, r0
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <HAL_InitTick+0xa4>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0c9b      	lsrs	r3, r3, #18
 80008f4:	3b01      	subs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_InitTick+0xa8>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <HAL_InitTick+0xac>)
 80008fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_InitTick+0xa8>)
 8000900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000904:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_InitTick+0xa8>)
 8000908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_InitTick+0xa8>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_InitTick+0xa8>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <HAL_InitTick+0xa8>)
 800091a:	f001 fd4d 	bl	80023b8 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d104      	bne.n	800092e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <HAL_InitTick+0xa8>)
 8000926:	f001 fda9 	bl	800247c <HAL_TIM_Base_Start_IT>
 800092a:	4603      	mov	r3, r0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	431bde83 	.word	0x431bde83
 8000940:	200040a4 	.word	0x200040a4
 8000944:	40001000 	.word	0x40001000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM6_DAC_IRQHandler+0x10>)
 800097a:	f001 fdf7 	bl	800256c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200040a4 	.word	0x200040a4

08000988 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e00a      	b.n	80009b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800099a:	f3af 8000 	nop.w
 800099e:	4601      	mov	r1, r0
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf0      	blt.n	800099a <_read+0x12>
	}

return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e009      	b.n	80009e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe01 	bl	80005e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf1      	blt.n	80009d4 <_write+0x12>
	}
	return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_close>:

int _close(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	return -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a22:	605a      	str	r2, [r3, #4]
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_isatty>:

int _isatty(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return 1;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f004 fd46 	bl	8005524 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20050000 	.word	0x20050000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	20000344 	.word	0x20000344
 8000acc:	20004188 	.word	0x20004188

08000ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_USART1_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b38:	f001 ff1e 	bl	8002978 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b42:	f7ff fe7b 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200040f0 	.word	0x200040f0
 8000b50:	40011000 	.word	0x40011000

08000b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <HAL_UART_MspInit+0xb4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d144      	bne.n	8000c00 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a24      	ldr	r2, [pc, #144]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bda:	f000 f955 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <HAL_UART_MspInit+0xc0>)
 8000bfc:	f000 f944 	bl	8000e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020000 	.word	0x40020000

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c1e:	490e      	ldr	r1, [pc, #56]	; (8000c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c34:	4c0b      	ldr	r4, [pc, #44]	; (8000c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c42:	f7ff ff45 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f004 fd69 	bl	800571c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fd09 	bl	8000660 <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c5c:	080060fc 	.word	0x080060fc
  ldr r2, =_sbss
 8000c60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c64:	20004188 	.word	0x20004188

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>

08000c6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 f8d5 	bl	8000e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c74:	200f      	movs	r0, #15
 8000c76:	f7ff fe0f 	bl	8000898 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fde5 	bl	8000848 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20004174 	.word	0x20004174

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20004174 	.word	0x20004174

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	05fa0000 	.word	0x05fa0000

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff4c 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e46:	f7ff ff61 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	6978      	ldr	r0, [r7, #20]
 8000e52:	f7ff ffb1 	bl	8000db8 <NVIC_EncodePriority>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff80 	bl	8000d64 <__NVIC_SetPriority>
}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff54 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e175      	b.n	8001194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 8164 	bne.w	800118e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d00b      	beq.n	8000ee6 <HAL_GPIO_Init+0x5e>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eda:	2b11      	cmp	r3, #17
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x100>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b12      	cmp	r3, #18
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0203 	and.w	r2, r3, #3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80be 	beq.w	800118e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b66      	ldr	r3, [pc, #408]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <HAL_GPIO_Init+0x324>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800102a:	4a61      	ldr	r2, [pc, #388]	; (80011b0 <HAL_GPIO_Init+0x328>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_GPIO_Init+0x32c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d037      	beq.n	80010c6 <HAL_GPIO_Init+0x23e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a57      	ldr	r2, [pc, #348]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d031      	beq.n	80010c2 <HAL_GPIO_Init+0x23a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x334>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x236>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_GPIO_Init+0x338>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x232>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x33c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x22e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a53      	ldr	r2, [pc, #332]	; (80011c8 <HAL_GPIO_Init+0x340>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x22a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x344>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x226>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a51      	ldr	r2, [pc, #324]	; (80011d0 <HAL_GPIO_Init+0x348>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x222>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_Init+0x34c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x21e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <HAL_GPIO_Init+0x350>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x21a>
 800109e:	2309      	movs	r3, #9
 80010a0:	e012      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010a2:	230a      	movs	r3, #10
 80010a4:	e010      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010a6:	2308      	movs	r3, #8
 80010a8:	e00e      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010aa:	2307      	movs	r3, #7
 80010ac:	e00c      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010ae:	2306      	movs	r3, #6
 80010b0:	e00a      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x240>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010d8:	4935      	ldr	r1, [pc, #212]	; (80011b0 <HAL_GPIO_Init+0x328>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e6:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <HAL_GPIO_Init+0x354>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110a:	4a34      	ldr	r2, [pc, #208]	; (80011dc <HAL_GPIO_Init+0x354>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_GPIO_Init+0x354>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_GPIO_Init+0x354>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <HAL_GPIO_Init+0x354>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f ae86 	bls.w	8000ea8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40013800 	.word	0x40013800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021400 	.word	0x40021400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40021c00 	.word	0x40021c00
 80011d4:	40022000 	.word	0x40022000
 80011d8:	40022400 	.word	0x40022400
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <HAL_PWREx_EnableOverDrive+0x98>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a22      	ldr	r2, [pc, #136]	; (8001278 <HAL_PWREx_EnableOverDrive+0x98>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_PWREx_EnableOverDrive+0x98>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120e:	f7ff fd4d 	bl	8000cac <HAL_GetTick>
 8001212:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001214:	e009      	b.n	800122a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001216:	f7ff fd49 	bl	8000cac <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001224:	d901      	bls.n	800122a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e022      	b.n	8001270 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001236:	d1ee      	bne.n	8001216 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 800123e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001244:	f7ff fd32 	bl	8000cac <HAL_GetTick>
 8001248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800124a:	e009      	b.n	8001260 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800124c:	f7ff fd2e 	bl	8000cac <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800125a:	d901      	bls.n	8001260 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e007      	b.n	8001270 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800126c:	d1ee      	bne.n	800124c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e291      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8087 	beq.w	80013b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a4:	4b96      	ldr	r3, [pc, #600]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d00c      	beq.n	80012ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b0:	4b93      	ldr	r3, [pc, #588]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d112      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62>
 80012bc:	4b90      	ldr	r3, [pc, #576]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b8d      	ldr	r3, [pc, #564]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d06c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x130>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d168      	bne.n	80013b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e26b      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x7a>
 80012ec:	4b84      	ldr	r3, [pc, #528]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a83      	ldr	r2, [pc, #524]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e02e      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x9c>
 8001302:	4b7f      	ldr	r3, [pc, #508]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a7e      	ldr	r2, [pc, #504]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a7b      	ldr	r2, [pc, #492]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0xc0>
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a72      	ldr	r2, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
 8001340:	4b6f      	ldr	r3, [pc, #444]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a6e      	ldr	r2, [pc, #440]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a6b      	ldr	r2, [pc, #428]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fca4 	bl	8000cac <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fca0 	bl	8000cac <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e21f      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b61      	ldr	r3, [pc, #388]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xe8>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc90 	bl	8000cac <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc8c 	bl	8000cac <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e20b      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b57      	ldr	r3, [pc, #348]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x110>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d069      	beq.n	8001492 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013be:	4b50      	ldr	r3, [pc, #320]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x190>
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x17a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1df      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	493d      	ldr	r1, [pc, #244]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e040      	b.n	8001492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a38      	ldr	r2, [pc, #224]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc42 	bl	8000cac <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fc3e 	bl	8000cac <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1bd      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4929      	ldr	r1, [pc, #164]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
 800145e:	e018      	b.n	8001492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fc1e 	bl	8000cac <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fc1a 	bl	8000cac <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e199      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d038      	beq.n	8001510 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d019      	beq.n	80014da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fbfb 	bl	8000cac <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fbf7 	bl	8000cac <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e176      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x23a>
 80014d8:	e01a      	b.n	8001510 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fbe1 	bl	8000cac <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fbdd 	bl	8000cac <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d903      	bls.n	8001504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e15c      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
 8001500:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b91      	ldr	r3, [pc, #580]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ee      	bne.n	80014ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a4 	beq.w	8001666 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b8b      	ldr	r3, [pc, #556]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10d      	bne.n	8001546 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b88      	ldr	r3, [pc, #544]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a87      	ldr	r2, [pc, #540]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b85      	ldr	r3, [pc, #532]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	4b82      	ldr	r3, [pc, #520]	; (8001750 <HAL_RCC_OscConfig+0x4d0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001552:	4b7f      	ldr	r3, [pc, #508]	; (8001750 <HAL_RCC_OscConfig+0x4d0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7e      	ldr	r2, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x4d0>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7ff fba5 	bl	8000cac <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001566:	f7ff fba1 	bl	8000cac <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e120      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001578:	4b75      	ldr	r3, [pc, #468]	; (8001750 <HAL_RCC_OscConfig+0x4d0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x31a>
 800158c:	4b6f      	ldr	r3, [pc, #444]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a6e      	ldr	r2, [pc, #440]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	e02d      	b.n	80015f6 <HAL_RCC_OscConfig+0x376>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x33c>
 80015a2:	4b6a      	ldr	r3, [pc, #424]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a69      	ldr	r2, [pc, #420]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a66      	ldr	r2, [pc, #408]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	e01c      	b.n	80015f6 <HAL_RCC_OscConfig+0x376>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x35e>
 80015c4:	4b61      	ldr	r3, [pc, #388]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a60      	ldr	r2, [pc, #384]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	4b5e      	ldr	r3, [pc, #376]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a5d      	ldr	r2, [pc, #372]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e00b      	b.n	80015f6 <HAL_RCC_OscConfig+0x376>
 80015de:	4b5b      	ldr	r3, [pc, #364]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a5a      	ldr	r2, [pc, #360]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ea:	4b58      	ldr	r3, [pc, #352]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a57      	ldr	r2, [pc, #348]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb55 	bl	8000cac <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb51 	bl	8000cac <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0ce      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ee      	beq.n	8001606 <HAL_RCC_OscConfig+0x386>
 8001628:	e014      	b.n	8001654 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff fb3f 	bl	8000cac <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fb3b 	bl	8000cac <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0b8      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	4b40      	ldr	r3, [pc, #256]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a3b      	ldr	r2, [pc, #236]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80a4 	beq.w	80017b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d06b      	beq.n	8001754 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d149      	bne.n	8001718 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800168a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb0c 	bl	8000cac <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb08 	bl	8000cac <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e087      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	4313      	orrs	r3, r2
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fadc 	bl	8000cac <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fad8 	bl	8000cac <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e057      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x478>
 8001716:	e04f      	b.n	80017b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800171e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fac2 	bl	8000cac <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fabe 	bl	8000cac <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e03d      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x4ac>
 800174a:	e035      	b.n	80017b8 <HAL_RCC_OscConfig+0x538>
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x544>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d028      	beq.n	80017b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d121      	bne.n	80017b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d11a      	bne.n	80017b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800178a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800178c:	4293      	cmp	r3, r2
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	3b01      	subs	r3, #1
 800179e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0d0      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b67      	ldr	r3, [pc, #412]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 020f 	bic.w	r2, r3, #15
 80017f6:	4965      	ldr	r1, [pc, #404]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d040      	beq.n	80018ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e073      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06b      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4936      	ldr	r1, [pc, #216]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018bc:	f7ff f9f6 	bl	8000cac <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f9f2 	bl	8000cac <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e053      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d210      	bcs.n	800191c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 020f 	bic.w	r2, r3, #15
 8001902:	4922      	ldr	r1, [pc, #136]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f821 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x1cc>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x1d0>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1d4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe ff8c 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00
 8001990:	40023800 	.word	0x40023800
 8001994:	08006070 	.word	0x08006070
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019a6:	2100      	movs	r1, #0
 80019a8:	6079      	str	r1, [r7, #4]
 80019aa:	2100      	movs	r1, #0
 80019ac:	60f9      	str	r1, [r7, #12]
 80019ae:	2100      	movs	r1, #0
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019b2:	2100      	movs	r1, #0
 80019b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b6:	4952      	ldr	r1, [pc, #328]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80019b8:	6889      	ldr	r1, [r1, #8]
 80019ba:	f001 010c 	and.w	r1, r1, #12
 80019be:	2908      	cmp	r1, #8
 80019c0:	d00d      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x3e>
 80019c2:	2908      	cmp	r1, #8
 80019c4:	f200 8094 	bhi.w	8001af0 <HAL_RCC_GetSysClockFreq+0x150>
 80019c8:	2900      	cmp	r1, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0x32>
 80019cc:	2904      	cmp	r1, #4
 80019ce:	d003      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x38>
 80019d0:	e08e      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x164>)
 80019d4:	60bb      	str	r3, [r7, #8]
      break;
 80019d6:	e08e      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x168>)
 80019da:	60bb      	str	r3, [r7, #8]
      break;
 80019dc:	e08b      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019de:	4948      	ldr	r1, [pc, #288]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80019e0:	6849      	ldr	r1, [r1, #4]
 80019e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80019e6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019e8:	4945      	ldr	r1, [pc, #276]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ea:	6849      	ldr	r1, [r1, #4]
 80019ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80019f0:	2900      	cmp	r1, #0
 80019f2:	d024      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	4942      	ldr	r1, [pc, #264]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80019f6:	6849      	ldr	r1, [r1, #4]
 80019f8:	0989      	lsrs	r1, r1, #6
 80019fa:	4608      	mov	r0, r1
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a04:	f04f 0500 	mov.w	r5, #0
 8001a08:	ea00 0204 	and.w	r2, r0, r4
 8001a0c:	ea01 0305 	and.w	r3, r1, r5
 8001a10:	493d      	ldr	r1, [pc, #244]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a12:	fb01 f003 	mul.w	r0, r1, r3
 8001a16:	2100      	movs	r1, #0
 8001a18:	fb01 f102 	mul.w	r1, r1, r2
 8001a1c:	1844      	adds	r4, r0, r1
 8001a1e:	493a      	ldr	r1, [pc, #232]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a20:	fba2 0101 	umull	r0, r1, r2, r1
 8001a24:	1863      	adds	r3, r4, r1
 8001a26:	4619      	mov	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	f7fe fbee 	bl	8000210 <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e04a      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	461a      	mov	r2, r3
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	ea02 0400 	and.w	r4, r2, r0
 8001a56:	ea03 0501 	and.w	r5, r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	014b      	lsls	r3, r1, #5
 8001a68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a6c:	0142      	lsls	r2, r0, #5
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	1b00      	subs	r0, r0, r4
 8001a74:	eb61 0105 	sbc.w	r1, r1, r5
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	018b      	lsls	r3, r1, #6
 8001a82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a86:	0182      	lsls	r2, r0, #6
 8001a88:	1a12      	subs	r2, r2, r0
 8001a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	00d9      	lsls	r1, r3, #3
 8001a98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9c:	00d0      	lsls	r0, r2, #3
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	1912      	adds	r2, r2, r4
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0299      	lsls	r1, r3, #10
 8001ab2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ab6:	0290      	lsls	r0, r2, #10
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	f7fe fba2 	bl	8000210 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	60bb      	str	r3, [r7, #8]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x164>)
 8001af2:	60bb      	str	r3, [r7, #8]
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	68bb      	ldr	r3, [r7, #8]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bdb0      	pop	{r4, r5, r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	017d7840 	.word	0x017d7840

08001b0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0a9b      	lsrs	r3, r3, #10
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08006080 	.word	0x08006080

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b50:	f7ff ffdc 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0b5b      	lsrs	r3, r3, #13
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08006080 	.word	0x08006080

08001b74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	220f      	movs	r2, #15
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_RCC_GetClockConfig+0x60>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 020f 	and.w	r2, r3, #15
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d012      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c00:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a68      	ldr	r2, [pc, #416]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c0a:	6093      	str	r3, [r2, #8]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	4964      	ldr	r1, [pc, #400]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d017      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	4959      	ldr	r1, [pc, #356]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c50:	d101      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d017      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	494a      	ldr	r1, [pc, #296]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 808b 	beq.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a39      	ldr	r2, [pc, #228]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce0:	f7fe ffe4 	bl	8000cac <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7fe ffe0 	bl	8000cac <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e357      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d035      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d02e      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d114      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7fe ffa8 	bl	8000cac <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7fe ffa4 	bl	8000cac <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e319      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ee      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d8e:	d111      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d9e:	400b      	ands	r3, r1
 8001da0:	4901      	ldr	r1, [pc, #4]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40007000 	.word	0x40007000
 8001db0:	0ffffcff 	.word	0x0ffffcff
 8001db4:	4bb1      	ldr	r3, [pc, #708]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4ab0      	ldr	r2, [pc, #704]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dbe:	6093      	str	r3, [r2, #8]
 8001dc0:	4bae      	ldr	r3, [pc, #696]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	49ab      	ldr	r1, [pc, #684]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dde:	4ba7      	ldr	r3, [pc, #668]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de4:	4aa5      	ldr	r2, [pc, #660]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dee:	4ba3      	ldr	r3, [pc, #652]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001df0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	49a0      	ldr	r1, [pc, #640]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e0c:	4b9b      	ldr	r3, [pc, #620]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1a:	4998      	ldr	r1, [pc, #608]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e2e:	4b93      	ldr	r3, [pc, #588]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e3c:	498f      	ldr	r1, [pc, #572]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e50:	4b8a      	ldr	r3, [pc, #552]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e5e:	4987      	ldr	r1, [pc, #540]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e72:	4b82      	ldr	r3, [pc, #520]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	497e      	ldr	r1, [pc, #504]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e94:	4b79      	ldr	r3, [pc, #484]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4976      	ldr	r1, [pc, #472]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb6:	4b71      	ldr	r3, [pc, #452]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f023 020c 	bic.w	r2, r3, #12
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	496d      	ldr	r1, [pc, #436]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4965      	ldr	r1, [pc, #404]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f08:	495c      	ldr	r1, [pc, #368]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f1c:	4b57      	ldr	r3, [pc, #348]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	4954      	ldr	r1, [pc, #336]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	494b      	ldr	r1, [pc, #300]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f60:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	4943      	ldr	r1, [pc, #268]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f82:	4b3e      	ldr	r3, [pc, #248]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f90:	493a      	ldr	r1, [pc, #232]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fb2:	4932      	ldr	r1, [pc, #200]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d011      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd4:	4929      	ldr	r1, [pc, #164]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	4919      	ldr	r1, [pc, #100]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002038:	4910      	ldr	r1, [pc, #64]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d006      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80d9 	beq.w	8002206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800205a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800205e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002060:	f7fe fe24 	bl	8000cac <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002066:	e00b      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002068:	f7fe fe20 	bl	8000cac <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d904      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e197      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002080:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ed      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d021      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	2b00      	cmp	r3, #0
 800209e:	d11d      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020a0:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020ae:	4b61      	ldr	r3, [pc, #388]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b4:	0e1b      	lsrs	r3, r3, #24
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	019a      	lsls	r2, r3, #6
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	071b      	lsls	r3, r3, #28
 80020d4:	4957      	ldr	r1, [pc, #348]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02e      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002106:	d129      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211c:	0f1b      	lsrs	r3, r3, #28
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	019a      	lsls	r2, r3, #6
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	431a      	orrs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	071b      	lsls	r3, r3, #28
 800213c:	493d      	ldr	r1, [pc, #244]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214a:	f023 021f 	bic.w	r2, r3, #31
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	3b01      	subs	r3, #1
 8002154:	4937      	ldr	r1, [pc, #220]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01d      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002168:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800216a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216e:	0e1b      	lsrs	r3, r3, #24
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217c:	0f1b      	lsrs	r3, r3, #28
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	019a      	lsls	r2, r3, #6
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	431a      	orrs	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	071b      	lsls	r3, r3, #28
 800219c:	4925      	ldr	r1, [pc, #148]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d011      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	019a      	lsls	r2, r3, #6
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	071b      	lsls	r3, r3, #28
 80021cc:	4919      	ldr	r1, [pc, #100]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e0:	f7fe fd64 	bl	8000cac <HAL_GetTick>
 80021e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021e8:	f7fe fd60 	bl	8000cac <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0d7      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	f040 80cd 	bne.w	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221a:	f7fe fd47 	bl	8000cac <HAL_GetTick>
 800221e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002222:	f7fe fd43 	bl	8000cac <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	; 0x64
 800222e:	d903      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0ba      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002234:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002238:	4b5e      	ldr	r3, [pc, #376]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002244:	d0ed      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02e      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d12a      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800226e:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800227c:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	0f1b      	lsrs	r3, r3, #28
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	019a      	lsls	r2, r3, #6
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	071b      	lsls	r3, r3, #28
 80022a2:	4944      	ldr	r1, [pc, #272]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022aa:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	3b01      	subs	r3, #1
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	493d      	ldr	r1, [pc, #244]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d022      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d8:	d11d      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022da:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	0e1b      	lsrs	r3, r3, #24
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	0f1b      	lsrs	r3, r3, #28
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	019a      	lsls	r2, r3, #6
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	071b      	lsls	r3, r3, #28
 800230e:	4929      	ldr	r1, [pc, #164]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d028      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	0e1b      	lsrs	r3, r3, #24
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	0c1b      	lsrs	r3, r3, #16
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	019a      	lsls	r2, r3, #6
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	071b      	lsls	r3, r3, #28
 8002356:	4917      	ldr	r1, [pc, #92]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	4911      	ldr	r1, [pc, #68]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7fe fc94 	bl	8000cac <HAL_GetTick>
 8002384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002388:	f7fe fc90 	bl	8000cac <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e007      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023a6:	d1ef      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800

080023b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e049      	b.n	800245e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f841 	bl	8002466 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f000 fa00 	bl	80027fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d001      	beq.n	8002494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e054      	b.n	800253e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <HAL_TIM_Base_Start_IT+0xd0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d022      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024be:	d01d      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_TIM_Base_Start_IT+0xd4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d018      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_TIM_Base_Start_IT+0xd8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_TIM_Base_Start_IT+0xdc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_TIM_Base_Start_IT+0xe0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_TIM_Base_Start_IT+0xe4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_TIM_Base_Start_IT+0xe8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d115      	bne.n	8002528 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_TIM_Base_Start_IT+0xec>)
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d015      	beq.n	800253a <HAL_TIM_Base_Start_IT+0xbe>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d011      	beq.n	800253a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002526:	e008      	b.n	800253a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e000      	b.n	800253c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40010000 	.word	0x40010000
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800
 8002558:	40000c00 	.word	0x40000c00
 800255c:	40010400 	.word	0x40010400
 8002560:	40014000 	.word	0x40014000
 8002564:	40001800 	.word	0x40001800
 8002568:	00010007 	.word	0x00010007

0800256c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d122      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d11b      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0202 	mvn.w	r2, #2
 8002598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f905 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8f7 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f908 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d122      	bne.n	800261c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d11b      	bne.n	800261c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0204 	mvn.w	r2, #4
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8db 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8cd 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8de 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b08      	cmp	r3, #8
 8002628:	d122      	bne.n	8002670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d11b      	bne.n	8002670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0208 	mvn.w	r2, #8
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2204      	movs	r2, #4
 8002646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8b1 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 800265c:	e005      	b.n	800266a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8a3 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8b4 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b10      	cmp	r3, #16
 800267c:	d122      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b10      	cmp	r3, #16
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0210 	mvn.w	r2, #16
 8002694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2208      	movs	r2, #8
 800269a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f887 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f879 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f88a 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10e      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0201 	mvn.w	r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe f894 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d10e      	bne.n	800271c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d107      	bne.n	800271c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f91a 	bl	8002950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272a:	d10e      	bne.n	800274a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b80      	cmp	r3, #128	; 0x80
 8002738:	d107      	bne.n	800274a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f90d 	bl	8002964 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d10e      	bne.n	8002776 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d107      	bne.n	8002776 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800276e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f838 	bl	80027e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d10e      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b20      	cmp	r3, #32
 8002790:	d107      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f06f 0220 	mvn.w	r2, #32
 800279a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f8cd 	bl	800293c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a40      	ldr	r2, [pc, #256]	; (8002910 <TIM_Base_SetConfig+0x114>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <TIM_Base_SetConfig+0x40>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d00f      	beq.n	800283c <TIM_Base_SetConfig+0x40>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a3d      	ldr	r2, [pc, #244]	; (8002914 <TIM_Base_SetConfig+0x118>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00b      	beq.n	800283c <TIM_Base_SetConfig+0x40>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a3c      	ldr	r2, [pc, #240]	; (8002918 <TIM_Base_SetConfig+0x11c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x40>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3b      	ldr	r2, [pc, #236]	; (800291c <TIM_Base_SetConfig+0x120>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x40>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <TIM_Base_SetConfig+0x124>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2f      	ldr	r2, [pc, #188]	; (8002910 <TIM_Base_SetConfig+0x114>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02b      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d027      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <TIM_Base_SetConfig+0x118>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d023      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <TIM_Base_SetConfig+0x11c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2a      	ldr	r2, [pc, #168]	; (800291c <TIM_Base_SetConfig+0x120>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01b      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a29      	ldr	r2, [pc, #164]	; (8002920 <TIM_Base_SetConfig+0x124>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d017      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a28      	ldr	r2, [pc, #160]	; (8002924 <TIM_Base_SetConfig+0x128>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a27      	ldr	r2, [pc, #156]	; (8002928 <TIM_Base_SetConfig+0x12c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00f      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a26      	ldr	r2, [pc, #152]	; (800292c <TIM_Base_SetConfig+0x130>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00b      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a25      	ldr	r2, [pc, #148]	; (8002930 <TIM_Base_SetConfig+0x134>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d007      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a24      	ldr	r2, [pc, #144]	; (8002934 <TIM_Base_SetConfig+0x138>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d003      	beq.n	80028ae <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a23      	ldr	r2, [pc, #140]	; (8002938 <TIM_Base_SetConfig+0x13c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d108      	bne.n	80028c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <TIM_Base_SetConfig+0x114>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0xf8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <TIM_Base_SetConfig+0x124>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d103      	bne.n	80028fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	615a      	str	r2, [r3, #20]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40010000 	.word	0x40010000
 8002914:	40000400 	.word	0x40000400
 8002918:	40000800 	.word	0x40000800
 800291c:	40000c00 	.word	0x40000c00
 8002920:	40010400 	.word	0x40010400
 8002924:	40014000 	.word	0x40014000
 8002928:	40014400 	.word	0x40014400
 800292c:	40014800 	.word	0x40014800
 8002930:	40001800 	.word	0x40001800
 8002934:	40001c00 	.word	0x40001c00
 8002938:	40002000 	.word	0x40002000

0800293c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e040      	b.n	8002a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe f8da 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8c0 	bl	8002b3c <UART_SetConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fb16 	bl	8003000 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb9d 	bl	8003144 <UART_CheckIdleState>
 8002a0a:	4603      	mov	r3, r0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	f040 8081 	bne.w	8002b30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_UART_Transmit+0x26>
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e079      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_UART_Transmit+0x38>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e072      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2221      	movs	r2, #33	; 0x21
 8002a60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a62:	f7fe f923 	bl	8000cac <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a80:	d108      	bne.n	8002a94 <HAL_UART_Transmit+0x80>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e003      	b.n	8002a9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002aa4:	e02c      	b.n	8002b00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fb7a 	bl	80031aa <UART_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e038      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10b      	bne.n	8002ade <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	3302      	adds	r3, #2
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	e007      	b.n	8002aee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1cc      	bne.n	8002aa6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fb47 	bl	80031aa <UART_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e005      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4ba7      	ldr	r3, [pc, #668]	; (8002e04 <UART_SetConfig+0x2c8>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a95      	ldr	r2, [pc, #596]	; (8002e08 <UART_SetConfig+0x2cc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d120      	bne.n	8002bfa <UART_SetConfig+0xbe>
 8002bb8:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d816      	bhi.n	8002bf4 <UART_SetConfig+0xb8>
 8002bc6:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <UART_SetConfig+0x90>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002bdd 	.word	0x08002bdd
 8002bd0:	08002be9 	.word	0x08002be9
 8002bd4:	08002be3 	.word	0x08002be3
 8002bd8:	08002bef 	.word	0x08002bef
 8002bdc:	2301      	movs	r3, #1
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e14f      	b.n	8002e82 <UART_SetConfig+0x346>
 8002be2:	2302      	movs	r3, #2
 8002be4:	77fb      	strb	r3, [r7, #31]
 8002be6:	e14c      	b.n	8002e82 <UART_SetConfig+0x346>
 8002be8:	2304      	movs	r3, #4
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	e149      	b.n	8002e82 <UART_SetConfig+0x346>
 8002bee:	2308      	movs	r3, #8
 8002bf0:	77fb      	strb	r3, [r7, #31]
 8002bf2:	e146      	b.n	8002e82 <UART_SetConfig+0x346>
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e143      	b.n	8002e82 <UART_SetConfig+0x346>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a84      	ldr	r2, [pc, #528]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d132      	bne.n	8002c6a <UART_SetConfig+0x12e>
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d828      	bhi.n	8002c64 <UART_SetConfig+0x128>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <UART_SetConfig+0xdc>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c4d 	.word	0x08002c4d
 8002c1c:	08002c65 	.word	0x08002c65
 8002c20:	08002c65 	.word	0x08002c65
 8002c24:	08002c65 	.word	0x08002c65
 8002c28:	08002c59 	.word	0x08002c59
 8002c2c:	08002c65 	.word	0x08002c65
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002c65 	.word	0x08002c65
 8002c38:	08002c53 	.word	0x08002c53
 8002c3c:	08002c65 	.word	0x08002c65
 8002c40:	08002c65 	.word	0x08002c65
 8002c44:	08002c65 	.word	0x08002c65
 8002c48:	08002c5f 	.word	0x08002c5f
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e117      	b.n	8002e82 <UART_SetConfig+0x346>
 8002c52:	2302      	movs	r3, #2
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e114      	b.n	8002e82 <UART_SetConfig+0x346>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e111      	b.n	8002e82 <UART_SetConfig+0x346>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	e10e      	b.n	8002e82 <UART_SetConfig+0x346>
 8002c64:	2310      	movs	r3, #16
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e10b      	b.n	8002e82 <UART_SetConfig+0x346>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a69      	ldr	r2, [pc, #420]	; (8002e14 <UART_SetConfig+0x2d8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d120      	bne.n	8002cb6 <UART_SetConfig+0x17a>
 8002c74:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c7e:	2b30      	cmp	r3, #48	; 0x30
 8002c80:	d013      	beq.n	8002caa <UART_SetConfig+0x16e>
 8002c82:	2b30      	cmp	r3, #48	; 0x30
 8002c84:	d814      	bhi.n	8002cb0 <UART_SetConfig+0x174>
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d009      	beq.n	8002c9e <UART_SetConfig+0x162>
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d810      	bhi.n	8002cb0 <UART_SetConfig+0x174>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <UART_SetConfig+0x15c>
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d006      	beq.n	8002ca4 <UART_SetConfig+0x168>
 8002c96:	e00b      	b.n	8002cb0 <UART_SetConfig+0x174>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e0f1      	b.n	8002e82 <UART_SetConfig+0x346>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	77fb      	strb	r3, [r7, #31]
 8002ca2:	e0ee      	b.n	8002e82 <UART_SetConfig+0x346>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	77fb      	strb	r3, [r7, #31]
 8002ca8:	e0eb      	b.n	8002e82 <UART_SetConfig+0x346>
 8002caa:	2308      	movs	r3, #8
 8002cac:	77fb      	strb	r3, [r7, #31]
 8002cae:	e0e8      	b.n	8002e82 <UART_SetConfig+0x346>
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e0e5      	b.n	8002e82 <UART_SetConfig+0x346>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <UART_SetConfig+0x2dc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d120      	bne.n	8002d02 <UART_SetConfig+0x1c6>
 8002cc0:	4b52      	ldr	r3, [pc, #328]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cca:	2bc0      	cmp	r3, #192	; 0xc0
 8002ccc:	d013      	beq.n	8002cf6 <UART_SetConfig+0x1ba>
 8002cce:	2bc0      	cmp	r3, #192	; 0xc0
 8002cd0:	d814      	bhi.n	8002cfc <UART_SetConfig+0x1c0>
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d009      	beq.n	8002cea <UART_SetConfig+0x1ae>
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d810      	bhi.n	8002cfc <UART_SetConfig+0x1c0>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <UART_SetConfig+0x1a8>
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d006      	beq.n	8002cf0 <UART_SetConfig+0x1b4>
 8002ce2:	e00b      	b.n	8002cfc <UART_SetConfig+0x1c0>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e0cb      	b.n	8002e82 <UART_SetConfig+0x346>
 8002cea:	2302      	movs	r3, #2
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e0c8      	b.n	8002e82 <UART_SetConfig+0x346>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e0c5      	b.n	8002e82 <UART_SetConfig+0x346>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e0c2      	b.n	8002e82 <UART_SetConfig+0x346>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e0bf      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <UART_SetConfig+0x2e0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d125      	bne.n	8002d58 <UART_SetConfig+0x21c>
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d1a:	d017      	beq.n	8002d4c <UART_SetConfig+0x210>
 8002d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d20:	d817      	bhi.n	8002d52 <UART_SetConfig+0x216>
 8002d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d26:	d00b      	beq.n	8002d40 <UART_SetConfig+0x204>
 8002d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2c:	d811      	bhi.n	8002d52 <UART_SetConfig+0x216>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <UART_SetConfig+0x1fe>
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d36:	d006      	beq.n	8002d46 <UART_SetConfig+0x20a>
 8002d38:	e00b      	b.n	8002d52 <UART_SetConfig+0x216>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e0a0      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d40:	2302      	movs	r3, #2
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e09d      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d46:	2304      	movs	r3, #4
 8002d48:	77fb      	strb	r3, [r7, #31]
 8002d4a:	e09a      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e097      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d52:	2310      	movs	r3, #16
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e094      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <UART_SetConfig+0x2e4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d125      	bne.n	8002dae <UART_SetConfig+0x272>
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d70:	d017      	beq.n	8002da2 <UART_SetConfig+0x266>
 8002d72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d76:	d817      	bhi.n	8002da8 <UART_SetConfig+0x26c>
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7c:	d00b      	beq.n	8002d96 <UART_SetConfig+0x25a>
 8002d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d82:	d811      	bhi.n	8002da8 <UART_SetConfig+0x26c>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <UART_SetConfig+0x254>
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8c:	d006      	beq.n	8002d9c <UART_SetConfig+0x260>
 8002d8e:	e00b      	b.n	8002da8 <UART_SetConfig+0x26c>
 8002d90:	2301      	movs	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e075      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d96:	2302      	movs	r3, #2
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e072      	b.n	8002e82 <UART_SetConfig+0x346>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e06f      	b.n	8002e82 <UART_SetConfig+0x346>
 8002da2:	2308      	movs	r3, #8
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e06c      	b.n	8002e82 <UART_SetConfig+0x346>
 8002da8:	2310      	movs	r3, #16
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e069      	b.n	8002e82 <UART_SetConfig+0x346>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <UART_SetConfig+0x2e8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d137      	bne.n	8002e28 <UART_SetConfig+0x2ec>
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dc6:	d017      	beq.n	8002df8 <UART_SetConfig+0x2bc>
 8002dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dcc:	d817      	bhi.n	8002dfe <UART_SetConfig+0x2c2>
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d00b      	beq.n	8002dec <UART_SetConfig+0x2b0>
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd8:	d811      	bhi.n	8002dfe <UART_SetConfig+0x2c2>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <UART_SetConfig+0x2aa>
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	d006      	beq.n	8002df2 <UART_SetConfig+0x2b6>
 8002de4:	e00b      	b.n	8002dfe <UART_SetConfig+0x2c2>
 8002de6:	2300      	movs	r3, #0
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	e04a      	b.n	8002e82 <UART_SetConfig+0x346>
 8002dec:	2302      	movs	r3, #2
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e047      	b.n	8002e82 <UART_SetConfig+0x346>
 8002df2:	2304      	movs	r3, #4
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e044      	b.n	8002e82 <UART_SetConfig+0x346>
 8002df8:	2308      	movs	r3, #8
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e041      	b.n	8002e82 <UART_SetConfig+0x346>
 8002dfe:	2310      	movs	r3, #16
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e03e      	b.n	8002e82 <UART_SetConfig+0x346>
 8002e04:	efff69f3 	.word	0xefff69f3
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40004400 	.word	0x40004400
 8002e14:	40004800 	.word	0x40004800
 8002e18:	40004c00 	.word	0x40004c00
 8002e1c:	40005000 	.word	0x40005000
 8002e20:	40011400 	.word	0x40011400
 8002e24:	40007800 	.word	0x40007800
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <UART_SetConfig+0x4b8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d125      	bne.n	8002e7e <UART_SetConfig+0x342>
 8002e32:	4b71      	ldr	r3, [pc, #452]	; (8002ff8 <UART_SetConfig+0x4bc>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e40:	d017      	beq.n	8002e72 <UART_SetConfig+0x336>
 8002e42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e46:	d817      	bhi.n	8002e78 <UART_SetConfig+0x33c>
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4c:	d00b      	beq.n	8002e66 <UART_SetConfig+0x32a>
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	d811      	bhi.n	8002e78 <UART_SetConfig+0x33c>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <UART_SetConfig+0x324>
 8002e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5c:	d006      	beq.n	8002e6c <UART_SetConfig+0x330>
 8002e5e:	e00b      	b.n	8002e78 <UART_SetConfig+0x33c>
 8002e60:	2300      	movs	r3, #0
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e00d      	b.n	8002e82 <UART_SetConfig+0x346>
 8002e66:	2302      	movs	r3, #2
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e00a      	b.n	8002e82 <UART_SetConfig+0x346>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e007      	b.n	8002e82 <UART_SetConfig+0x346>
 8002e72:	2308      	movs	r3, #8
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e004      	b.n	8002e82 <UART_SetConfig+0x346>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e001      	b.n	8002e82 <UART_SetConfig+0x346>
 8002e7e:	2310      	movs	r3, #16
 8002e80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e8a:	d15b      	bne.n	8002f44 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002e8c:	7ffb      	ldrb	r3, [r7, #31]
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d827      	bhi.n	8002ee2 <UART_SetConfig+0x3a6>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <UART_SetConfig+0x35c>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ebd 	.word	0x08002ebd
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08002ee3 	.word	0x08002ee3
 8002ea8:	08002ed3 	.word	0x08002ed3
 8002eac:	08002ee3 	.word	0x08002ee3
 8002eb0:	08002ee3 	.word	0x08002ee3
 8002eb4:	08002ee3 	.word	0x08002ee3
 8002eb8:	08002edb 	.word	0x08002edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7fe fe32 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	61b8      	str	r0, [r7, #24]
        break;
 8002ec2:	e013      	b.n	8002eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ec4:	f7fe fe42 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002ec8:	61b8      	str	r0, [r7, #24]
        break;
 8002eca:	e00f      	b.n	8002eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <UART_SetConfig+0x4c0>)
 8002ece:	61bb      	str	r3, [r7, #24]
        break;
 8002ed0:	e00c      	b.n	8002eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed2:	f7fe fd65 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 8002ed6:	61b8      	str	r0, [r7, #24]
        break;
 8002ed8:	e008      	b.n	8002eec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	61bb      	str	r3, [r7, #24]
        break;
 8002ee0:	e004      	b.n	8002eec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8002eea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d074      	beq.n	8002fdc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	005a      	lsls	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b0f      	cmp	r3, #15
 8002f0e:	d916      	bls.n	8002f3e <UART_SetConfig+0x402>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f16:	d212      	bcs.n	8002f3e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f023 030f 	bic.w	r3, r3, #15
 8002f20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	89fa      	ldrh	r2, [r7, #14]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	e04e      	b.n	8002fdc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77bb      	strb	r3, [r7, #30]
 8002f42:	e04b      	b.n	8002fdc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f44:	7ffb      	ldrb	r3, [r7, #31]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d827      	bhi.n	8002f9a <UART_SetConfig+0x45e>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <UART_SetConfig+0x414>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f85 	.word	0x08002f85
 8002f5c:	08002f9b 	.word	0x08002f9b
 8002f60:	08002f8b 	.word	0x08002f8b
 8002f64:	08002f9b 	.word	0x08002f9b
 8002f68:	08002f9b 	.word	0x08002f9b
 8002f6c:	08002f9b 	.word	0x08002f9b
 8002f70:	08002f93 	.word	0x08002f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7fe fdd6 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002f78:	61b8      	str	r0, [r7, #24]
        break;
 8002f7a:	e013      	b.n	8002fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7fe fde6 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002f80:	61b8      	str	r0, [r7, #24]
        break;
 8002f82:	e00f      	b.n	8002fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <UART_SetConfig+0x4c0>)
 8002f86:	61bb      	str	r3, [r7, #24]
        break;
 8002f88:	e00c      	b.n	8002fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8a:	f7fe fd09 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	61b8      	str	r0, [r7, #24]
        break;
 8002f90:	e008      	b.n	8002fa4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f96:	61bb      	str	r3, [r7, #24]
        break;
 8002f98:	e004      	b.n	8002fa4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8002fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	085a      	lsrs	r2, r3, #1
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b0f      	cmp	r3, #15
 8002fc4:	d908      	bls.n	8002fd8 <UART_SetConfig+0x49c>
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d204      	bcs.n	8002fd8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	e001      	b.n	8002fdc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fe8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40007c00 	.word	0x40007c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	00f42400 	.word	0x00f42400

08003000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01a      	beq.n	8003116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030fe:	d10a      	bne.n	8003116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003154:	f7fd fdaa 	bl	8000cac <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d10e      	bne.n	8003186 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f817 	bl	80031aa <UART_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e00d      	b.n	80031a2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	4613      	mov	r3, r2
 80031b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ba:	e05e      	b.n	800327a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d05a      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fd fd72 	bl	8000cac <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <UART_WaitOnFlagUntilTimeout+0x30>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11b      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e043      	b.n	800329a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02c      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322e:	d124      	bne.n	800327a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003238:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003248:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e00f      	b.n	800329a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	429a      	cmp	r2, r3
 8003296:	d091      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b4:	2b84      	cmp	r3, #132	; 0x84
 80032b6:	d005      	beq.n	80032c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	3303      	adds	r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032d6:	f000 fee7 	bl	80040a8 <vTaskStartScheduler>
  
  return osOK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}

080032e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d020      	beq.n	8003334 <osThreadCreate+0x54>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01c      	beq.n	8003334 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685c      	ldr	r4, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681d      	ldr	r5, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691e      	ldr	r6, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ffc8 	bl	80032a2 <makeFreeRtosPriority>
 8003312:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800331c:	9202      	str	r2, [sp, #8]
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	9100      	str	r1, [sp, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	4632      	mov	r2, r6
 8003326:	4629      	mov	r1, r5
 8003328:	4620      	mov	r0, r4
 800332a:	f000 fcd5 	bl	8003cd8 <xTaskCreateStatic>
 800332e:	4603      	mov	r3, r0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e01c      	b.n	800336e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685c      	ldr	r4, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003340:	b29e      	uxth	r6, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ffaa 	bl	80032a2 <makeFreeRtosPriority>
 800334e:	4602      	mov	r2, r0
 8003350:	f107 030c 	add.w	r3, r7, #12
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	9200      	str	r2, [sp, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4632      	mov	r2, r6
 800335c:	4629      	mov	r1, r5
 800335e:	4620      	mov	r0, r4
 8003360:	f000 fd1d 	bl	8003d9e <xTaskCreate>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003378 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <osDelay+0x16>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	e000      	b.n	8003390 <osDelay+0x18>
 800338e:	2301      	movs	r3, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fe53 	bl	800403c <vTaskDelay>
  
  return osOK;
 8003396:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f103 0208 	add.w	r2, r3, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0208 	add.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e00c      	b.n	800347c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3308      	adds	r3, #8
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e002      	b.n	8003470 <vListInsert+0x2e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	d2f6      	bcs.n	800346a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6852      	ldr	r2, [r2, #4]
 80034d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d103      	bne.n	80034e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10c      	bne.n	8003536 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	b672      	cpsid	i
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	b662      	cpsie	i
 8003530:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003536:	f001 fd29 	bl	8004f8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	441a      	add	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	3b01      	subs	r3, #1
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	441a      	add	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d114      	bne.n	80035b6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3310      	adds	r3, #16
 8003598:	4618      	mov	r0, r3
 800359a:	f000 ffe3 	bl	8004564 <xTaskRemoveFromEventList>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <xQueueGenericReset+0xd0>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	e009      	b.n	80035ca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3310      	adds	r3, #16
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fef0 	bl	80033a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3324      	adds	r3, #36	; 0x24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff feeb 	bl	80033a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035ca:	f001 fd13 	bl	8004ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035ce:	2301      	movs	r3, #1
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10c      	bne.n	800360a <xQueueGenericCreate+0x2e>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	b672      	cpsid	i
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	b662      	cpsie	i
 8003604:	613b      	str	r3, [r7, #16]
}
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	e004      	b.n	8003620 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3348      	adds	r3, #72	; 0x48
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fd99 	bl	800515c <pvPortMalloc>
 800362a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d011      	beq.n	8003656 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3348      	adds	r3, #72	; 0x48
 800363a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003644:	79fa      	ldrb	r2, [r7, #7]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f805 	bl	8003660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003656:	69bb      	ldr	r3, [r7, #24]
	}
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e002      	b.n	8003682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800368e:	2101      	movs	r1, #1
 8003690:	69b8      	ldr	r0, [r7, #24]
 8003692:	f7ff ff39 	bl	8003508 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036ae:	2300      	movs	r3, #0
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10c      	bne.n	80036d6 <xQueueGenericSend+0x36>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	b672      	cpsid	i
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	b662      	cpsie	i
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <xQueueGenericSend+0x44>
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <xQueueGenericSend+0x48>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <xQueueGenericSend+0x4a>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <xQueueGenericSend+0x68>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	b672      	cpsid	i
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	b662      	cpsie	i
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d103      	bne.n	8003716 <xQueueGenericSend+0x76>
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <xQueueGenericSend+0x7a>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericSend+0x7c>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10c      	bne.n	800373a <xQueueGenericSend+0x9a>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	b672      	cpsid	i
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	b662      	cpsie	i
 8003734:	623b      	str	r3, [r7, #32]
}
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800373a:	f001 f8db 	bl	80048f4 <xTaskGetSchedulerState>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <xQueueGenericSend+0xaa>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <xQueueGenericSend+0xae>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <xQueueGenericSend+0xb0>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10c      	bne.n	800376e <xQueueGenericSend+0xce>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	b672      	cpsid	i
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	b662      	cpsie	i
 8003768:	61fb      	str	r3, [r7, #28]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800376e:	f001 fc0d 	bl	8004f8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <xQueueGenericSend+0xe4>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d129      	bne.n	80037d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800378a:	f000 f9bb 	bl	8003b04 <prvCopyDataToQueue>
 800378e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fee1 	bl	8004564 <xTaskRemoveFromEventList>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037a8:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <xQueueGenericSend+0x208>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	e00a      	b.n	80037d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037c0:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <xQueueGenericSend+0x208>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037d0:	f001 fc10 	bl	8004ff4 <vPortExitCritical>
				return pdPASS;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e063      	b.n	80038a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037de:	f001 fc09 	bl	8004ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e05c      	b.n	80038a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ff1b 	bl	800462c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037fa:	f001 fbfb 	bl	8004ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037fe:	f000 fcc1 	bl	8004184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003802:	f001 fbc3 	bl	8004f8c <vPortEnterCritical>
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800380c:	b25b      	sxtb	r3, r3
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d103      	bne.n	800381c <xQueueGenericSend+0x17c>
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003822:	b25b      	sxtb	r3, r3
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d103      	bne.n	8003832 <xQueueGenericSend+0x192>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003832:	f001 fbdf 	bl	8004ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003836:	1d3a      	adds	r2, r7, #4
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 ff0a 	bl	8004658 <xTaskCheckForTimeOut>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d124      	bne.n	8003894 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800384a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800384c:	f000 fa2c 	bl	8003ca8 <prvIsQueueFull>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	3310      	adds	r3, #16
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fe5a 	bl	8004518 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003866:	f000 f9b7 	bl	8003bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800386a:	f000 fc99 	bl	80041a0 <xTaskResumeAll>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af7c 	bne.w	800376e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <xQueueGenericSend+0x208>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	e772      	b.n	800376e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 f9a5 	bl	8003bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800388e:	f000 fc87 	bl	80041a0 <xTaskResumeAll>
 8003892:	e76c      	b.n	800376e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003896:	f000 f99f 	bl	8003bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800389a:	f000 fc81 	bl	80041a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800389e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3738      	adds	r7, #56	; 0x38
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10c      	bne.n	80038e2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	b672      	cpsid	i
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	b662      	cpsie	i
 80038dc:	623b      	str	r3, [r7, #32]
}
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00c      	beq.n	8003904 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	b672      	cpsid	i
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	b662      	cpsie	i
 80038fe:	61fb      	str	r3, [r7, #28]
}
 8003900:	bf00      	nop
 8003902:	e7fe      	b.n	8003902 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003904:	f000 fff6 	bl	80048f4 <xTaskGetSchedulerState>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <xQueueSemaphoreTake+0x68>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <xQueueSemaphoreTake+0x6c>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <xQueueSemaphoreTake+0x6e>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	b672      	cpsid	i
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	b662      	cpsie	i
 8003932:	61bb      	str	r3, [r7, #24]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003938:	f001 fb28 	bl	8004f8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d024      	beq.n	8003992 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	1e5a      	subs	r2, r3, #1
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003958:	f001 f992 	bl	8004c80 <pvTaskIncrementMutexHeldCount>
 800395c:	4602      	mov	r2, r0
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00f      	beq.n	800398a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	3310      	adds	r3, #16
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fdf8 	bl	8004564 <xTaskRemoveFromEventList>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800397a:	4b55      	ldr	r3, [pc, #340]	; (8003ad0 <xQueueSemaphoreTake+0x224>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800398a:	f001 fb33 	bl	8004ff4 <vPortExitCritical>
				return pdPASS;
 800398e:	2301      	movs	r3, #1
 8003990:	e099      	b.n	8003ac6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d113      	bne.n	80039c0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	b672      	cpsid	i
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	b662      	cpsie	i
 80039b2:	617b      	str	r3, [r7, #20]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80039b8:	f001 fb1c 	bl	8004ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039bc:	2300      	movs	r3, #0
 80039be:	e082      	b.n	8003ac6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fe2e 	bl	800462c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039d4:	f001 fb0e 	bl	8004ff4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039d8:	f000 fbd4 	bl	8004184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039dc:	f001 fad6 	bl	8004f8c <vPortEnterCritical>
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d103      	bne.n	80039f6 <xQueueSemaphoreTake+0x14a>
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d103      	bne.n	8003a0c <xQueueSemaphoreTake+0x160>
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a0c:	f001 faf2 	bl	8004ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a10:	463a      	mov	r2, r7
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fe1d 	bl	8004658 <xTaskCheckForTimeOut>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d132      	bne.n	8003a8a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a26:	f000 f929 	bl	8003c7c <prvIsQueueEmpty>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d026      	beq.n	8003a7e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8003a38:	f001 faa8 	bl	8004f8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 ff75 	bl	8004930 <xTaskPriorityInherit>
 8003a46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003a48:	f001 fad4 	bl	8004ff4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	3324      	adds	r3, #36	; 0x24
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fd5f 	bl	8004518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a5c:	f000 f8bc 	bl	8003bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a60:	f000 fb9e 	bl	80041a0 <xTaskResumeAll>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f47f af66 	bne.w	8003938 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003a6c:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <xQueueSemaphoreTake+0x224>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	e75c      	b.n	8003938 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a80:	f000 f8aa 	bl	8003bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a84:	f000 fb8c 	bl	80041a0 <xTaskResumeAll>
 8003a88:	e756      	b.n	8003938 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a8c:	f000 f8a4 	bl	8003bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a90:	f000 fb86 	bl	80041a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a96:	f000 f8f1 	bl	8003c7c <prvIsQueueEmpty>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f43f af4b 	beq.w	8003938 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00d      	beq.n	8003ac4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8003aa8:	f001 fa70 	bl	8004f8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003aae:	f000 f811 	bl	8003ad4 <prvGetDisinheritPriorityAfterTimeout>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 f842 	bl	8004b44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ac0:	f001 fa98 	bl	8004ff4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3738      	adds	r7, #56	; 0x38
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1c3 0307 	rsb	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e001      	b.n	8003af6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003af6:	68fb      	ldr	r3, [r7, #12]
	}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d14d      	bne.n	8003bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ff7e 	bl	8004a30 <xTaskPriorityDisinherit>
 8003b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	e043      	b.n	8003bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d119      	bne.n	8003b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6858      	ldr	r0, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	f001 fe0b 	bl	800576a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d32b      	bcc.n	8003bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	e026      	b.n	8003bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68d8      	ldr	r0, [r3, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	461a      	mov	r2, r3
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	f001 fdf1 	bl	800576a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	425b      	negs	r3, r3
 8003b92:	441a      	add	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	425b      	negs	r3, r3
 8003bae:	441a      	add	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d105      	bne.n	8003bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be0:	f001 f9d4 	bl	8004f8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bec:	e011      	b.n	8003c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3324      	adds	r3, #36	; 0x24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fcb2 	bl	8004564 <xTaskRemoveFromEventList>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c06:	f000 fd8d 	bl	8004724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dce9      	bgt.n	8003bee <prvUnlockQueue+0x16>
 8003c1a:	e000      	b.n	8003c1e <prvUnlockQueue+0x46>
					break;
 8003c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c26:	f001 f9e5 	bl	8004ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c2a:	f001 f9af 	bl	8004f8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c36:	e011      	b.n	8003c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d012      	beq.n	8003c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3310      	adds	r3, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fc8d 	bl	8004564 <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c50:	f000 fd68 	bl	8004724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c54:	7bbb      	ldrb	r3, [r7, #14]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	dce9      	bgt.n	8003c38 <prvUnlockQueue+0x60>
 8003c64:	e000      	b.n	8003c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c70:	f001 f9c0 	bl	8004ff4 <vPortExitCritical>
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c84:	f001 f982 	bl	8004f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e001      	b.n	8003c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 f9ab 	bl	8004ff4 <vPortExitCritical>

	return xReturn;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb0:	f001 f96c 	bl	8004f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d102      	bne.n	8003cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e001      	b.n	8003cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f001 f993 	bl	8004ff4 <vPortExitCritical>

	return xReturn;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08e      	sub	sp, #56	; 0x38
 8003cdc:	af04      	add	r7, sp, #16
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10c      	bne.n	8003d06 <xTaskCreateStatic+0x2e>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	b672      	cpsid	i
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	b662      	cpsie	i
 8003d00:	623b      	str	r3, [r7, #32]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10c      	bne.n	8003d26 <xTaskCreateStatic+0x4e>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	b672      	cpsid	i
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	b662      	cpsie	i
 8003d20:	61fb      	str	r3, [r7, #28]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d26:	23b4      	movs	r3, #180	; 0xb4
 8003d28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2bb4      	cmp	r3, #180	; 0xb4
 8003d2e:	d00c      	beq.n	8003d4a <xTaskCreateStatic+0x72>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	b672      	cpsid	i
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	b662      	cpsie	i
 8003d44:	61bb      	str	r3, [r7, #24]
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01e      	beq.n	8003d90 <xTaskCreateStatic+0xb8>
 8003d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01b      	beq.n	8003d90 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9303      	str	r3, [sp, #12]
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f850 	bl	8003e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d8a:	f000 f8ed 	bl	8003f68 <prvAddNewTaskToReadyList>
 8003d8e:	e001      	b.n	8003d94 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d94:	697b      	ldr	r3, [r7, #20]
	}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3728      	adds	r7, #40	; 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b08c      	sub	sp, #48	; 0x30
 8003da2:	af04      	add	r7, sp, #16
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f9d2 	bl	800515c <pvPortMalloc>
 8003db8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dc0:	20b4      	movs	r0, #180	; 0xb4
 8003dc2:	f001 f9cb 	bl	800515c <pvPortMalloc>
 8003dc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd4:	e005      	b.n	8003de2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f001 fa8a 	bl	80052f0 <vPortFree>
 8003ddc:	e001      	b.n	8003de2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d017      	beq.n	8003e18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9303      	str	r3, [sp, #12]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	9302      	str	r3, [sp, #8]
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f80e 	bl	8003e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e0c:	69f8      	ldr	r0, [r7, #28]
 8003e0e:	f000 f8ab 	bl	8003f68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e002      	b.n	8003e1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003e40:	440b      	add	r3, r1
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f023 0307 	bic.w	r3, r3, #7
 8003e4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00c      	beq.n	8003e74 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	b672      	cpsid	i
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	b662      	cpsie	i
 8003e6e:	617b      	str	r3, [r7, #20]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01f      	beq.n	8003eba <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e012      	b.n	8003ea6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	7819      	ldrb	r1, [r3, #0]
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3334      	adds	r3, #52	; 0x34
 8003e90:	460a      	mov	r2, r1
 8003e92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d006      	beq.n	8003eae <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d9e9      	bls.n	8003e80 <prvInitialiseNewTask+0x58>
 8003eac:	e000      	b.n	8003eb0 <prvInitialiseNewTask+0x88>
			{
				break;
 8003eae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb8:	e003      	b.n	8003ec2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d901      	bls.n	8003ecc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ec8:	2306      	movs	r3, #6
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	2200      	movs	r2, #0
 8003edc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fa7c 	bl	80033e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	3318      	adds	r3, #24
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fa77 	bl	80033e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	f1c3 0207 	rsb	r2, r3, #7
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	334c      	adds	r3, #76	; 0x4c
 8003f1c:	2260      	movs	r2, #96	; 0x60
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fc30 	bl	8005786 <memset>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	4a0c      	ldr	r2, [pc, #48]	; (8003f5c <prvInitialiseNewTask+0x134>)
 8003f2a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <prvInitialiseNewTask+0x138>)
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <prvInitialiseNewTask+0x13c>)
 8003f36:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	69b8      	ldr	r0, [r7, #24]
 8003f3e:	f000 ff19 	bl	8004d74 <pxPortInitialiseStack>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f54:	bf00      	nop
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	080060a8 	.word	0x080060a8
 8003f60:	080060c8 	.word	0x080060c8
 8003f64:	08006088 	.word	0x08006088

08003f68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f70:	f001 f80c 	bl	8004f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f74:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <prvAddNewTaskToReadyList+0xb8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	4a29      	ldr	r2, [pc, #164]	; (8004020 <prvAddNewTaskToReadyList+0xb8>)
 8003f7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f7e:	4b29      	ldr	r3, [pc, #164]	; (8004024 <prvAddNewTaskToReadyList+0xbc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f86:	4a27      	ldr	r2, [pc, #156]	; (8004024 <prvAddNewTaskToReadyList+0xbc>)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <prvAddNewTaskToReadyList+0xb8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d110      	bne.n	8003fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f94:	f000 fbea 	bl	800476c <prvInitialiseTaskLists>
 8003f98:	e00d      	b.n	8003fb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <prvAddNewTaskToReadyList+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <prvAddNewTaskToReadyList+0xbc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d802      	bhi.n	8003fb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <prvAddNewTaskToReadyList+0xbc>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <prvAddNewTaskToReadyList+0xc4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <prvAddNewTaskToReadyList+0xc4>)
 8003fbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <prvAddNewTaskToReadyList+0xc8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <prvAddNewTaskToReadyList+0xc8>)
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <prvAddNewTaskToReadyList+0xcc>)
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f7ff fa06 	bl	80033fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fee:	f001 f801 	bl	8004ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <prvAddNewTaskToReadyList+0xc0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00e      	beq.n	8004018 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <prvAddNewTaskToReadyList+0xbc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	429a      	cmp	r2, r3
 8004006:	d207      	bcs.n	8004018 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <prvAddNewTaskToReadyList+0xd0>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000448 	.word	0x20000448
 8004024:	20000348 	.word	0x20000348
 8004028:	20000454 	.word	0x20000454
 800402c:	20000464 	.word	0x20000464
 8004030:	20000450 	.word	0x20000450
 8004034:	2000034c 	.word	0x2000034c
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d019      	beq.n	8004082 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800404e:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <vTaskDelay+0x64>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <vTaskDelay+0x34>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	b672      	cpsid	i
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	b662      	cpsie	i
 800406a:	60bb      	str	r3, [r7, #8]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004070:	f000 f888 	bl	8004184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004074:	2100      	movs	r1, #0
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fe16 	bl	8004ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800407c:	f000 f890 	bl	80041a0 <xTaskResumeAll>
 8004080:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <vTaskDelay+0x68>)
 800408a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000470 	.word	0x20000470
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040b6:	463a      	mov	r2, r7
 80040b8:	1d39      	adds	r1, r7, #4
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc fa22 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040c4:	6839      	ldr	r1, [r7, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	9202      	str	r2, [sp, #8]
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2300      	movs	r3, #0
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	460a      	mov	r2, r1
 80040d6:	4923      	ldr	r1, [pc, #140]	; (8004164 <vTaskStartScheduler+0xbc>)
 80040d8:	4823      	ldr	r0, [pc, #140]	; (8004168 <vTaskStartScheduler+0xc0>)
 80040da:	f7ff fdfd 	bl	8003cd8 <xTaskCreateStatic>
 80040de:	4603      	mov	r3, r0
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <vTaskStartScheduler+0xc4>)
 80040e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040e4:	4b21      	ldr	r3, [pc, #132]	; (800416c <vTaskStartScheduler+0xc4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e001      	b.n	80040f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d11d      	bne.n	8004138 <vTaskStartScheduler+0x90>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	b672      	cpsid	i
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	b662      	cpsie	i
 8004110:	613b      	str	r3, [r7, #16]
}
 8004112:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004114:	4b16      	ldr	r3, [pc, #88]	; (8004170 <vTaskStartScheduler+0xc8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	334c      	adds	r3, #76	; 0x4c
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <vTaskStartScheduler+0xcc>)
 800411c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800411e:	4b16      	ldr	r3, [pc, #88]	; (8004178 <vTaskStartScheduler+0xd0>)
 8004120:	f04f 32ff 	mov.w	r2, #4294967295
 8004124:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <vTaskStartScheduler+0xd4>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <vTaskStartScheduler+0xd8>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004132:	f000 fead 	bl	8004e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004136:	e010      	b.n	800415a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d10c      	bne.n	800415a <vTaskStartScheduler+0xb2>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	b672      	cpsid	i
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	b662      	cpsie	i
 8004154:	60fb      	str	r3, [r7, #12]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <vTaskStartScheduler+0xb0>
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	08006068 	.word	0x08006068
 8004168:	0800473d 	.word	0x0800473d
 800416c:	2000046c 	.word	0x2000046c
 8004170:	20000348 	.word	0x20000348
 8004174:	20000010 	.word	0x20000010
 8004178:	20000468 	.word	0x20000468
 800417c:	20000454 	.word	0x20000454
 8004180:	2000044c 	.word	0x2000044c

08004184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <vTaskSuspendAll+0x18>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	4a03      	ldr	r2, [pc, #12]	; (800419c <vTaskSuspendAll+0x18>)
 8004190:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	20000470 	.word	0x20000470

080041a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041ae:	4b42      	ldr	r3, [pc, #264]	; (80042b8 <xTaskResumeAll+0x118>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <xTaskResumeAll+0x30>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	b672      	cpsid	i
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	b662      	cpsie	i
 80041ca:	603b      	str	r3, [r7, #0]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041d0:	f000 fedc 	bl	8004f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041d4:	4b38      	ldr	r3, [pc, #224]	; (80042b8 <xTaskResumeAll+0x118>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3b01      	subs	r3, #1
 80041da:	4a37      	ldr	r2, [pc, #220]	; (80042b8 <xTaskResumeAll+0x118>)
 80041dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041de:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <xTaskResumeAll+0x118>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d161      	bne.n	80042aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041e6:	4b35      	ldr	r3, [pc, #212]	; (80042bc <xTaskResumeAll+0x11c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d05d      	beq.n	80042aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ee:	e02e      	b.n	800424e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f0:	4b33      	ldr	r3, [pc, #204]	; (80042c0 <xTaskResumeAll+0x120>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff f959 	bl	80034b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f954 	bl	80034b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <xTaskResumeAll+0x124>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <xTaskResumeAll+0x124>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <xTaskResumeAll+0x128>)
 800422c:	441a      	add	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7ff f8e0 	bl	80033fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	4b23      	ldr	r3, [pc, #140]	; (80042cc <xTaskResumeAll+0x12c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <xTaskResumeAll+0x130>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800424e:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <xTaskResumeAll+0x120>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1cc      	bne.n	80041f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800425c:	f000 fb2a 	bl	80048b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004260:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <xTaskResumeAll+0x134>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d010      	beq.n	800428e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800426c:	f000 f836 	bl	80042dc <xTaskIncrementTick>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <xTaskResumeAll+0x130>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3b01      	subs	r3, #1
 8004280:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f1      	bne.n	800426c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <xTaskResumeAll+0x134>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <xTaskResumeAll+0x130>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004296:	2301      	movs	r3, #1
 8004298:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <xTaskResumeAll+0x138>)
 800429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042aa:	f000 fea3 	bl	8004ff4 <vPortExitCritical>

	return xAlreadyYielded;
 80042ae:	68bb      	ldr	r3, [r7, #8]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20000470 	.word	0x20000470
 80042bc:	20000448 	.word	0x20000448
 80042c0:	20000408 	.word	0x20000408
 80042c4:	20000450 	.word	0x20000450
 80042c8:	2000034c 	.word	0x2000034c
 80042cc:	20000348 	.word	0x20000348
 80042d0:	2000045c 	.word	0x2000045c
 80042d4:	20000458 	.word	0x20000458
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e6:	4b4f      	ldr	r3, [pc, #316]	; (8004424 <xTaskIncrementTick+0x148>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 808a 	bne.w	8004404 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042f0:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <xTaskIncrementTick+0x14c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042f8:	4a4b      	ldr	r2, [pc, #300]	; (8004428 <xTaskIncrementTick+0x14c>)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d122      	bne.n	800434a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004304:	4b49      	ldr	r3, [pc, #292]	; (800442c <xTaskIncrementTick+0x150>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <xTaskIncrementTick+0x4c>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	b672      	cpsid	i
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	b662      	cpsie	i
 8004322:	603b      	str	r3, [r7, #0]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <xTaskIncrementTick+0x4a>
 8004328:	4b40      	ldr	r3, [pc, #256]	; (800442c <xTaskIncrementTick+0x150>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b40      	ldr	r3, [pc, #256]	; (8004430 <xTaskIncrementTick+0x154>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a3e      	ldr	r2, [pc, #248]	; (800442c <xTaskIncrementTick+0x150>)
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4a3e      	ldr	r2, [pc, #248]	; (8004430 <xTaskIncrementTick+0x154>)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b3d      	ldr	r3, [pc, #244]	; (8004434 <xTaskIncrementTick+0x158>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <xTaskIncrementTick+0x158>)
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	f000 fab5 	bl	80048b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800434a:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <xTaskIncrementTick+0x15c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	429a      	cmp	r2, r3
 8004352:	d348      	bcc.n	80043e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004354:	4b35      	ldr	r3, [pc, #212]	; (800442c <xTaskIncrementTick+0x150>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <xTaskIncrementTick+0x15c>)
 8004360:	f04f 32ff 	mov.w	r2, #4294967295
 8004364:	601a      	str	r2, [r3, #0]
					break;
 8004366:	e03e      	b.n	80043e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004368:	4b30      	ldr	r3, [pc, #192]	; (800442c <xTaskIncrementTick+0x150>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d203      	bcs.n	8004388 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004380:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <xTaskIncrementTick+0x15c>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004386:	e02e      	b.n	80043e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3304      	adds	r3, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff f891 	bl	80034b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	3318      	adds	r3, #24
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff f888 	bl	80034b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	2201      	movs	r2, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <xTaskIncrementTick+0x160>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	4a22      	ldr	r2, [pc, #136]	; (800443c <xTaskIncrementTick+0x160>)
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <xTaskIncrementTick+0x164>)
 80043c4:	441a      	add	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7ff f814 	bl	80033fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <xTaskIncrementTick+0x168>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d3b9      	bcc.n	8004354 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e4:	e7b6      	b.n	8004354 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043e6:	4b17      	ldr	r3, [pc, #92]	; (8004444 <xTaskIncrementTick+0x168>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ec:	4914      	ldr	r1, [pc, #80]	; (8004440 <xTaskIncrementTick+0x164>)
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d907      	bls.n	800440e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80043fe:	2301      	movs	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e004      	b.n	800440e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004404:	4b10      	ldr	r3, [pc, #64]	; (8004448 <xTaskIncrementTick+0x16c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <xTaskIncrementTick+0x16c>)
 800440c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <xTaskIncrementTick+0x170>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004416:	2301      	movs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800441a:	697b      	ldr	r3, [r7, #20]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000470 	.word	0x20000470
 8004428:	2000044c 	.word	0x2000044c
 800442c:	20000400 	.word	0x20000400
 8004430:	20000404 	.word	0x20000404
 8004434:	20000460 	.word	0x20000460
 8004438:	20000468 	.word	0x20000468
 800443c:	20000450 	.word	0x20000450
 8004440:	2000034c 	.word	0x2000034c
 8004444:	20000348 	.word	0x20000348
 8004448:	20000458 	.word	0x20000458
 800444c:	2000045c 	.word	0x2000045c

08004450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004456:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <vTaskSwitchContext+0xb0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800445e:	4b29      	ldr	r3, [pc, #164]	; (8004504 <vTaskSwitchContext+0xb4>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004464:	e046      	b.n	80044f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004466:	4b27      	ldr	r3, [pc, #156]	; (8004504 <vTaskSwitchContext+0xb4>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <vTaskSwitchContext+0xb8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	f1c3 031f 	rsb	r3, r3, #31
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	4922      	ldr	r1, [pc, #136]	; (800450c <vTaskSwitchContext+0xbc>)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <vTaskSwitchContext+0x60>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	b672      	cpsid	i
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	b662      	cpsie	i
 80044aa:	607b      	str	r3, [r7, #4]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <vTaskSwitchContext+0x5e>
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <vTaskSwitchContext+0xbc>)
 80044bc:	4413      	add	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3308      	adds	r3, #8
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d104      	bne.n	80044e0 <vTaskSwitchContext+0x90>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <vTaskSwitchContext+0xc0>)
 80044e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <vTaskSwitchContext+0xc0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	334c      	adds	r3, #76	; 0x4c
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <vTaskSwitchContext+0xc4>)
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000470 	.word	0x20000470
 8004504:	2000045c 	.word	0x2000045c
 8004508:	20000450 	.word	0x20000450
 800450c:	2000034c 	.word	0x2000034c
 8004510:	20000348 	.word	0x20000348
 8004514:	20000010 	.word	0x20000010

08004518 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10c      	bne.n	8004542 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	b672      	cpsid	i
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	b662      	cpsie	i
 800453c:	60fb      	str	r3, [r7, #12]
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <vTaskPlaceOnEventList+0x48>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3318      	adds	r3, #24
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fe ff79 	bl	8003442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004550:	2101      	movs	r1, #1
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f000 fba8 	bl	8004ca8 <prvAddCurrentTaskToDelayedList>
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000348 	.word	0x20000348

08004564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10c      	bne.n	8004594 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	b672      	cpsid	i
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	b662      	cpsie	i
 800458e:	60fb      	str	r3, [r7, #12]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	3318      	adds	r3, #24
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe ff8b 	bl	80034b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <xTaskRemoveFromEventList+0xb0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11c      	bne.n	80045e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe ff82 	bl	80034b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	4b17      	ldr	r3, [pc, #92]	; (8004618 <xTaskRemoveFromEventList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <xTaskRemoveFromEventList+0xb4>)
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4a13      	ldr	r2, [pc, #76]	; (800461c <xTaskRemoveFromEventList+0xb8>)
 80045d0:	441a      	add	r2, r3
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fe ff0e 	bl	80033fa <vListInsertEnd>
 80045de:	e005      	b.n	80045ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	3318      	adds	r3, #24
 80045e4:	4619      	mov	r1, r3
 80045e6:	480e      	ldr	r0, [pc, #56]	; (8004620 <xTaskRemoveFromEventList+0xbc>)
 80045e8:	f7fe ff07 	bl	80033fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <xTaskRemoveFromEventList+0xc0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d905      	bls.n	8004606 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045fa:	2301      	movs	r3, #1
 80045fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <xTaskRemoveFromEventList+0xc4>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e001      	b.n	800460a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800460a:	697b      	ldr	r3, [r7, #20]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000470 	.word	0x20000470
 8004618:	20000450 	.word	0x20000450
 800461c:	2000034c 	.word	0x2000034c
 8004620:	20000408 	.word	0x20000408
 8004624:	20000348 	.word	0x20000348
 8004628:	2000045c 	.word	0x2000045c

0800462c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <vTaskInternalSetTimeOutState+0x24>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <vTaskInternalSetTimeOutState+0x28>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	605a      	str	r2, [r3, #4]
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000460 	.word	0x20000460
 8004654:	2000044c 	.word	0x2000044c

08004658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10c      	bne.n	8004682 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	b672      	cpsid	i
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	b662      	cpsie	i
 800467c:	613b      	str	r3, [r7, #16]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10c      	bne.n	80046a2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	b672      	cpsid	i
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	b662      	cpsie	i
 800469c:	60fb      	str	r3, [r7, #12]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80046a2:	f000 fc73 	bl	8004f8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <xTaskCheckForTimeOut+0xc4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d102      	bne.n	80046c6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e023      	b.n	800470e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <xTaskCheckForTimeOut+0xc8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d007      	beq.n	80046e2 <xTaskCheckForTimeOut+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	e015      	b.n	800470e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d20b      	bcs.n	8004704 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff97 	bl	800462c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e004      	b.n	800470e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800470e:	f000 fc71 	bl	8004ff4 <vPortExitCritical>

	return xReturn;
 8004712:	69fb      	ldr	r3, [r7, #28]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	2000044c 	.word	0x2000044c
 8004720:	20000460 	.word	0x20000460

08004724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <vTaskMissedYield+0x14>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	2000045c 	.word	0x2000045c

0800473c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004744:	f000 f852 	bl	80047ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <prvIdleTask+0x28>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d9f9      	bls.n	8004744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <prvIdleTask+0x2c>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004760:	e7f0      	b.n	8004744 <prvIdleTask+0x8>
 8004762:	bf00      	nop
 8004764:	2000034c 	.word	0x2000034c
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	e00c      	b.n	8004792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <prvInitialiseTaskLists+0x60>)
 8004784:	4413      	add	r3, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fe0a 	bl	80033a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3301      	adds	r3, #1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b06      	cmp	r3, #6
 8004796:	d9ef      	bls.n	8004778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004798:	480d      	ldr	r0, [pc, #52]	; (80047d0 <prvInitialiseTaskLists+0x64>)
 800479a:	f7fe fe01 	bl	80033a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800479e:	480d      	ldr	r0, [pc, #52]	; (80047d4 <prvInitialiseTaskLists+0x68>)
 80047a0:	f7fe fdfe 	bl	80033a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047a4:	480c      	ldr	r0, [pc, #48]	; (80047d8 <prvInitialiseTaskLists+0x6c>)
 80047a6:	f7fe fdfb 	bl	80033a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047aa:	480c      	ldr	r0, [pc, #48]	; (80047dc <prvInitialiseTaskLists+0x70>)
 80047ac:	f7fe fdf8 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <prvInitialiseTaskLists+0x74>)
 80047b2:	f7fe fdf5 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <prvInitialiseTaskLists+0x78>)
 80047b8:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <prvInitialiseTaskLists+0x64>)
 80047ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvInitialiseTaskLists+0x7c>)
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <prvInitialiseTaskLists+0x68>)
 80047c0:	601a      	str	r2, [r3, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	2000034c 	.word	0x2000034c
 80047d0:	200003d8 	.word	0x200003d8
 80047d4:	200003ec 	.word	0x200003ec
 80047d8:	20000408 	.word	0x20000408
 80047dc:	2000041c 	.word	0x2000041c
 80047e0:	20000434 	.word	0x20000434
 80047e4:	20000400 	.word	0x20000400
 80047e8:	20000404 	.word	0x20000404

080047ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047f2:	e019      	b.n	8004828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047f4:	f000 fbca 	bl	8004f8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <prvCheckTasksWaitingTermination+0x50>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fe55 	bl	80034b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <prvCheckTasksWaitingTermination+0x54>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <prvCheckTasksWaitingTermination+0x54>)
 8004812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3b01      	subs	r3, #1
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 800481c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800481e:	f000 fbe9 	bl	8004ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f810 	bl	8004848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e1      	bne.n	80047f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	2000041c 	.word	0x2000041c
 8004840:	20000448 	.word	0x20000448
 8004844:	20000430 	.word	0x20000430

08004848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	334c      	adds	r3, #76	; 0x4c
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f87d 	bl	8005954 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fd41 	bl	80052f0 <vPortFree>
				vPortFree( pxTCB );
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fd3e 	bl	80052f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004874:	e01a      	b.n	80048ac <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d103      	bne.n	8004888 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fd35 	bl	80052f0 <vPortFree>
	}
 8004886:	e011      	b.n	80048ac <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800488e:	2b02      	cmp	r3, #2
 8004890:	d00c      	beq.n	80048ac <prvDeleteTCB+0x64>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	b672      	cpsid	i
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	b662      	cpsie	i
 80048a6:	60fb      	str	r3, [r7, #12]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <prvDeleteTCB+0x62>
	}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <prvResetNextTaskUnblockTime+0x38>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <prvResetNextTaskUnblockTime+0x3c>)
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048cc:	e008      	b.n	80048e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <prvResetNextTaskUnblockTime+0x38>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <prvResetNextTaskUnblockTime+0x3c>)
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	20000400 	.word	0x20000400
 80048f0:	20000468 	.word	0x20000468

080048f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <xTaskGetSchedulerState+0x34>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004902:	2301      	movs	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	e008      	b.n	800491a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <xTaskGetSchedulerState+0x38>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004910:	2302      	movs	r3, #2
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e001      	b.n	800491a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800491a:	687b      	ldr	r3, [r7, #4]
	}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	20000454 	.word	0x20000454
 800492c:	20000470 	.word	0x20000470

08004930 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d069      	beq.n	8004a1a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <xTaskPriorityInherit+0xf4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	429a      	cmp	r2, r3
 8004952:	d259      	bcs.n	8004a08 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	db06      	blt.n	800496a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495c:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <xTaskPriorityInherit+0xf4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	f1c3 0207 	rsb	r2, r3, #7
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6959      	ldr	r1, [r3, #20]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4a2b      	ldr	r2, [pc, #172]	; (8004a28 <xTaskPriorityInherit+0xf8>)
 800497c:	4413      	add	r3, r2
 800497e:	4299      	cmp	r1, r3
 8004980:	d13a      	bne.n	80049f8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	3304      	adds	r3, #4
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fd94 	bl	80034b4 <uxListRemove>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d115      	bne.n	80049be <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	4924      	ldr	r1, [pc, #144]	; (8004a28 <xTaskPriorityInherit+0xf8>)
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xTaskPriorityInherit+0x8e>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	2201      	movs	r2, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <xTaskPriorityInherit+0xfc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4013      	ands	r3, r2
 80049ba:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <xTaskPriorityInherit+0xfc>)
 80049bc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <xTaskPriorityInherit+0xf4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <xTaskPriorityInherit+0xfc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <xTaskPriorityInherit+0xfc>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <xTaskPriorityInherit+0xf8>)
 80049e8:	441a      	add	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe fd02 	bl	80033fa <vListInsertEnd>
 80049f6:	e004      	b.n	8004a02 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <xTaskPriorityInherit+0xf4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e008      	b.n	8004a1a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <xTaskPriorityInherit+0xf4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d201      	bcs.n	8004a1a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a16:	2301      	movs	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
	}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000348 	.word	0x20000348
 8004a28:	2000034c 	.word	0x2000034c
 8004a2c:	20000450 	.word	0x20000450

08004a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d072      	beq.n	8004b2c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a46:	4b3c      	ldr	r3, [pc, #240]	; (8004b38 <xTaskPriorityDisinherit+0x108>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d00c      	beq.n	8004a6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	b672      	cpsid	i
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	b662      	cpsie	i
 8004a64:	60fb      	str	r3, [r7, #12]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10c      	bne.n	8004a8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	b672      	cpsid	i
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	b662      	cpsie	i
 8004a86:	60bb      	str	r3, [r7, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d044      	beq.n	8004b2c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d140      	bne.n	8004b2c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fd00 	bl	80034b4 <uxListRemove>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d115      	bne.n	8004ae6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	491f      	ldr	r1, [pc, #124]	; (8004b3c <xTaskPriorityDisinherit+0x10c>)
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <xTaskPriorityDisinherit+0xb6>
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <xTaskPriorityDisinherit+0x110>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <xTaskPriorityDisinherit+0x110>)
 8004ae4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f1c3 0207 	rsb	r2, r3, #7
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	2201      	movs	r2, #1
 8004b00:	409a      	lsls	r2, r3
 8004b02:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <xTaskPriorityDisinherit+0x110>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <xTaskPriorityDisinherit+0x110>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <xTaskPriorityDisinherit+0x10c>)
 8004b1a:	441a      	add	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f7fe fc69 	bl	80033fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b2c:	697b      	ldr	r3, [r7, #20]
	}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000348 	.word	0x20000348
 8004b3c:	2000034c 	.word	0x2000034c
 8004b40:	20000450 	.word	0x20000450

08004b44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004b52:	2301      	movs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 8087 	beq.w	8004c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	b672      	cpsid	i
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	b662      	cpsie	i
 8004b7a:	60fb      	str	r3, [r7, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d902      	bls.n	8004b90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e002      	b.n	8004b96 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d065      	beq.n	8004c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d160      	bne.n	8004c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004baa:	4b32      	ldr	r3, [pc, #200]	; (8004c74 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d10c      	bne.n	8004bce <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	b672      	cpsid	i
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	b662      	cpsie	i
 8004bc8:	60bb      	str	r3, [r7, #8]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db04      	blt.n	8004bec <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f1c3 0207 	rsb	r2, r3, #7
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	6959      	ldr	r1, [r3, #20]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4299      	cmp	r1, r3
 8004c00:	d134      	bne.n	8004c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fc54 	bl	80034b4 <uxListRemove>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d115      	bne.n	8004c3e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	4918      	ldr	r1, [pc, #96]	; (8004c78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43da      	mvns	r2, r3
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004c3c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	2201      	movs	r2, #1
 8004c44:	409a      	lsls	r2, r3
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4a06      	ldr	r2, [pc, #24]	; (8004c78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004c5e:	441a      	add	r2, r3
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f7fe fbc7 	bl	80033fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c6c:	bf00      	nop
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000348 	.word	0x20000348
 8004c78:	2000034c 	.word	0x2000034c
 8004c7c:	20000450 	.word	0x20000450

08004c80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c92:	3201      	adds	r2, #1
 8004c94:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004c96:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c98:	681b      	ldr	r3, [r3, #0]
	}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20000348 	.word	0x20000348

08004ca8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cb2:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fbf8 	bl	80034b4 <uxListRemove>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ce0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d10a      	bne.n	8004d00 <prvAddCurrentTaskToDelayedList+0x58>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	481a      	ldr	r0, [pc, #104]	; (8004d64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cfa:	f7fe fb7e 	bl	80033fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cfe:	e026      	b.n	8004d4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d209      	bcs.n	8004d2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f7fe fb8c 	bl	8003442 <vListInsert>
}
 8004d2a:	e010      	b.n	8004d4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fe fb82 	bl	8003442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d202      	bcs.n	8004d4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6013      	str	r3, [r2, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	2000044c 	.word	0x2000044c
 8004d5c:	20000348 	.word	0x20000348
 8004d60:	20000450 	.word	0x20000450
 8004d64:	20000434 	.word	0x20000434
 8004d68:	20000404 	.word	0x20000404
 8004d6c:	20000400 	.word	0x20000400
 8004d70:	20000468 	.word	0x20000468

08004d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b04      	subs	r3, #4
 8004d84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b04      	subs	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b04      	subs	r3, #4
 8004da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004da4:	4a0c      	ldr	r2, [pc, #48]	; (8004dd8 <pxPortInitialiseStack+0x64>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b14      	subs	r3, #20
 8004dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b04      	subs	r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f06f 0202 	mvn.w	r2, #2
 8004dc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b20      	subs	r3, #32
 8004dc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	08004ddd 	.word	0x08004ddd

08004ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <prvTaskExitError+0x5c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d00c      	beq.n	8004e0a <prvTaskExitError+0x2e>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	b672      	cpsid	i
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	b662      	cpsie	i
 8004e04:	60fb      	str	r3, [r7, #12]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <prvTaskExitError+0x2c>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	b672      	cpsid	i
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	b662      	cpsie	i
 8004e1e:	60bb      	str	r3, [r7, #8]
}
 8004e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e22:	bf00      	nop
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0fc      	beq.n	8004e24 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	00000000 	.word	0x00000000

08004e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <pxCurrentTCBConst2>)
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	6808      	ldr	r0, [r1, #0]
 8004e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	f380 8809 	msr	PSP, r0
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8811 	msr	BASEPRI, r0
 8004e5a:	4770      	bx	lr
 8004e5c:	f3af 8000 	nop.w

08004e60 <pxCurrentTCBConst2>:
 8004e60:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop

08004e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e68:	4808      	ldr	r0, [pc, #32]	; (8004e8c <prvPortStartFirstTask+0x24>)
 8004e6a:	6800      	ldr	r0, [r0, #0]
 8004e6c:	6800      	ldr	r0, [r0, #0]
 8004e6e:	f380 8808 	msr	MSP, r0
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8814 	msr	CONTROL, r0
 8004e7a:	b662      	cpsie	i
 8004e7c:	b661      	cpsie	f
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	df00      	svc	0
 8004e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e8a:	bf00      	nop
 8004e8c:	e000ed08 	.word	0xe000ed08

08004e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e96:	4b37      	ldr	r3, [pc, #220]	; (8004f74 <xPortStartScheduler+0xe4>)
 8004e98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <xPortStartScheduler+0xe8>)
 8004ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ebe:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <xPortStartScheduler+0xec>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ec4:	e009      	b.n	8004eda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004ec6:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <xPortStartScheduler+0xec>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	; (8004f7c <xPortStartScheduler+0xec>)
 8004ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b80      	cmp	r3, #128	; 0x80
 8004ee4:	d0ef      	beq.n	8004ec6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ee6:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <xPortStartScheduler+0xec>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1c3 0307 	rsb	r3, r3, #7
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d00c      	beq.n	8004f0c <xPortStartScheduler+0x7c>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	b672      	cpsid	i
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	b662      	cpsie	i
 8004f06:	60bb      	str	r3, [r7, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <xPortStartScheduler+0xec>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <xPortStartScheduler+0xec>)
 8004f14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f16:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <xPortStartScheduler+0xec>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f1e:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <xPortStartScheduler+0xec>)
 8004f20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <xPortStartScheduler+0xf0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <xPortStartScheduler+0xf0>)
 8004f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <xPortStartScheduler+0xf0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <xPortStartScheduler+0xf0>)
 8004f3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f42:	f000 f8dd 	bl	8005100 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xPortStartScheduler+0xf4>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f4c:	f000 f8fc 	bl	8005148 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <xPortStartScheduler+0xf8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <xPortStartScheduler+0xf8>)
 8004f56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f5c:	f7ff ff84 	bl	8004e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f60:	f7ff fa76 	bl	8004450 <vTaskSwitchContext>
	prvTaskExitError();
 8004f64:	f7ff ff3a 	bl	8004ddc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	e000e400 	.word	0xe000e400
 8004f78:	20000474 	.word	0x20000474
 8004f7c:	20000478 	.word	0x20000478
 8004f80:	e000ed20 	.word	0xe000ed20
 8004f84:	2000000c 	.word	0x2000000c
 8004f88:	e000ef34 	.word	0xe000ef34

08004f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	b672      	cpsid	i
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	b662      	cpsie	i
 8004fa6:	607b      	str	r3, [r7, #4]
}
 8004fa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <vPortEnterCritical+0x60>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <vPortEnterCritical+0x60>)
 8004fb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <vPortEnterCritical+0x60>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d111      	bne.n	8004fe0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <vPortEnterCritical+0x64>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <vPortEnterCritical+0x54>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	b672      	cpsid	i
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	b662      	cpsie	i
 8004fda:	603b      	str	r3, [r7, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <vPortEnterCritical+0x52>
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	2000000c 	.word	0x2000000c
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <vPortExitCritical+0x54>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10c      	bne.n	800501c <vPortExitCritical+0x28>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	b672      	cpsid	i
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	b662      	cpsie	i
 8005016:	607b      	str	r3, [r7, #4]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <vPortExitCritical+0x54>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3b01      	subs	r3, #1
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <vPortExitCritical+0x54>)
 8005024:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <vPortExitCritical+0x54>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <vPortExitCritical+0x46>
 800502e:	2300      	movs	r3, #0
 8005030:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005038:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	2000000c 	.word	0x2000000c
 800504c:	00000000 	.word	0x00000000

08005050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005050:	f3ef 8009 	mrs	r0, PSP
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <pxCurrentTCBConst>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	f01e 0f10 	tst.w	lr, #16
 8005060:	bf08      	it	eq
 8005062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	6010      	str	r0, [r2, #0]
 800506c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005074:	b672      	cpsid	i
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	b662      	cpsie	i
 8005084:	f7ff f9e4 	bl	8004450 <vTaskSwitchContext>
 8005088:	f04f 0000 	mov.w	r0, #0
 800508c:	f380 8811 	msr	BASEPRI, r0
 8005090:	bc09      	pop	{r0, r3}
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509a:	f01e 0f10 	tst.w	lr, #16
 800509e:	bf08      	it	eq
 80050a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050a4:	f380 8809 	msr	PSP, r0
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <pxCurrentTCBConst>:
 80050b0:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	b672      	cpsid	i
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	b662      	cpsie	i
 80050d2:	607b      	str	r3, [r7, #4]
}
 80050d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050d6:	f7ff f901 	bl	80042dc <xTaskIncrementTick>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <SysTick_Handler+0x44>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	f383 8811 	msr	BASEPRI, r3
}
 80050f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <vPortSetupTimerInterrupt+0x34>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <vPortSetupTimerInterrupt+0x38>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <vPortSetupTimerInterrupt+0x3c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <vPortSetupTimerInterrupt+0x40>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	4a09      	ldr	r2, [pc, #36]	; (8005144 <vPortSetupTimerInterrupt+0x44>)
 800511e:	3b01      	subs	r3, #1
 8005120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005122:	4b04      	ldr	r3, [pc, #16]	; (8005134 <vPortSetupTimerInterrupt+0x34>)
 8005124:	2207      	movs	r2, #7
 8005126:	601a      	str	r2, [r3, #0]
}
 8005128:	bf00      	nop
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000e010 	.word	0xe000e010
 8005138:	e000e018 	.word	0xe000e018
 800513c:	20000000 	.word	0x20000000
 8005140:	10624dd3 	.word	0x10624dd3
 8005144:	e000e014 	.word	0xe000e014

08005148 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005148:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005158 <vPortEnableVFP+0x10>
 800514c:	6801      	ldr	r1, [r0, #0]
 800514e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005152:	6001      	str	r1, [r0, #0]
 8005154:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005156:	bf00      	nop
 8005158:	e000ed88 	.word	0xe000ed88

0800515c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005168:	f7ff f80c 	bl	8004184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800516c:	4b5b      	ldr	r3, [pc, #364]	; (80052dc <pvPortMalloc+0x180>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005174:	f000 f91a 	bl	80053ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005178:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <pvPortMalloc+0x184>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	f040 8092 	bne.w	80052aa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01f      	beq.n	80051cc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800518c:	2208      	movs	r2, #8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f023 0307 	bic.w	r3, r3, #7
 80051a4:	3308      	adds	r3, #8
 80051a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <pvPortMalloc+0x70>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	b672      	cpsid	i
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	b662      	cpsie	i
 80051c6:	617b      	str	r3, [r7, #20]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d06b      	beq.n	80052aa <pvPortMalloc+0x14e>
 80051d2:	4b44      	ldr	r3, [pc, #272]	; (80052e4 <pvPortMalloc+0x188>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d866      	bhi.n	80052aa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051dc:	4b42      	ldr	r3, [pc, #264]	; (80052e8 <pvPortMalloc+0x18c>)
 80051de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <pvPortMalloc+0x18c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051e6:	e004      	b.n	80051f2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d903      	bls.n	8005204 <pvPortMalloc+0xa8>
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f1      	bne.n	80051e8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <pvPortMalloc+0x180>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520a:	429a      	cmp	r2, r3
 800520c:	d04d      	beq.n	80052aa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	4413      	add	r3, r2
 8005216:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	2308      	movs	r3, #8
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	429a      	cmp	r2, r3
 800522e:	d921      	bls.n	8005274 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4413      	add	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00c      	beq.n	800525c <pvPortMalloc+0x100>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	b672      	cpsid	i
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	b662      	cpsie	i
 8005256:	613b      	str	r3, [r7, #16]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800526e:	69b8      	ldr	r0, [r7, #24]
 8005270:	f000 f8fe 	bl	8005470 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <pvPortMalloc+0x188>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <pvPortMalloc+0x188>)
 8005280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <pvPortMalloc+0x188>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b19      	ldr	r3, [pc, #100]	; (80052ec <pvPortMalloc+0x190>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d203      	bcs.n	8005296 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <pvPortMalloc+0x188>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <pvPortMalloc+0x190>)
 8005294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <pvPortMalloc+0x184>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	431a      	orrs	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052aa:	f7fe ff79 	bl	80041a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00c      	beq.n	80052d2 <pvPortMalloc+0x176>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	b672      	cpsid	i
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	b662      	cpsie	i
 80052cc:	60fb      	str	r3, [r7, #12]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <pvPortMalloc+0x174>
	return pvReturn;
 80052d2:	69fb      	ldr	r3, [r7, #28]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3728      	adds	r7, #40	; 0x28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20004084 	.word	0x20004084
 80052e0:	20004090 	.word	0x20004090
 80052e4:	20004088 	.word	0x20004088
 80052e8:	2000407c 	.word	0x2000407c
 80052ec:	2000408c 	.word	0x2000408c

080052f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d04c      	beq.n	800539c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005302:	2308      	movs	r3, #8
 8005304:	425b      	negs	r3, r3
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <vPortFree+0xb4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10c      	bne.n	8005338 <vPortFree+0x48>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	b672      	cpsid	i
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	b662      	cpsie	i
 8005332:	60fb      	str	r3, [r7, #12]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <vPortFree+0x6a>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	b672      	cpsid	i
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	b662      	cpsie	i
 8005354:	60bb      	str	r3, [r7, #8]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <vPortFree+0xb4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d019      	beq.n	800539c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d115      	bne.n	800539c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <vPortFree+0xb4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	43db      	mvns	r3, r3
 800537a:	401a      	ands	r2, r3
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005380:	f7fe ff00 	bl	8004184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <vPortFree+0xb8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4413      	add	r3, r2
 800538e:	4a06      	ldr	r2, [pc, #24]	; (80053a8 <vPortFree+0xb8>)
 8005390:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005392:	6938      	ldr	r0, [r7, #16]
 8005394:	f000 f86c 	bl	8005470 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005398:	f7fe ff02 	bl	80041a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800539c:	bf00      	nop
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20004090 	.word	0x20004090
 80053a8:	20004088 	.word	0x20004088

080053ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053b8:	4b27      	ldr	r3, [pc, #156]	; (8005458 <prvHeapInit+0xac>)
 80053ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3307      	adds	r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0307 	bic.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	4a1f      	ldr	r2, [pc, #124]	; (8005458 <prvHeapInit+0xac>)
 80053dc:	4413      	add	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053e4:	4a1d      	ldr	r2, [pc, #116]	; (800545c <prvHeapInit+0xb0>)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053ea:	4b1c      	ldr	r3, [pc, #112]	; (800545c <prvHeapInit+0xb0>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4413      	add	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053f8:	2208      	movs	r2, #8
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0307 	bic.w	r3, r3, #7
 8005406:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a15      	ldr	r2, [pc, #84]	; (8005460 <prvHeapInit+0xb4>)
 800540c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800540e:	4b14      	ldr	r3, [pc, #80]	; (8005460 <prvHeapInit+0xb4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <prvHeapInit+0xb4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	1ad2      	subs	r2, r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <prvHeapInit+0xb4>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <prvHeapInit+0xb8>)
 800543a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a09      	ldr	r2, [pc, #36]	; (8005468 <prvHeapInit+0xbc>)
 8005442:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <prvHeapInit+0xc0>)
 8005446:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800544a:	601a      	str	r2, [r3, #0]
}
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	2000047c 	.word	0x2000047c
 800545c:	2000407c 	.word	0x2000407c
 8005460:	20004084 	.word	0x20004084
 8005464:	2000408c 	.word	0x2000408c
 8005468:	20004088 	.word	0x20004088
 800546c:	20004090 	.word	0x20004090

08005470 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005478:	4b28      	ldr	r3, [pc, #160]	; (800551c <prvInsertBlockIntoFreeList+0xac>)
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e002      	b.n	8005484 <prvInsertBlockIntoFreeList+0x14>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	429a      	cmp	r2, r3
 800548c:	d8f7      	bhi.n	800547e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4413      	add	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d108      	bne.n	80054b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	441a      	add	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	441a      	add	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d118      	bne.n	80054f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b15      	ldr	r3, [pc, #84]	; (8005520 <prvInsertBlockIntoFreeList+0xb0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d00d      	beq.n	80054ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	441a      	add	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e008      	b.n	8005500 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <prvInsertBlockIntoFreeList+0xb0>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e003      	b.n	8005500 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d002      	beq.n	800550e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	2000407c 	.word	0x2000407c
 8005520:	20004084 	.word	0x20004084

08005524 <__errno>:
 8005524:	4b01      	ldr	r3, [pc, #4]	; (800552c <__errno+0x8>)
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000010 	.word	0x20000010

08005530 <std>:
 8005530:	2300      	movs	r3, #0
 8005532:	b510      	push	{r4, lr}
 8005534:	4604      	mov	r4, r0
 8005536:	e9c0 3300 	strd	r3, r3, [r0]
 800553a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800553e:	6083      	str	r3, [r0, #8]
 8005540:	8181      	strh	r1, [r0, #12]
 8005542:	6643      	str	r3, [r0, #100]	; 0x64
 8005544:	81c2      	strh	r2, [r0, #14]
 8005546:	6183      	str	r3, [r0, #24]
 8005548:	4619      	mov	r1, r3
 800554a:	2208      	movs	r2, #8
 800554c:	305c      	adds	r0, #92	; 0x5c
 800554e:	f000 f91a 	bl	8005786 <memset>
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <std+0x38>)
 8005554:	6263      	str	r3, [r4, #36]	; 0x24
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <std+0x3c>)
 8005558:	62a3      	str	r3, [r4, #40]	; 0x28
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <std+0x40>)
 800555c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <std+0x44>)
 8005560:	6224      	str	r4, [r4, #32]
 8005562:	6323      	str	r3, [r4, #48]	; 0x30
 8005564:	bd10      	pop	{r4, pc}
 8005566:	bf00      	nop
 8005568:	08005a2d 	.word	0x08005a2d
 800556c:	08005a4f 	.word	0x08005a4f
 8005570:	08005a87 	.word	0x08005a87
 8005574:	08005aab 	.word	0x08005aab

08005578 <_cleanup_r>:
 8005578:	4901      	ldr	r1, [pc, #4]	; (8005580 <_cleanup_r+0x8>)
 800557a:	f000 b8af 	b.w	80056dc <_fwalk_reent>
 800557e:	bf00      	nop
 8005580:	08005d85 	.word	0x08005d85

08005584 <__sfmoreglue>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	1e4a      	subs	r2, r1, #1
 8005588:	2568      	movs	r5, #104	; 0x68
 800558a:	4355      	muls	r5, r2
 800558c:	460e      	mov	r6, r1
 800558e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005592:	f000 f901 	bl	8005798 <_malloc_r>
 8005596:	4604      	mov	r4, r0
 8005598:	b140      	cbz	r0, 80055ac <__sfmoreglue+0x28>
 800559a:	2100      	movs	r1, #0
 800559c:	e9c0 1600 	strd	r1, r6, [r0]
 80055a0:	300c      	adds	r0, #12
 80055a2:	60a0      	str	r0, [r4, #8]
 80055a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055a8:	f000 f8ed 	bl	8005786 <memset>
 80055ac:	4620      	mov	r0, r4
 80055ae:	bd70      	pop	{r4, r5, r6, pc}

080055b0 <__sfp_lock_acquire>:
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <__sfp_lock_acquire+0x8>)
 80055b2:	f000 b8d8 	b.w	8005766 <__retarget_lock_acquire_recursive>
 80055b6:	bf00      	nop
 80055b8:	20004180 	.word	0x20004180

080055bc <__sfp_lock_release>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__sfp_lock_release+0x8>)
 80055be:	f000 b8d3 	b.w	8005768 <__retarget_lock_release_recursive>
 80055c2:	bf00      	nop
 80055c4:	20004180 	.word	0x20004180

080055c8 <__sinit_lock_acquire>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__sinit_lock_acquire+0x8>)
 80055ca:	f000 b8cc 	b.w	8005766 <__retarget_lock_acquire_recursive>
 80055ce:	bf00      	nop
 80055d0:	2000417b 	.word	0x2000417b

080055d4 <__sinit_lock_release>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__sinit_lock_release+0x8>)
 80055d6:	f000 b8c7 	b.w	8005768 <__retarget_lock_release_recursive>
 80055da:	bf00      	nop
 80055dc:	2000417b 	.word	0x2000417b

080055e0 <__sinit>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4604      	mov	r4, r0
 80055e4:	f7ff fff0 	bl	80055c8 <__sinit_lock_acquire>
 80055e8:	69a3      	ldr	r3, [r4, #24]
 80055ea:	b11b      	cbz	r3, 80055f4 <__sinit+0x14>
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f0:	f7ff bff0 	b.w	80055d4 <__sinit_lock_release>
 80055f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055f8:	6523      	str	r3, [r4, #80]	; 0x50
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <__sinit+0x68>)
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <__sinit+0x6c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	62a2      	str	r2, [r4, #40]	; 0x28
 8005602:	42a3      	cmp	r3, r4
 8005604:	bf04      	itt	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	61a3      	streq	r3, [r4, #24]
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f820 	bl	8005650 <__sfp>
 8005610:	6060      	str	r0, [r4, #4]
 8005612:	4620      	mov	r0, r4
 8005614:	f000 f81c 	bl	8005650 <__sfp>
 8005618:	60a0      	str	r0, [r4, #8]
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f818 	bl	8005650 <__sfp>
 8005620:	2200      	movs	r2, #0
 8005622:	60e0      	str	r0, [r4, #12]
 8005624:	2104      	movs	r1, #4
 8005626:	6860      	ldr	r0, [r4, #4]
 8005628:	f7ff ff82 	bl	8005530 <std>
 800562c:	68a0      	ldr	r0, [r4, #8]
 800562e:	2201      	movs	r2, #1
 8005630:	2109      	movs	r1, #9
 8005632:	f7ff ff7d 	bl	8005530 <std>
 8005636:	68e0      	ldr	r0, [r4, #12]
 8005638:	2202      	movs	r2, #2
 800563a:	2112      	movs	r1, #18
 800563c:	f7ff ff78 	bl	8005530 <std>
 8005640:	2301      	movs	r3, #1
 8005642:	61a3      	str	r3, [r4, #24]
 8005644:	e7d2      	b.n	80055ec <__sinit+0xc>
 8005646:	bf00      	nop
 8005648:	080060e8 	.word	0x080060e8
 800564c:	08005579 	.word	0x08005579

08005650 <__sfp>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	4607      	mov	r7, r0
 8005654:	f7ff ffac 	bl	80055b0 <__sfp_lock_acquire>
 8005658:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <__sfp+0x84>)
 800565a:	681e      	ldr	r6, [r3, #0]
 800565c:	69b3      	ldr	r3, [r6, #24]
 800565e:	b913      	cbnz	r3, 8005666 <__sfp+0x16>
 8005660:	4630      	mov	r0, r6
 8005662:	f7ff ffbd 	bl	80055e0 <__sinit>
 8005666:	3648      	adds	r6, #72	; 0x48
 8005668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800566c:	3b01      	subs	r3, #1
 800566e:	d503      	bpl.n	8005678 <__sfp+0x28>
 8005670:	6833      	ldr	r3, [r6, #0]
 8005672:	b30b      	cbz	r3, 80056b8 <__sfp+0x68>
 8005674:	6836      	ldr	r6, [r6, #0]
 8005676:	e7f7      	b.n	8005668 <__sfp+0x18>
 8005678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800567c:	b9d5      	cbnz	r5, 80056b4 <__sfp+0x64>
 800567e:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <__sfp+0x88>)
 8005680:	60e3      	str	r3, [r4, #12]
 8005682:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005686:	6665      	str	r5, [r4, #100]	; 0x64
 8005688:	f000 f86c 	bl	8005764 <__retarget_lock_init_recursive>
 800568c:	f7ff ff96 	bl	80055bc <__sfp_lock_release>
 8005690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005698:	6025      	str	r5, [r4, #0]
 800569a:	61a5      	str	r5, [r4, #24]
 800569c:	2208      	movs	r2, #8
 800569e:	4629      	mov	r1, r5
 80056a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056a4:	f000 f86f 	bl	8005786 <memset>
 80056a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056b0:	4620      	mov	r0, r4
 80056b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b4:	3468      	adds	r4, #104	; 0x68
 80056b6:	e7d9      	b.n	800566c <__sfp+0x1c>
 80056b8:	2104      	movs	r1, #4
 80056ba:	4638      	mov	r0, r7
 80056bc:	f7ff ff62 	bl	8005584 <__sfmoreglue>
 80056c0:	4604      	mov	r4, r0
 80056c2:	6030      	str	r0, [r6, #0]
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d1d5      	bne.n	8005674 <__sfp+0x24>
 80056c8:	f7ff ff78 	bl	80055bc <__sfp_lock_release>
 80056cc:	230c      	movs	r3, #12
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	e7ee      	b.n	80056b0 <__sfp+0x60>
 80056d2:	bf00      	nop
 80056d4:	080060e8 	.word	0x080060e8
 80056d8:	ffff0001 	.word	0xffff0001

080056dc <_fwalk_reent>:
 80056dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e0:	4606      	mov	r6, r0
 80056e2:	4688      	mov	r8, r1
 80056e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056e8:	2700      	movs	r7, #0
 80056ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056ee:	f1b9 0901 	subs.w	r9, r9, #1
 80056f2:	d505      	bpl.n	8005700 <_fwalk_reent+0x24>
 80056f4:	6824      	ldr	r4, [r4, #0]
 80056f6:	2c00      	cmp	r4, #0
 80056f8:	d1f7      	bne.n	80056ea <_fwalk_reent+0xe>
 80056fa:	4638      	mov	r0, r7
 80056fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005700:	89ab      	ldrh	r3, [r5, #12]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d907      	bls.n	8005716 <_fwalk_reent+0x3a>
 8005706:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800570a:	3301      	adds	r3, #1
 800570c:	d003      	beq.n	8005716 <_fwalk_reent+0x3a>
 800570e:	4629      	mov	r1, r5
 8005710:	4630      	mov	r0, r6
 8005712:	47c0      	blx	r8
 8005714:	4307      	orrs	r7, r0
 8005716:	3568      	adds	r5, #104	; 0x68
 8005718:	e7e9      	b.n	80056ee <_fwalk_reent+0x12>
	...

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4d0d      	ldr	r5, [pc, #52]	; (8005754 <__libc_init_array+0x38>)
 8005720:	4c0d      	ldr	r4, [pc, #52]	; (8005758 <__libc_init_array+0x3c>)
 8005722:	1b64      	subs	r4, r4, r5
 8005724:	10a4      	asrs	r4, r4, #2
 8005726:	2600      	movs	r6, #0
 8005728:	42a6      	cmp	r6, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	4d0b      	ldr	r5, [pc, #44]	; (800575c <__libc_init_array+0x40>)
 800572e:	4c0c      	ldr	r4, [pc, #48]	; (8005760 <__libc_init_array+0x44>)
 8005730:	f000 fc6a 	bl	8006008 <_init>
 8005734:	1b64      	subs	r4, r4, r5
 8005736:	10a4      	asrs	r4, r4, #2
 8005738:	2600      	movs	r6, #0
 800573a:	42a6      	cmp	r6, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	f855 3b04 	ldr.w	r3, [r5], #4
 8005744:	4798      	blx	r3
 8005746:	3601      	adds	r6, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	f855 3b04 	ldr.w	r3, [r5], #4
 800574e:	4798      	blx	r3
 8005750:	3601      	adds	r6, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	080060f4 	.word	0x080060f4
 8005758:	080060f4 	.word	0x080060f4
 800575c:	080060f4 	.word	0x080060f4
 8005760:	080060f8 	.word	0x080060f8

08005764 <__retarget_lock_init_recursive>:
 8005764:	4770      	bx	lr

08005766 <__retarget_lock_acquire_recursive>:
 8005766:	4770      	bx	lr

08005768 <__retarget_lock_release_recursive>:
 8005768:	4770      	bx	lr

0800576a <memcpy>:
 800576a:	440a      	add	r2, r1
 800576c:	4291      	cmp	r1, r2
 800576e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005772:	d100      	bne.n	8005776 <memcpy+0xc>
 8005774:	4770      	bx	lr
 8005776:	b510      	push	{r4, lr}
 8005778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800577c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005780:	4291      	cmp	r1, r2
 8005782:	d1f9      	bne.n	8005778 <memcpy+0xe>
 8005784:	bd10      	pop	{r4, pc}

08005786 <memset>:
 8005786:	4402      	add	r2, r0
 8005788:	4603      	mov	r3, r0
 800578a:	4293      	cmp	r3, r2
 800578c:	d100      	bne.n	8005790 <memset+0xa>
 800578e:	4770      	bx	lr
 8005790:	f803 1b01 	strb.w	r1, [r3], #1
 8005794:	e7f9      	b.n	800578a <memset+0x4>
	...

08005798 <_malloc_r>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	1ccd      	adds	r5, r1, #3
 800579c:	f025 0503 	bic.w	r5, r5, #3
 80057a0:	3508      	adds	r5, #8
 80057a2:	2d0c      	cmp	r5, #12
 80057a4:	bf38      	it	cc
 80057a6:	250c      	movcc	r5, #12
 80057a8:	2d00      	cmp	r5, #0
 80057aa:	4606      	mov	r6, r0
 80057ac:	db01      	blt.n	80057b2 <_malloc_r+0x1a>
 80057ae:	42a9      	cmp	r1, r5
 80057b0:	d903      	bls.n	80057ba <_malloc_r+0x22>
 80057b2:	230c      	movs	r3, #12
 80057b4:	6033      	str	r3, [r6, #0]
 80057b6:	2000      	movs	r0, #0
 80057b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ba:	f000 fb95 	bl	8005ee8 <__malloc_lock>
 80057be:	4921      	ldr	r1, [pc, #132]	; (8005844 <_malloc_r+0xac>)
 80057c0:	680a      	ldr	r2, [r1, #0]
 80057c2:	4614      	mov	r4, r2
 80057c4:	b99c      	cbnz	r4, 80057ee <_malloc_r+0x56>
 80057c6:	4f20      	ldr	r7, [pc, #128]	; (8005848 <_malloc_r+0xb0>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	b923      	cbnz	r3, 80057d6 <_malloc_r+0x3e>
 80057cc:	4621      	mov	r1, r4
 80057ce:	4630      	mov	r0, r6
 80057d0:	f000 f91c 	bl	8005a0c <_sbrk_r>
 80057d4:	6038      	str	r0, [r7, #0]
 80057d6:	4629      	mov	r1, r5
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 f917 	bl	8005a0c <_sbrk_r>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	d123      	bne.n	800582a <_malloc_r+0x92>
 80057e2:	230c      	movs	r3, #12
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	4630      	mov	r0, r6
 80057e8:	f000 fb84 	bl	8005ef4 <__malloc_unlock>
 80057ec:	e7e3      	b.n	80057b6 <_malloc_r+0x1e>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	1b5b      	subs	r3, r3, r5
 80057f2:	d417      	bmi.n	8005824 <_malloc_r+0x8c>
 80057f4:	2b0b      	cmp	r3, #11
 80057f6:	d903      	bls.n	8005800 <_malloc_r+0x68>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	441c      	add	r4, r3
 80057fc:	6025      	str	r5, [r4, #0]
 80057fe:	e004      	b.n	800580a <_malloc_r+0x72>
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	42a2      	cmp	r2, r4
 8005804:	bf0c      	ite	eq
 8005806:	600b      	streq	r3, [r1, #0]
 8005808:	6053      	strne	r3, [r2, #4]
 800580a:	4630      	mov	r0, r6
 800580c:	f000 fb72 	bl	8005ef4 <__malloc_unlock>
 8005810:	f104 000b 	add.w	r0, r4, #11
 8005814:	1d23      	adds	r3, r4, #4
 8005816:	f020 0007 	bic.w	r0, r0, #7
 800581a:	1ac2      	subs	r2, r0, r3
 800581c:	d0cc      	beq.n	80057b8 <_malloc_r+0x20>
 800581e:	1a1b      	subs	r3, r3, r0
 8005820:	50a3      	str	r3, [r4, r2]
 8005822:	e7c9      	b.n	80057b8 <_malloc_r+0x20>
 8005824:	4622      	mov	r2, r4
 8005826:	6864      	ldr	r4, [r4, #4]
 8005828:	e7cc      	b.n	80057c4 <_malloc_r+0x2c>
 800582a:	1cc4      	adds	r4, r0, #3
 800582c:	f024 0403 	bic.w	r4, r4, #3
 8005830:	42a0      	cmp	r0, r4
 8005832:	d0e3      	beq.n	80057fc <_malloc_r+0x64>
 8005834:	1a21      	subs	r1, r4, r0
 8005836:	4630      	mov	r0, r6
 8005838:	f000 f8e8 	bl	8005a0c <_sbrk_r>
 800583c:	3001      	adds	r0, #1
 800583e:	d1dd      	bne.n	80057fc <_malloc_r+0x64>
 8005840:	e7cf      	b.n	80057e2 <_malloc_r+0x4a>
 8005842:	bf00      	nop
 8005844:	20004094 	.word	0x20004094
 8005848:	20004098 	.word	0x20004098

0800584c <_puts_r>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	460e      	mov	r6, r1
 8005850:	4605      	mov	r5, r0
 8005852:	b118      	cbz	r0, 800585c <_puts_r+0x10>
 8005854:	6983      	ldr	r3, [r0, #24]
 8005856:	b90b      	cbnz	r3, 800585c <_puts_r+0x10>
 8005858:	f7ff fec2 	bl	80055e0 <__sinit>
 800585c:	69ab      	ldr	r3, [r5, #24]
 800585e:	68ac      	ldr	r4, [r5, #8]
 8005860:	b913      	cbnz	r3, 8005868 <_puts_r+0x1c>
 8005862:	4628      	mov	r0, r5
 8005864:	f7ff febc 	bl	80055e0 <__sinit>
 8005868:	4b2c      	ldr	r3, [pc, #176]	; (800591c <_puts_r+0xd0>)
 800586a:	429c      	cmp	r4, r3
 800586c:	d120      	bne.n	80058b0 <_puts_r+0x64>
 800586e:	686c      	ldr	r4, [r5, #4]
 8005870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005872:	07db      	lsls	r3, r3, #31
 8005874:	d405      	bmi.n	8005882 <_puts_r+0x36>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	0598      	lsls	r0, r3, #22
 800587a:	d402      	bmi.n	8005882 <_puts_r+0x36>
 800587c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800587e:	f7ff ff72 	bl	8005766 <__retarget_lock_acquire_recursive>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	0719      	lsls	r1, r3, #28
 8005886:	d51d      	bpl.n	80058c4 <_puts_r+0x78>
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	b1db      	cbz	r3, 80058c4 <_puts_r+0x78>
 800588c:	3e01      	subs	r6, #1
 800588e:	68a3      	ldr	r3, [r4, #8]
 8005890:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005894:	3b01      	subs	r3, #1
 8005896:	60a3      	str	r3, [r4, #8]
 8005898:	bb39      	cbnz	r1, 80058ea <_puts_r+0x9e>
 800589a:	2b00      	cmp	r3, #0
 800589c:	da38      	bge.n	8005910 <_puts_r+0xc4>
 800589e:	4622      	mov	r2, r4
 80058a0:	210a      	movs	r1, #10
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 f906 	bl	8005ab4 <__swbuf_r>
 80058a8:	3001      	adds	r0, #1
 80058aa:	d011      	beq.n	80058d0 <_puts_r+0x84>
 80058ac:	250a      	movs	r5, #10
 80058ae:	e011      	b.n	80058d4 <_puts_r+0x88>
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <_puts_r+0xd4>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	d101      	bne.n	80058ba <_puts_r+0x6e>
 80058b6:	68ac      	ldr	r4, [r5, #8]
 80058b8:	e7da      	b.n	8005870 <_puts_r+0x24>
 80058ba:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <_puts_r+0xd8>)
 80058bc:	429c      	cmp	r4, r3
 80058be:	bf08      	it	eq
 80058c0:	68ec      	ldreq	r4, [r5, #12]
 80058c2:	e7d5      	b.n	8005870 <_puts_r+0x24>
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f958 	bl	8005b7c <__swsetup_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d0dd      	beq.n	800588c <_puts_r+0x40>
 80058d0:	f04f 35ff 	mov.w	r5, #4294967295
 80058d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058d6:	07da      	lsls	r2, r3, #31
 80058d8:	d405      	bmi.n	80058e6 <_puts_r+0x9a>
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	059b      	lsls	r3, r3, #22
 80058de:	d402      	bmi.n	80058e6 <_puts_r+0x9a>
 80058e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058e2:	f7ff ff41 	bl	8005768 <__retarget_lock_release_recursive>
 80058e6:	4628      	mov	r0, r5
 80058e8:	bd70      	pop	{r4, r5, r6, pc}
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da04      	bge.n	80058f8 <_puts_r+0xac>
 80058ee:	69a2      	ldr	r2, [r4, #24]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	dc06      	bgt.n	8005902 <_puts_r+0xb6>
 80058f4:	290a      	cmp	r1, #10
 80058f6:	d004      	beq.n	8005902 <_puts_r+0xb6>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	6022      	str	r2, [r4, #0]
 80058fe:	7019      	strb	r1, [r3, #0]
 8005900:	e7c5      	b.n	800588e <_puts_r+0x42>
 8005902:	4622      	mov	r2, r4
 8005904:	4628      	mov	r0, r5
 8005906:	f000 f8d5 	bl	8005ab4 <__swbuf_r>
 800590a:	3001      	adds	r0, #1
 800590c:	d1bf      	bne.n	800588e <_puts_r+0x42>
 800590e:	e7df      	b.n	80058d0 <_puts_r+0x84>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	250a      	movs	r5, #10
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	701d      	strb	r5, [r3, #0]
 800591a:	e7db      	b.n	80058d4 <_puts_r+0x88>
 800591c:	080060a8 	.word	0x080060a8
 8005920:	080060c8 	.word	0x080060c8
 8005924:	08006088 	.word	0x08006088

08005928 <puts>:
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <puts+0xc>)
 800592a:	4601      	mov	r1, r0
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	f7ff bf8d 	b.w	800584c <_puts_r>
 8005932:	bf00      	nop
 8005934:	20000010 	.word	0x20000010

08005938 <cleanup_glue>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	460c      	mov	r4, r1
 800593c:	6809      	ldr	r1, [r1, #0]
 800593e:	4605      	mov	r5, r0
 8005940:	b109      	cbz	r1, 8005946 <cleanup_glue+0xe>
 8005942:	f7ff fff9 	bl	8005938 <cleanup_glue>
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800594e:	f000 bad7 	b.w	8005f00 <_free_r>
	...

08005954 <_reclaim_reent>:
 8005954:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <_reclaim_reent+0xb4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4283      	cmp	r3, r0
 800595a:	b570      	push	{r4, r5, r6, lr}
 800595c:	4604      	mov	r4, r0
 800595e:	d051      	beq.n	8005a04 <_reclaim_reent+0xb0>
 8005960:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005962:	b143      	cbz	r3, 8005976 <_reclaim_reent+0x22>
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d14a      	bne.n	8005a00 <_reclaim_reent+0xac>
 800596a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	b111      	cbz	r1, 8005976 <_reclaim_reent+0x22>
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fac5 	bl	8005f00 <_free_r>
 8005976:	6961      	ldr	r1, [r4, #20]
 8005978:	b111      	cbz	r1, 8005980 <_reclaim_reent+0x2c>
 800597a:	4620      	mov	r0, r4
 800597c:	f000 fac0 	bl	8005f00 <_free_r>
 8005980:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005982:	b111      	cbz	r1, 800598a <_reclaim_reent+0x36>
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fabb 	bl	8005f00 <_free_r>
 800598a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800598c:	b111      	cbz	r1, 8005994 <_reclaim_reent+0x40>
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fab6 	bl	8005f00 <_free_r>
 8005994:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005996:	b111      	cbz	r1, 800599e <_reclaim_reent+0x4a>
 8005998:	4620      	mov	r0, r4
 800599a:	f000 fab1 	bl	8005f00 <_free_r>
 800599e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80059a0:	b111      	cbz	r1, 80059a8 <_reclaim_reent+0x54>
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 faac 	bl	8005f00 <_free_r>
 80059a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80059aa:	b111      	cbz	r1, 80059b2 <_reclaim_reent+0x5e>
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 faa7 	bl	8005f00 <_free_r>
 80059b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80059b4:	b111      	cbz	r1, 80059bc <_reclaim_reent+0x68>
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 faa2 	bl	8005f00 <_free_r>
 80059bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059be:	b111      	cbz	r1, 80059c6 <_reclaim_reent+0x72>
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 fa9d 	bl	8005f00 <_free_r>
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	b1e3      	cbz	r3, 8005a04 <_reclaim_reent+0xb0>
 80059ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059cc:	4620      	mov	r0, r4
 80059ce:	4798      	blx	r3
 80059d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059d2:	b1b9      	cbz	r1, 8005a04 <_reclaim_reent+0xb0>
 80059d4:	4620      	mov	r0, r4
 80059d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059da:	f7ff bfad 	b.w	8005938 <cleanup_glue>
 80059de:	5949      	ldr	r1, [r1, r5]
 80059e0:	b941      	cbnz	r1, 80059f4 <_reclaim_reent+0xa0>
 80059e2:	3504      	adds	r5, #4
 80059e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e6:	2d80      	cmp	r5, #128	; 0x80
 80059e8:	68d9      	ldr	r1, [r3, #12]
 80059ea:	d1f8      	bne.n	80059de <_reclaim_reent+0x8a>
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 fa87 	bl	8005f00 <_free_r>
 80059f2:	e7ba      	b.n	800596a <_reclaim_reent+0x16>
 80059f4:	680e      	ldr	r6, [r1, #0]
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 fa82 	bl	8005f00 <_free_r>
 80059fc:	4631      	mov	r1, r6
 80059fe:	e7ef      	b.n	80059e0 <_reclaim_reent+0x8c>
 8005a00:	2500      	movs	r5, #0
 8005a02:	e7ef      	b.n	80059e4 <_reclaim_reent+0x90>
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010

08005a0c <_sbrk_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d06      	ldr	r5, [pc, #24]	; (8005a28 <_sbrk_r+0x1c>)
 8005a10:	2300      	movs	r3, #0
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	602b      	str	r3, [r5, #0]
 8005a18:	f7fb f824 	bl	8000a64 <_sbrk>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_sbrk_r+0x1a>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_sbrk_r+0x1a>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20004184 	.word	0x20004184

08005a2c <__sread>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	460c      	mov	r4, r1
 8005a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a34:	f000 fab4 	bl	8005fa0 <_read_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	bfab      	itete	ge
 8005a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a40:	181b      	addge	r3, r3, r0
 8005a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a46:	bfac      	ite	ge
 8005a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a4a:	81a3      	strhlt	r3, [r4, #12]
 8005a4c:	bd10      	pop	{r4, pc}

08005a4e <__swrite>:
 8005a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a52:	461f      	mov	r7, r3
 8005a54:	898b      	ldrh	r3, [r1, #12]
 8005a56:	05db      	lsls	r3, r3, #23
 8005a58:	4605      	mov	r5, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	d505      	bpl.n	8005a6c <__swrite+0x1e>
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	2302      	movs	r3, #2
 8005a66:	2200      	movs	r2, #0
 8005a68:	f000 f9c8 	bl	8005dfc <_lseek_r>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	4632      	mov	r2, r6
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a82:	f000 b869 	b.w	8005b58 <_write_r>

08005a86 <__sseek>:
 8005a86:	b510      	push	{r4, lr}
 8005a88:	460c      	mov	r4, r1
 8005a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8e:	f000 f9b5 	bl	8005dfc <_lseek_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	bf15      	itete	ne
 8005a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aa2:	81a3      	strheq	r3, [r4, #12]
 8005aa4:	bf18      	it	ne
 8005aa6:	81a3      	strhne	r3, [r4, #12]
 8005aa8:	bd10      	pop	{r4, pc}

08005aaa <__sclose>:
 8005aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aae:	f000 b8d3 	b.w	8005c58 <_close_r>
	...

08005ab4 <__swbuf_r>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	460e      	mov	r6, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	4605      	mov	r5, r0
 8005abc:	b118      	cbz	r0, 8005ac6 <__swbuf_r+0x12>
 8005abe:	6983      	ldr	r3, [r0, #24]
 8005ac0:	b90b      	cbnz	r3, 8005ac6 <__swbuf_r+0x12>
 8005ac2:	f7ff fd8d 	bl	80055e0 <__sinit>
 8005ac6:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <__swbuf_r+0x98>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	d12b      	bne.n	8005b24 <__swbuf_r+0x70>
 8005acc:	686c      	ldr	r4, [r5, #4]
 8005ace:	69a3      	ldr	r3, [r4, #24]
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	071a      	lsls	r2, r3, #28
 8005ad6:	d52f      	bpl.n	8005b38 <__swbuf_r+0x84>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	b36b      	cbz	r3, 8005b38 <__swbuf_r+0x84>
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	1ac0      	subs	r0, r0, r3
 8005ae2:	6963      	ldr	r3, [r4, #20]
 8005ae4:	b2f6      	uxtb	r6, r6
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	4637      	mov	r7, r6
 8005aea:	dc04      	bgt.n	8005af6 <__swbuf_r+0x42>
 8005aec:	4621      	mov	r1, r4
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 f948 	bl	8005d84 <_fflush_r>
 8005af4:	bb30      	cbnz	r0, 8005b44 <__swbuf_r+0x90>
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60a3      	str	r3, [r4, #8]
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	6022      	str	r2, [r4, #0]
 8005b02:	701e      	strb	r6, [r3, #0]
 8005b04:	6963      	ldr	r3, [r4, #20]
 8005b06:	3001      	adds	r0, #1
 8005b08:	4283      	cmp	r3, r0
 8005b0a:	d004      	beq.n	8005b16 <__swbuf_r+0x62>
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	07db      	lsls	r3, r3, #31
 8005b10:	d506      	bpl.n	8005b20 <__swbuf_r+0x6c>
 8005b12:	2e0a      	cmp	r6, #10
 8005b14:	d104      	bne.n	8005b20 <__swbuf_r+0x6c>
 8005b16:	4621      	mov	r1, r4
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 f933 	bl	8005d84 <_fflush_r>
 8005b1e:	b988      	cbnz	r0, 8005b44 <__swbuf_r+0x90>
 8005b20:	4638      	mov	r0, r7
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <__swbuf_r+0x9c>)
 8005b26:	429c      	cmp	r4, r3
 8005b28:	d101      	bne.n	8005b2e <__swbuf_r+0x7a>
 8005b2a:	68ac      	ldr	r4, [r5, #8]
 8005b2c:	e7cf      	b.n	8005ace <__swbuf_r+0x1a>
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <__swbuf_r+0xa0>)
 8005b30:	429c      	cmp	r4, r3
 8005b32:	bf08      	it	eq
 8005b34:	68ec      	ldreq	r4, [r5, #12]
 8005b36:	e7ca      	b.n	8005ace <__swbuf_r+0x1a>
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 f81e 	bl	8005b7c <__swsetup_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d0cb      	beq.n	8005adc <__swbuf_r+0x28>
 8005b44:	f04f 37ff 	mov.w	r7, #4294967295
 8005b48:	e7ea      	b.n	8005b20 <__swbuf_r+0x6c>
 8005b4a:	bf00      	nop
 8005b4c:	080060a8 	.word	0x080060a8
 8005b50:	080060c8 	.word	0x080060c8
 8005b54:	08006088 	.word	0x08006088

08005b58 <_write_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d07      	ldr	r5, [pc, #28]	; (8005b78 <_write_r+0x20>)
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	4608      	mov	r0, r1
 8005b60:	4611      	mov	r1, r2
 8005b62:	2200      	movs	r2, #0
 8005b64:	602a      	str	r2, [r5, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f7fa ff2b 	bl	80009c2 <_write>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d102      	bne.n	8005b76 <_write_r+0x1e>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	b103      	cbz	r3, 8005b76 <_write_r+0x1e>
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	20004184 	.word	0x20004184

08005b7c <__swsetup_r>:
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <__swsetup_r+0xcc>)
 8005b7e:	b570      	push	{r4, r5, r6, lr}
 8005b80:	681d      	ldr	r5, [r3, #0]
 8005b82:	4606      	mov	r6, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	b125      	cbz	r5, 8005b92 <__swsetup_r+0x16>
 8005b88:	69ab      	ldr	r3, [r5, #24]
 8005b8a:	b913      	cbnz	r3, 8005b92 <__swsetup_r+0x16>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f7ff fd27 	bl	80055e0 <__sinit>
 8005b92:	4b2e      	ldr	r3, [pc, #184]	; (8005c4c <__swsetup_r+0xd0>)
 8005b94:	429c      	cmp	r4, r3
 8005b96:	d10f      	bne.n	8005bb8 <__swsetup_r+0x3c>
 8005b98:	686c      	ldr	r4, [r5, #4]
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ba0:	0719      	lsls	r1, r3, #28
 8005ba2:	d42c      	bmi.n	8005bfe <__swsetup_r+0x82>
 8005ba4:	06dd      	lsls	r5, r3, #27
 8005ba6:	d411      	bmi.n	8005bcc <__swsetup_r+0x50>
 8005ba8:	2309      	movs	r3, #9
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	e03e      	b.n	8005c36 <__swsetup_r+0xba>
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <__swsetup_r+0xd4>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d101      	bne.n	8005bc2 <__swsetup_r+0x46>
 8005bbe:	68ac      	ldr	r4, [r5, #8]
 8005bc0:	e7eb      	b.n	8005b9a <__swsetup_r+0x1e>
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <__swsetup_r+0xd8>)
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	bf08      	it	eq
 8005bc8:	68ec      	ldreq	r4, [r5, #12]
 8005bca:	e7e6      	b.n	8005b9a <__swsetup_r+0x1e>
 8005bcc:	0758      	lsls	r0, r3, #29
 8005bce:	d512      	bpl.n	8005bf6 <__swsetup_r+0x7a>
 8005bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd2:	b141      	cbz	r1, 8005be6 <__swsetup_r+0x6a>
 8005bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d002      	beq.n	8005be2 <__swsetup_r+0x66>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f000 f98f 	bl	8005f00 <_free_r>
 8005be2:	2300      	movs	r3, #0
 8005be4:	6363      	str	r3, [r4, #52]	; 0x34
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6063      	str	r3, [r4, #4]
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f043 0308 	orr.w	r3, r3, #8
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	b94b      	cbnz	r3, 8005c16 <__swsetup_r+0x9a>
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0c:	d003      	beq.n	8005c16 <__swsetup_r+0x9a>
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f929 	bl	8005e68 <__smakebuf_r>
 8005c16:	89a0      	ldrh	r0, [r4, #12]
 8005c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c1c:	f010 0301 	ands.w	r3, r0, #1
 8005c20:	d00a      	beq.n	8005c38 <__swsetup_r+0xbc>
 8005c22:	2300      	movs	r3, #0
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	6963      	ldr	r3, [r4, #20]
 8005c28:	425b      	negs	r3, r3
 8005c2a:	61a3      	str	r3, [r4, #24]
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	b943      	cbnz	r3, 8005c42 <__swsetup_r+0xc6>
 8005c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c34:	d1ba      	bne.n	8005bac <__swsetup_r+0x30>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	0781      	lsls	r1, r0, #30
 8005c3a:	bf58      	it	pl
 8005c3c:	6963      	ldrpl	r3, [r4, #20]
 8005c3e:	60a3      	str	r3, [r4, #8]
 8005c40:	e7f4      	b.n	8005c2c <__swsetup_r+0xb0>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e7f7      	b.n	8005c36 <__swsetup_r+0xba>
 8005c46:	bf00      	nop
 8005c48:	20000010 	.word	0x20000010
 8005c4c:	080060a8 	.word	0x080060a8
 8005c50:	080060c8 	.word	0x080060c8
 8005c54:	08006088 	.word	0x08006088

08005c58 <_close_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d06      	ldr	r5, [pc, #24]	; (8005c74 <_close_r+0x1c>)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	f7fa fec9 	bl	80009fa <_close>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_close_r+0x1a>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_close_r+0x1a>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20004184 	.word	0x20004184

08005c78 <__sflush_r>:
 8005c78:	898a      	ldrh	r2, [r1, #12]
 8005c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7e:	4605      	mov	r5, r0
 8005c80:	0710      	lsls	r0, r2, #28
 8005c82:	460c      	mov	r4, r1
 8005c84:	d458      	bmi.n	8005d38 <__sflush_r+0xc0>
 8005c86:	684b      	ldr	r3, [r1, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc05      	bgt.n	8005c98 <__sflush_r+0x20>
 8005c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dc02      	bgt.n	8005c98 <__sflush_r+0x20>
 8005c92:	2000      	movs	r0, #0
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	d0f9      	beq.n	8005c92 <__sflush_r+0x1a>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ca4:	682f      	ldr	r7, [r5, #0]
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	d032      	beq.n	8005d10 <__sflush_r+0x98>
 8005caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	075a      	lsls	r2, r3, #29
 8005cb0:	d505      	bpl.n	8005cbe <__sflush_r+0x46>
 8005cb2:	6863      	ldr	r3, [r4, #4]
 8005cb4:	1ac0      	subs	r0, r0, r3
 8005cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cb8:	b10b      	cbz	r3, 8005cbe <__sflush_r+0x46>
 8005cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cbc:	1ac0      	subs	r0, r0, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cc4:	6a21      	ldr	r1, [r4, #32]
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b0      	blx	r6
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	d106      	bne.n	8005cde <__sflush_r+0x66>
 8005cd0:	6829      	ldr	r1, [r5, #0]
 8005cd2:	291d      	cmp	r1, #29
 8005cd4:	d82c      	bhi.n	8005d30 <__sflush_r+0xb8>
 8005cd6:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <__sflush_r+0x108>)
 8005cd8:	40ca      	lsrs	r2, r1
 8005cda:	07d6      	lsls	r6, r2, #31
 8005cdc:	d528      	bpl.n	8005d30 <__sflush_r+0xb8>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	6062      	str	r2, [r4, #4]
 8005ce2:	04d9      	lsls	r1, r3, #19
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	d504      	bpl.n	8005cf4 <__sflush_r+0x7c>
 8005cea:	1c42      	adds	r2, r0, #1
 8005cec:	d101      	bne.n	8005cf2 <__sflush_r+0x7a>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	b903      	cbnz	r3, 8005cf4 <__sflush_r+0x7c>
 8005cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8005cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf6:	602f      	str	r7, [r5, #0]
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d0ca      	beq.n	8005c92 <__sflush_r+0x1a>
 8005cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d00:	4299      	cmp	r1, r3
 8005d02:	d002      	beq.n	8005d0a <__sflush_r+0x92>
 8005d04:	4628      	mov	r0, r5
 8005d06:	f000 f8fb 	bl	8005f00 <_free_r>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8005d0e:	e7c1      	b.n	8005c94 <__sflush_r+0x1c>
 8005d10:	6a21      	ldr	r1, [r4, #32]
 8005d12:	2301      	movs	r3, #1
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b0      	blx	r6
 8005d18:	1c41      	adds	r1, r0, #1
 8005d1a:	d1c7      	bne.n	8005cac <__sflush_r+0x34>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0c4      	beq.n	8005cac <__sflush_r+0x34>
 8005d22:	2b1d      	cmp	r3, #29
 8005d24:	d001      	beq.n	8005d2a <__sflush_r+0xb2>
 8005d26:	2b16      	cmp	r3, #22
 8005d28:	d101      	bne.n	8005d2e <__sflush_r+0xb6>
 8005d2a:	602f      	str	r7, [r5, #0]
 8005d2c:	e7b1      	b.n	8005c92 <__sflush_r+0x1a>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	e7ad      	b.n	8005c94 <__sflush_r+0x1c>
 8005d38:	690f      	ldr	r7, [r1, #16]
 8005d3a:	2f00      	cmp	r7, #0
 8005d3c:	d0a9      	beq.n	8005c92 <__sflush_r+0x1a>
 8005d3e:	0793      	lsls	r3, r2, #30
 8005d40:	680e      	ldr	r6, [r1, #0]
 8005d42:	bf08      	it	eq
 8005d44:	694b      	ldreq	r3, [r1, #20]
 8005d46:	600f      	str	r7, [r1, #0]
 8005d48:	bf18      	it	ne
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	eba6 0807 	sub.w	r8, r6, r7
 8005d50:	608b      	str	r3, [r1, #8]
 8005d52:	f1b8 0f00 	cmp.w	r8, #0
 8005d56:	dd9c      	ble.n	8005c92 <__sflush_r+0x1a>
 8005d58:	6a21      	ldr	r1, [r4, #32]
 8005d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d5c:	4643      	mov	r3, r8
 8005d5e:	463a      	mov	r2, r7
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b0      	blx	r6
 8005d64:	2800      	cmp	r0, #0
 8005d66:	dc06      	bgt.n	8005d76 <__sflush_r+0xfe>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e78e      	b.n	8005c94 <__sflush_r+0x1c>
 8005d76:	4407      	add	r7, r0
 8005d78:	eba8 0800 	sub.w	r8, r8, r0
 8005d7c:	e7e9      	b.n	8005d52 <__sflush_r+0xda>
 8005d7e:	bf00      	nop
 8005d80:	20400001 	.word	0x20400001

08005d84 <_fflush_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	690b      	ldr	r3, [r1, #16]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b913      	cbnz	r3, 8005d94 <_fflush_r+0x10>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	b118      	cbz	r0, 8005d9e <_fflush_r+0x1a>
 8005d96:	6983      	ldr	r3, [r0, #24]
 8005d98:	b90b      	cbnz	r3, 8005d9e <_fflush_r+0x1a>
 8005d9a:	f7ff fc21 	bl	80055e0 <__sinit>
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <_fflush_r+0x6c>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	d11b      	bne.n	8005ddc <_fflush_r+0x58>
 8005da4:	686c      	ldr	r4, [r5, #4]
 8005da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0ef      	beq.n	8005d8e <_fflush_r+0xa>
 8005dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005db0:	07d0      	lsls	r0, r2, #31
 8005db2:	d404      	bmi.n	8005dbe <_fflush_r+0x3a>
 8005db4:	0599      	lsls	r1, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_fflush_r+0x3a>
 8005db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dba:	f7ff fcd4 	bl	8005766 <__retarget_lock_acquire_recursive>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f7ff ff59 	bl	8005c78 <__sflush_r>
 8005dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dc8:	07da      	lsls	r2, r3, #31
 8005dca:	4605      	mov	r5, r0
 8005dcc:	d4e0      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d4dd      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd6:	f7ff fcc7 	bl	8005768 <__retarget_lock_release_recursive>
 8005dda:	e7d9      	b.n	8005d90 <_fflush_r+0xc>
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <_fflush_r+0x70>)
 8005dde:	429c      	cmp	r4, r3
 8005de0:	d101      	bne.n	8005de6 <_fflush_r+0x62>
 8005de2:	68ac      	ldr	r4, [r5, #8]
 8005de4:	e7df      	b.n	8005da6 <_fflush_r+0x22>
 8005de6:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <_fflush_r+0x74>)
 8005de8:	429c      	cmp	r4, r3
 8005dea:	bf08      	it	eq
 8005dec:	68ec      	ldreq	r4, [r5, #12]
 8005dee:	e7da      	b.n	8005da6 <_fflush_r+0x22>
 8005df0:	080060a8 	.word	0x080060a8
 8005df4:	080060c8 	.word	0x080060c8
 8005df8:	08006088 	.word	0x08006088

08005dfc <_lseek_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	; (8005e1c <_lseek_r+0x20>)
 8005e00:	4604      	mov	r4, r0
 8005e02:	4608      	mov	r0, r1
 8005e04:	4611      	mov	r1, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fa fe1c 	bl	8000a48 <_lseek>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_lseek_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_lseek_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	20004184 	.word	0x20004184

08005e20 <__swhatbuf_r>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	460e      	mov	r6, r1
 8005e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	b096      	sub	sp, #88	; 0x58
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	461d      	mov	r5, r3
 8005e30:	da07      	bge.n	8005e42 <__swhatbuf_r+0x22>
 8005e32:	2300      	movs	r3, #0
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	89b3      	ldrh	r3, [r6, #12]
 8005e38:	061a      	lsls	r2, r3, #24
 8005e3a:	d410      	bmi.n	8005e5e <__swhatbuf_r+0x3e>
 8005e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e40:	e00e      	b.n	8005e60 <__swhatbuf_r+0x40>
 8005e42:	466a      	mov	r2, sp
 8005e44:	f000 f8be 	bl	8005fc4 <_fstat_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	dbf2      	blt.n	8005e32 <__swhatbuf_r+0x12>
 8005e4c:	9a01      	ldr	r2, [sp, #4]
 8005e4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e56:	425a      	negs	r2, r3
 8005e58:	415a      	adcs	r2, r3
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	e7ee      	b.n	8005e3c <__swhatbuf_r+0x1c>
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	2000      	movs	r0, #0
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	b016      	add	sp, #88	; 0x58
 8005e66:	bd70      	pop	{r4, r5, r6, pc}

08005e68 <__smakebuf_r>:
 8005e68:	898b      	ldrh	r3, [r1, #12]
 8005e6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e6c:	079d      	lsls	r5, r3, #30
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460c      	mov	r4, r1
 8005e72:	d507      	bpl.n	8005e84 <__smakebuf_r+0x1c>
 8005e74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	6163      	str	r3, [r4, #20]
 8005e80:	b002      	add	sp, #8
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	ab01      	add	r3, sp, #4
 8005e86:	466a      	mov	r2, sp
 8005e88:	f7ff ffca 	bl	8005e20 <__swhatbuf_r>
 8005e8c:	9900      	ldr	r1, [sp, #0]
 8005e8e:	4605      	mov	r5, r0
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff fc81 	bl	8005798 <_malloc_r>
 8005e96:	b948      	cbnz	r0, 8005eac <__smakebuf_r+0x44>
 8005e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9c:	059a      	lsls	r2, r3, #22
 8005e9e:	d4ef      	bmi.n	8005e80 <__smakebuf_r+0x18>
 8005ea0:	f023 0303 	bic.w	r3, r3, #3
 8005ea4:	f043 0302 	orr.w	r3, r3, #2
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	e7e3      	b.n	8005e74 <__smakebuf_r+0xc>
 8005eac:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <__smakebuf_r+0x7c>)
 8005eae:	62b3      	str	r3, [r6, #40]	; 0x28
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	6020      	str	r0, [r4, #0]
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	9b00      	ldr	r3, [sp, #0]
 8005ebc:	6163      	str	r3, [r4, #20]
 8005ebe:	9b01      	ldr	r3, [sp, #4]
 8005ec0:	6120      	str	r0, [r4, #16]
 8005ec2:	b15b      	cbz	r3, 8005edc <__smakebuf_r+0x74>
 8005ec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f000 f88d 	bl	8005fe8 <_isatty_r>
 8005ece:	b128      	cbz	r0, 8005edc <__smakebuf_r+0x74>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	f023 0303 	bic.w	r3, r3, #3
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	89a0      	ldrh	r0, [r4, #12]
 8005ede:	4305      	orrs	r5, r0
 8005ee0:	81a5      	strh	r5, [r4, #12]
 8005ee2:	e7cd      	b.n	8005e80 <__smakebuf_r+0x18>
 8005ee4:	08005579 	.word	0x08005579

08005ee8 <__malloc_lock>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__malloc_lock+0x8>)
 8005eea:	f7ff bc3c 	b.w	8005766 <__retarget_lock_acquire_recursive>
 8005eee:	bf00      	nop
 8005ef0:	2000417c 	.word	0x2000417c

08005ef4 <__malloc_unlock>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__malloc_unlock+0x8>)
 8005ef6:	f7ff bc37 	b.w	8005768 <__retarget_lock_release_recursive>
 8005efa:	bf00      	nop
 8005efc:	2000417c 	.word	0x2000417c

08005f00 <_free_r>:
 8005f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f02:	2900      	cmp	r1, #0
 8005f04:	d048      	beq.n	8005f98 <_free_r+0x98>
 8005f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f0a:	9001      	str	r0, [sp, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f12:	bfb8      	it	lt
 8005f14:	18e4      	addlt	r4, r4, r3
 8005f16:	f7ff ffe7 	bl	8005ee8 <__malloc_lock>
 8005f1a:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <_free_r+0x9c>)
 8005f1c:	9801      	ldr	r0, [sp, #4]
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	4615      	mov	r5, r2
 8005f22:	b933      	cbnz	r3, 8005f32 <_free_r+0x32>
 8005f24:	6063      	str	r3, [r4, #4]
 8005f26:	6014      	str	r4, [r2, #0]
 8005f28:	b003      	add	sp, #12
 8005f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f2e:	f7ff bfe1 	b.w	8005ef4 <__malloc_unlock>
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d90b      	bls.n	8005f4e <_free_r+0x4e>
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	1862      	adds	r2, r4, r1
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	bf04      	itt	eq
 8005f3e:	681a      	ldreq	r2, [r3, #0]
 8005f40:	685b      	ldreq	r3, [r3, #4]
 8005f42:	6063      	str	r3, [r4, #4]
 8005f44:	bf04      	itt	eq
 8005f46:	1852      	addeq	r2, r2, r1
 8005f48:	6022      	streq	r2, [r4, #0]
 8005f4a:	602c      	str	r4, [r5, #0]
 8005f4c:	e7ec      	b.n	8005f28 <_free_r+0x28>
 8005f4e:	461a      	mov	r2, r3
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	b10b      	cbz	r3, 8005f58 <_free_r+0x58>
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d9fa      	bls.n	8005f4e <_free_r+0x4e>
 8005f58:	6811      	ldr	r1, [r2, #0]
 8005f5a:	1855      	adds	r5, r2, r1
 8005f5c:	42a5      	cmp	r5, r4
 8005f5e:	d10b      	bne.n	8005f78 <_free_r+0x78>
 8005f60:	6824      	ldr	r4, [r4, #0]
 8005f62:	4421      	add	r1, r4
 8005f64:	1854      	adds	r4, r2, r1
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	6011      	str	r1, [r2, #0]
 8005f6a:	d1dd      	bne.n	8005f28 <_free_r+0x28>
 8005f6c:	681c      	ldr	r4, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	6053      	str	r3, [r2, #4]
 8005f72:	4421      	add	r1, r4
 8005f74:	6011      	str	r1, [r2, #0]
 8005f76:	e7d7      	b.n	8005f28 <_free_r+0x28>
 8005f78:	d902      	bls.n	8005f80 <_free_r+0x80>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	6003      	str	r3, [r0, #0]
 8005f7e:	e7d3      	b.n	8005f28 <_free_r+0x28>
 8005f80:	6825      	ldr	r5, [r4, #0]
 8005f82:	1961      	adds	r1, r4, r5
 8005f84:	428b      	cmp	r3, r1
 8005f86:	bf04      	itt	eq
 8005f88:	6819      	ldreq	r1, [r3, #0]
 8005f8a:	685b      	ldreq	r3, [r3, #4]
 8005f8c:	6063      	str	r3, [r4, #4]
 8005f8e:	bf04      	itt	eq
 8005f90:	1949      	addeq	r1, r1, r5
 8005f92:	6021      	streq	r1, [r4, #0]
 8005f94:	6054      	str	r4, [r2, #4]
 8005f96:	e7c7      	b.n	8005f28 <_free_r+0x28>
 8005f98:	b003      	add	sp, #12
 8005f9a:	bd30      	pop	{r4, r5, pc}
 8005f9c:	20004094 	.word	0x20004094

08005fa0 <_read_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d07      	ldr	r5, [pc, #28]	; (8005fc0 <_read_r+0x20>)
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	4608      	mov	r0, r1
 8005fa8:	4611      	mov	r1, r2
 8005faa:	2200      	movs	r2, #0
 8005fac:	602a      	str	r2, [r5, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f7fa fcea 	bl	8000988 <_read>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_read_r+0x1e>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_read_r+0x1e>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20004184 	.word	0x20004184

08005fc4 <_fstat_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	; (8005fe4 <_fstat_r+0x20>)
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	4611      	mov	r1, r2
 8005fd0:	602b      	str	r3, [r5, #0]
 8005fd2:	f7fa fd1e 	bl	8000a12 <_fstat>
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d102      	bne.n	8005fe0 <_fstat_r+0x1c>
 8005fda:	682b      	ldr	r3, [r5, #0]
 8005fdc:	b103      	cbz	r3, 8005fe0 <_fstat_r+0x1c>
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	bd38      	pop	{r3, r4, r5, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20004184 	.word	0x20004184

08005fe8 <_isatty_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d06      	ldr	r5, [pc, #24]	; (8006004 <_isatty_r+0x1c>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fa fd1d 	bl	8000a32 <_isatty>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_isatty_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_isatty_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20004184 	.word	0x20004184

08006008 <_init>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr

08006014 <_fini>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr
