
ese_tp_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006494  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d0  080067d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d8  080067d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040b4  20000074  08006854  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004128  08006854  00024128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188e0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ff  00000000  00000000  00038984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003c088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fa3  00000000  00000000  0003e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f49  00000000  00000000  00067593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f988f  00000000  00000000  0007d4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b8  00000000  00000000  00176dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800664c 	.word	0x0800664c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800664c 	.word	0x0800664c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <vApplicationGetIdleTaskMemory+0x30>)
 80005be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000090 	.word	0x20000090
 80005d8:	200000e4 	.word	0x200000e4

080005dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_FREERTOS_Init+0x30>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fef1 	bl	80033e0 <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <MX_FREERTOS_Init+0x34>)
 8000602:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bdb0      	pop	{r4, r5, r7, pc}
 800060c:	08006670 	.word	0x08006670
 8000610:	2000403c 	.word	0x2000403c

08000614 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f002 ff2b 	bl	8003478 <osDelay>
 8000622:	e7fb      	b.n	800061c <StartDefaultTask+0x8>

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0x5c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_GPIO_Init+0x5c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	2201      	movs	r2, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <__io_putchar+0x20>)
 8000696:	f002 fa3d 	bl	8002b14 <HAL_UART_Transmit>
	return ch;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20004090 	.word	0x20004090

080006a8 <vTask1>:

void vTask1(void * pvParameters) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	int delay = (int) pvParameters;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	60fb      	str	r3, [r7, #12]

	while(1) {
		xSemaphoreTake(semMutex,portMAX_DELAY);
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <vTask1+0x3c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f04f 31ff 	mov.w	r1, #4294967295
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f9a7 	bl	8003a10 <xQueueSemaphoreTake>
		printf("Je suis la tache 1 et je m'endors pour %d ticks\r\n", delay);
 80006c2:	68f9      	ldr	r1, [r7, #12]
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <vTask1+0x40>)
 80006c6:	f004 fff5 	bl	80056b4 <iprintf>
		xSemaphoreGive(semMutex);
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <vTask1+0x3c>)
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	f003 f896 	bl	8003804 <xQueueGenericSend>
		vTaskDelay(delay);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fd4a 	bl	8004174 <vTaskDelay>
		xSemaphoreTake(semMutex,portMAX_DELAY);
 80006e0:	e7e8      	b.n	80006b4 <vTask1+0xc>
 80006e2:	bf00      	nop
 80006e4:	20004040 	.word	0x20004040
 80006e8:	0800668c 	.word	0x0800668c

080006ec <vTask2>:
	}
}

void vTask2(void * pvParameters) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	int delay = (int) pvParameters;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	60fb      	str	r3, [r7, #12]

	while(1) {
		xSemaphoreTake(semMutex,portMAX_DELAY);
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <vTask2+0x3c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	4618      	mov	r0, r3
 8000702:	f003 f985 	bl	8003a10 <xQueueSemaphoreTake>
		printf("Je suis la tache 2 et je m'endors pour %d ticks\r\n", delay);
 8000706:	68f9      	ldr	r1, [r7, #12]
 8000708:	4808      	ldr	r0, [pc, #32]	; (800072c <vTask2+0x40>)
 800070a:	f004 ffd3 	bl	80056b4 <iprintf>
		xSemaphoreGive(semMutex);
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <vTask2+0x3c>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	f003 f874 	bl	8003804 <xQueueGenericSend>
		vTaskDelay(delay);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fd28 	bl	8004174 <vTaskDelay>
		xSemaphoreTake(semMutex,portMAX_DELAY);
 8000724:	e7e8      	b.n	80006f8 <vTask2+0xc>
 8000726:	bf00      	nop
 8000728:	20004040 	.word	0x20004040
 800072c:	080066c0 	.word	0x080066c0

08000730 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandle2 = NULL;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800073e:	f000 fb14 	bl	8000d6a <HAL_Init>

	/* USER CODE BEGIN Init */
	printf("\r\n==== TP1 Q4 ====\r\n");
 8000742:	4826      	ldr	r0, [pc, #152]	; (80007dc <main+0xac>)
 8000744:	f005 f83c 	bl	80057c0 <puts>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000748:	f000 f854 	bl	80007f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800074c:	f7ff ff6a 	bl	8000624 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000750:	f000 fa50 	bl	8000bf4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	semMutex = xSemaphoreCreateMutex();
 8000754:	2001      	movs	r0, #1
 8000756:	f003 f83c 	bl	80037d2 <xQueueCreateMutex>
 800075a:	4603      	mov	r3, r0
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <main+0xb0>)
 800075e:	6013      	str	r3, [r2, #0]

	/* Create the task, storing the handle. */
	xReturned = xTaskCreate(vTask1, "Tache 1", STACK_SIZE, ( void * ) TASK1_DELAY, TASK1_PRIORITY, &xHandle1);
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000770:	491c      	ldr	r1, [pc, #112]	; (80007e4 <main+0xb4>)
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <main+0xb8>)
 8000774:	f003 fbc5 	bl	8003f02 <xTaskCreate>
 8000778:	6178      	str	r0, [r7, #20]
	configASSERT(xReturned == pdPASS);
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d00c      	beq.n	800079a <main+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000784:	b672      	cpsid	i
 8000786:	f383 8811 	msr	BASEPRI, r3
 800078a:	f3bf 8f6f 	isb	sy
 800078e:	f3bf 8f4f 	dsb	sy
 8000792:	b662      	cpsie	i
 8000794:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000796:	bf00      	nop
 8000798:	e7fe      	b.n	8000798 <main+0x68>
	xReturned = xTaskCreate(vTask2, "Tache 2", STACK_SIZE, ( void * ) TASK2_DELAY, TASK2_PRIORITY, &xHandle2);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	2302      	movs	r3, #2
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2314      	movs	r3, #20
 80007a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a8:	4910      	ldr	r1, [pc, #64]	; (80007ec <main+0xbc>)
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <main+0xc0>)
 80007ac:	f003 fba9 	bl	8003f02 <xTaskCreate>
 80007b0:	6178      	str	r0, [r7, #20]
	configASSERT(xReturned == pdPASS);
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d00c      	beq.n	80007d2 <main+0xa2>
	__asm volatile
 80007b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007bc:	b672      	cpsid	i
 80007be:	f383 8811 	msr	BASEPRI, r3
 80007c2:	f3bf 8f6f 	isb	sy
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	b662      	cpsie	i
 80007cc:	60fb      	str	r3, [r7, #12]
}
 80007ce:	bf00      	nop
 80007d0:	e7fe      	b.n	80007d0 <main+0xa0>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80007d2:	f7ff ff03 	bl	80005dc <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80007d6:	f002 fdfc 	bl	80033d2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80007da:	e7fe      	b.n	80007da <main+0xaa>
 80007dc:	080066f4 	.word	0x080066f4
 80007e0:	20004040 	.word	0x20004040
 80007e4:	08006708 	.word	0x08006708
 80007e8:	080006a9 	.word	0x080006a9
 80007ec:	08006710 	.word	0x08006710
 80007f0:	080006ed 	.word	0x080006ed

080007f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0b4      	sub	sp, #208	; 0xd0
 80007f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 ff4e 	bl	80056a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2284      	movs	r2, #132	; 0x84
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f004 ff3f 	bl	80056a4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <SystemClock_Config+0x118>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a38      	ldr	r2, [pc, #224]	; (800090c <SystemClock_Config+0x118>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <SystemClock_Config+0x118>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <SystemClock_Config+0x11c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a33      	ldr	r2, [pc, #204]	; (8000910 <SystemClock_Config+0x11c>)
 8000844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <SystemClock_Config+0x11c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000856:	2302      	movs	r3, #2
 8000858:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	2310      	movs	r3, #16
 8000864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000874:	2308      	movs	r3, #8
 8000876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 216;
 800087a:	23d8      	movs	r3, #216	; 0xd8
 800087c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000880:	2302      	movs	r3, #2
 8000882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fd75 	bl	8001380 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xac>
	{
		Error_Handler();
 800089c:	f000 f84c 	bl	8000938 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a0:	f000 fd1e 	bl	80012e0 <HAL_PWREx_EnableOverDrive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xba>
	{
		Error_Handler();
 80008aa:	f000 f845 	bl	8000938 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008d4:	2107      	movs	r1, #7
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fff6 	bl	80018c8 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 80008e2:	f000 f829 	bl	8000938 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008ea:	2300      	movs	r3, #0
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f9f0 	bl	8001cd8 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x10e>
	{
		Error_Handler();
 80008fe:	f000 f81b 	bl	8000938 <Error_Handler>
	}
}
 8000902:	bf00      	nop
 8000904:	37d0      	adds	r7, #208	; 0xd0
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000926:	f000 fa2d 	bl	8000d84 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001000 	.word	0x40001000

08000938 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fad5 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2036      	movs	r0, #54	; 0x36
 80009ae:	f000 fac1 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009b2:	2036      	movs	r0, #54	; 0x36
 80009b4:	f000 fada 	bl	8000f6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xa0>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_InitTick+0xa0>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xa0>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 0210 	add.w	r2, r7, #16
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f94a 	bl	8001c74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009e0:	f001 f920 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 80009e4:	4603      	mov	r3, r0
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_InitTick+0xa4>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_InitTick+0xa8>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_InitTick+0xac>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a1a:	f001 fd4d 	bl	80024b8 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a26:	f001 fda9 	bl	800257c <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	20004044 	.word	0x20004044
 8000a44:	40001000 	.word	0x40001000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM6_DAC_IRQHandler+0x10>)
 8000a7a:	f001 fdf7 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20004044 	.word	0x20004044

08000a88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
	}

return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e009      	b.n	8000ae8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fdd1 	bl	8000684 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf1      	blt.n	8000ad4 <_write+0x12>
	}
	return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f004 fd4e 	bl	8005634 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20050000 	.word	0x20050000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200002e4 	.word	0x200002e4
 8000bcc:	20004128 	.word	0x20004128

08000bd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_USART1_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c38:	f001 ff1e 	bl	8002a78 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c42:	f7ff fe79 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20004090 	.word	0x20004090
 8000c50:	40011000 	.word	0x40011000

08000c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <HAL_UART_MspInit+0xb4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d144      	bne.n	8000d00 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_UART_MspInit+0xb8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <HAL_UART_MspInit+0xbc>)
 8000cda:	f000 f955 	bl	8000f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_UART_MspInit+0xc0>)
 8000cfc:	f000 f944 	bl	8000f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40020000 	.word	0x40020000

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d34:	4c0b      	ldr	r4, [pc, #44]	; (8000d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d42:	f7ff ff45 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f004 fc7b 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fcf1 	bl	8000730 <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d5c:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8000d60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d64:	20004128 	.word	0x20004128

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>

08000d6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f000 f8d5 	bl	8000f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d74:	200f      	movs	r0, #15
 8000d76:	f7ff fe0f 	bl	8000998 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d7a:	f7ff fde5 	bl	8000948 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20004114 	.word	0x20004114

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20004114 	.word	0x20004114

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x40>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00
 8000e08:	05fa0000 	.word	0x05fa0000

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff4c 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f46:	f7ff ff61 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f7ff ffb1 	bl	8000eb8 <NVIC_EncodePriority>
 8000f56:	4602      	mov	r2, r0
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff80 	bl	8000e64 <__NVIC_SetPriority>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff54 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e175      	b.n	8001294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8164 	bne.w	800128e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_GPIO_Init+0x5e>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fda:	2b11      	cmp	r3, #17
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x100>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b12      	cmp	r3, #18
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80be 	beq.w	800128e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b66      	ldr	r3, [pc, #408]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a65      	ldr	r2, [pc, #404]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <HAL_GPIO_Init+0x324>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800112a:	4a61      	ldr	r2, [pc, #388]	; (80012b0 <HAL_GPIO_Init+0x328>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_GPIO_Init+0x32c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d037      	beq.n	80011c6 <HAL_GPIO_Init+0x23e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a57      	ldr	r2, [pc, #348]	; (80012b8 <HAL_GPIO_Init+0x330>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d031      	beq.n	80011c2 <HAL_GPIO_Init+0x23a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a56      	ldr	r2, [pc, #344]	; (80012bc <HAL_GPIO_Init+0x334>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x236>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a55      	ldr	r2, [pc, #340]	; (80012c0 <HAL_GPIO_Init+0x338>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x232>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x33c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x22e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a53      	ldr	r2, [pc, #332]	; (80012c8 <HAL_GPIO_Init+0x340>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x22a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x344>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x226>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a51      	ldr	r2, [pc, #324]	; (80012d0 <HAL_GPIO_Init+0x348>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x222>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <HAL_GPIO_Init+0x34c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x21e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x350>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x21a>
 800119e:	2309      	movs	r3, #9
 80011a0:	e012      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011a2:	230a      	movs	r3, #10
 80011a4:	e010      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011a6:	2308      	movs	r3, #8
 80011a8:	e00e      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011aa:	2307      	movs	r3, #7
 80011ac:	e00c      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011ae:	2306      	movs	r3, #6
 80011b0:	e00a      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x240>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	; (80012b0 <HAL_GPIO_Init+0x328>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_GPIO_Init+0x354>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800120a:	4a34      	ldr	r2, [pc, #208]	; (80012dc <HAL_GPIO_Init+0x354>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_GPIO_Init+0x354>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_GPIO_Init+0x354>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_GPIO_Init+0x354>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f ae86 	bls.w	8000fa8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40022000 	.word	0x40022000
 80012d8:	40022400 	.word	0x40022400
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_PWREx_EnableOverDrive+0x98>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a22      	ldr	r2, [pc, #136]	; (8001378 <HAL_PWREx_EnableOverDrive+0x98>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_PWREx_EnableOverDrive+0x98>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800130e:	f7ff fd4d 	bl	8000dac <HAL_GetTick>
 8001312:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001314:	e009      	b.n	800132a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001316:	f7ff fd49 	bl	8000dac <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001324:	d901      	bls.n	800132a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e022      	b.n	8001370 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_PWREx_EnableOverDrive+0x9c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d1ee      	bne.n	8001316 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_PWREx_EnableOverDrive+0x9c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_PWREx_EnableOverDrive+0x9c>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001342:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001344:	f7ff fd32 	bl	8000dac <HAL_GetTick>
 8001348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800134a:	e009      	b.n	8001360 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134c:	f7ff fd2e 	bl	8000dac <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800135a:	d901      	bls.n	8001360 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e007      	b.n	8001370 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800136c:	d1ee      	bne.n	800134c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e291      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8087 	beq.w	80014b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a4:	4b96      	ldr	r3, [pc, #600]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d00c      	beq.n	80013ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b0:	4b93      	ldr	r3, [pc, #588]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d112      	bne.n	80013e2 <HAL_RCC_OscConfig+0x62>
 80013bc:	4b90      	ldr	r3, [pc, #576]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c8:	d10b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ca:	4b8d      	ldr	r3, [pc, #564]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d06c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x130>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d168      	bne.n	80014b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e26b      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x7a>
 80013ec:	4b84      	ldr	r3, [pc, #528]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a83      	ldr	r2, [pc, #524]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80013f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e02e      	b.n	8001458 <HAL_RCC_OscConfig+0xd8>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x9c>
 8001402:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a7e      	ldr	r2, [pc, #504]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a7b      	ldr	r2, [pc, #492]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xd8>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0xc0>
 8001426:	4b76      	ldr	r3, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a75      	ldr	r2, [pc, #468]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b73      	ldr	r3, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a72      	ldr	r2, [pc, #456]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xd8>
 8001440:	4b6f      	ldr	r3, [pc, #444]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a6e      	ldr	r2, [pc, #440]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6b      	ldr	r2, [pc, #428]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fca4 	bl	8000dac <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fca0 	bl	8000dac <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e21f      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xe8>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc90 	bl	8000dac <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc8c 	bl	8000dac <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e20b      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b57      	ldr	r3, [pc, #348]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x110>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d069      	beq.n	8001592 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014be:	4b50      	ldr	r3, [pc, #320]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d11c      	bne.n	8001510 <HAL_RCC_OscConfig+0x190>
 80014d6:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b47      	ldr	r3, [pc, #284]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x17a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e1df      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	493d      	ldr	r1, [pc, #244]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e040      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a38      	ldr	r2, [pc, #224]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fc42 	bl	8000dac <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fc3e 	bl	8000dac <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1bd      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4929      	ldr	r1, [pc, #164]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
 800155e:	e018      	b.n	8001592 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a26      	ldr	r2, [pc, #152]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc1e 	bl	8000dac <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fc1a 	bl	8000dac <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e199      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d038      	beq.n	8001610 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d019      	beq.n	80015da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80015a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fbfb 	bl	8000dac <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fbf7 	bl	8000dac <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e176      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80015ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x23a>
 80015d8:	e01a      	b.n	8001610 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80015dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_RCC_OscConfig+0x280>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbe1 	bl	8000dac <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbdd 	bl	8000dac <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d903      	bls.n	8001604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e15c      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
 8001600:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b91      	ldr	r3, [pc, #580]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ee      	bne.n	80015ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a4 	beq.w	8001766 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b8b      	ldr	r3, [pc, #556]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a87      	ldr	r2, [pc, #540]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	4b82      	ldr	r3, [pc, #520]	; (8001850 <HAL_RCC_OscConfig+0x4d0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001652:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7e      	ldr	r2, [pc, #504]	; (8001850 <HAL_RCC_OscConfig+0x4d0>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fba5 	bl	8000dac <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fba1 	bl	8000dac <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e120      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001678:	4b75      	ldr	r3, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x4d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x31a>
 800168c:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e02d      	b.n	80016f6 <HAL_RCC_OscConfig+0x376>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x33c>
 80016a2:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a66      	ldr	r2, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	e01c      	b.n	80016f6 <HAL_RCC_OscConfig+0x376>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x35e>
 80016c4:	4b61      	ldr	r3, [pc, #388]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a60      	ldr	r2, [pc, #384]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0x376>
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a5a      	ldr	r2, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d015      	beq.n	800172a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb55 	bl	8000dac <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fb51 	bl	8000dac <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0ce      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ee      	beq.n	8001706 <HAL_RCC_OscConfig+0x386>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff fb3f 	bl	8000dac <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb3b 	bl	8000dac <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0b8      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80a4 	beq.w	80018b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d06b      	beq.n	8001854 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d149      	bne.n	8001818 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001784:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a30      	ldr	r2, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800178a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fb0c 	bl	8000dac <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff fb08 	bl	8000dac <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e087      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	4313      	orrs	r3, r2
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80017de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fadc 	bl	8000dac <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fad8 	bl	8000dac <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e057      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x478>
 8001816:	e04f      	b.n	80018b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800181e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fac2 	bl	8000dac <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff fabe 	bl	8000dac <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e03d      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x4ac>
 800184a:	e035      	b.n	80018b8 <HAL_RCC_OscConfig+0x538>
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x544>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d028      	beq.n	80018b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d121      	bne.n	80018b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d11a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800188a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800188c:	4293      	cmp	r3, r2
 800188e:	d111      	bne.n	80018b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	3b01      	subs	r3, #1
 800189e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 020f 	bic.w	r2, r3, #15
 80018f6:	4965      	ldr	r1, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001932:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800194a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019bc:	f7ff f9f6 	bl	8000dac <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff f9f2 	bl	8000dac <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 020f 	bic.w	r2, r3, #15
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1cc>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1d0>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1d4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe ff8c 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08006720 	.word	0x08006720
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	6079      	str	r1, [r7, #4]
 8001aaa:	2100      	movs	r1, #0
 8001aac:	60f9      	str	r1, [r7, #12]
 8001aae:	2100      	movs	r1, #0
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab6:	4952      	ldr	r1, [pc, #328]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ab8:	6889      	ldr	r1, [r1, #8]
 8001aba:	f001 010c 	and.w	r1, r1, #12
 8001abe:	2908      	cmp	r1, #8
 8001ac0:	d00d      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x3e>
 8001ac2:	2908      	cmp	r1, #8
 8001ac4:	f200 8094 	bhi.w	8001bf0 <HAL_RCC_GetSysClockFreq+0x150>
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x32>
 8001acc:	2904      	cmp	r1, #4
 8001ace:	d003      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ad0:	e08e      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e08e      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ada:	60bb      	str	r3, [r7, #8]
      break;
 8001adc:	e08b      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ade:	4948      	ldr	r1, [pc, #288]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ae0:	6849      	ldr	r1, [r1, #4]
 8001ae2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ae6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ae8:	4945      	ldr	r1, [pc, #276]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aea:	6849      	ldr	r1, [r1, #4]
 8001aec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001af0:	2900      	cmp	r1, #0
 8001af2:	d024      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af4:	4942      	ldr	r1, [pc, #264]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001af6:	6849      	ldr	r1, [r1, #4]
 8001af8:	0989      	lsrs	r1, r1, #6
 8001afa:	4608      	mov	r0, r1
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b04:	f04f 0500 	mov.w	r5, #0
 8001b08:	ea00 0204 	and.w	r2, r0, r4
 8001b0c:	ea01 0305 	and.w	r3, r1, r5
 8001b10:	493d      	ldr	r1, [pc, #244]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b12:	fb01 f003 	mul.w	r0, r1, r3
 8001b16:	2100      	movs	r1, #0
 8001b18:	fb01 f102 	mul.w	r1, r1, r2
 8001b1c:	1844      	adds	r4, r0, r1
 8001b1e:	493a      	ldr	r1, [pc, #232]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b20:	fba2 0101 	umull	r0, r1, r2, r1
 8001b24:	1863      	adds	r3, r4, r1
 8001b26:	4619      	mov	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	f7fe fbbe 	bl	80002b0 <__aeabi_uldivmod>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e04a      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	099b      	lsrs	r3, r3, #6
 8001b44:	461a      	mov	r2, r3
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	ea02 0400 	and.w	r4, r2, r0
 8001b56:	ea03 0501 	and.w	r5, r3, r1
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	014b      	lsls	r3, r1, #5
 8001b68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b6c:	0142      	lsls	r2, r0, #5
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	1b00      	subs	r0, r0, r4
 8001b74:	eb61 0105 	sbc.w	r1, r1, r5
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	018b      	lsls	r3, r1, #6
 8001b82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b86:	0182      	lsls	r2, r0, #6
 8001b88:	1a12      	subs	r2, r2, r0
 8001b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8e:	f04f 0000 	mov.w	r0, #0
 8001b92:	f04f 0100 	mov.w	r1, #0
 8001b96:	00d9      	lsls	r1, r3, #3
 8001b98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b9c:	00d0      	lsls	r0, r2, #3
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	1912      	adds	r2, r2, r4
 8001ba4:	eb45 0303 	adc.w	r3, r5, r3
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	0299      	lsls	r1, r3, #10
 8001bb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bb6:	0290      	lsls	r0, r2, #10
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	f7fe fb72 	bl	80002b0 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	3301      	adds	r3, #1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	60bb      	str	r3, [r7, #8]
      break;
 8001bee:	e002      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x164>)
 8001bf2:	60bb      	str	r3, [r7, #8]
      break;
 8001bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	017d7840 	.word	0x017d7840

08001c0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08006730 	.word	0x08006730

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffdc 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0b5b      	lsrs	r3, r3, #13
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08006730 	.word	0x08006730

08001c74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	220f      	movs	r2, #15
 8001c82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_RCC_GetClockConfig+0x60>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d012      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d00:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a68      	ldr	r2, [pc, #416]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d0a:	6093      	str	r3, [r2, #8]
 8001d0c:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d14:	4964      	ldr	r1, [pc, #400]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d017      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d40:	4959      	ldr	r1, [pc, #356]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d50:	d101      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d017      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 808b 	beq.w	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	4a39      	ldr	r2, [pc, #228]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc8:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe ffe4 	bl	8000dac <HAL_GetTick>
 8001de4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de8:	f7fe ffe0 	bl	8000dac <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e357      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d035      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d02e      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d114      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe ffa8 	bl	8000dac <HAL_GetTick>
 8001e5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7fe ffa4 	bl	8000dac <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e319      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e8e:	d111      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	4901      	ldr	r1, [pc, #4]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	0ffffcff 	.word	0x0ffffcff
 8001eb4:	4bb1      	ldr	r3, [pc, #708]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4ab0      	ldr	r2, [pc, #704]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ebe:	6093      	str	r3, [r2, #8]
 8001ec0:	4bae      	ldr	r3, [pc, #696]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ecc:	49ab      	ldr	r1, [pc, #684]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ede:	4ba7      	ldr	r3, [pc, #668]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee4:	4aa5      	ldr	r2, [pc, #660]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eee:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ef0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	49a0      	ldr	r1, [pc, #640]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f0c:	4b9b      	ldr	r3, [pc, #620]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f1a:	4998      	ldr	r1, [pc, #608]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f2e:	4b93      	ldr	r3, [pc, #588]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f3c:	498f      	ldr	r1, [pc, #572]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f50:	4b8a      	ldr	r3, [pc, #552]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5e:	4987      	ldr	r1, [pc, #540]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	497e      	ldr	r1, [pc, #504]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4976      	ldr	r1, [pc, #472]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb6:	4b71      	ldr	r3, [pc, #452]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f023 020c 	bic.w	r2, r3, #12
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	496d      	ldr	r1, [pc, #436]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fd8:	4b68      	ldr	r3, [pc, #416]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4965      	ldr	r1, [pc, #404]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ffa:	4b60      	ldr	r3, [pc, #384]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002008:	495c      	ldr	r1, [pc, #368]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800201c:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	4954      	ldr	r1, [pc, #336]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800203e:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	494b      	ldr	r1, [pc, #300]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	4943      	ldr	r1, [pc, #268]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002082:	4b3e      	ldr	r3, [pc, #248]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	493a      	ldr	r1, [pc, #232]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b2:	4932      	ldr	r1, [pc, #200]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d011      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020d4:	4929      	ldr	r1, [pc, #164]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e4:	d101      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	4919      	ldr	r1, [pc, #100]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002138:	4910      	ldr	r1, [pc, #64]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d006      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80d9 	beq.w	8002306 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800215a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800215e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002160:	f7fe fe24 	bl	8000dac <HAL_GetTick>
 8002164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002166:	e00b      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002168:	f7fe fe20 	bl	8000dac <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d904      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e197      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002180:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ed      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d021      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11d      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021a0:	4b64      	ldr	r3, [pc, #400]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b4:	0e1b      	lsrs	r3, r3, #24
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	019a      	lsls	r2, r3, #6
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	071b      	lsls	r3, r3, #28
 80021d4:	4957      	ldr	r1, [pc, #348]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d02e      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002206:	d129      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002208:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800220a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221c:	0f1b      	lsrs	r3, r3, #28
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	019a      	lsls	r2, r3, #6
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	431a      	orrs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	071b      	lsls	r3, r3, #28
 800223c:	493d      	ldr	r1, [pc, #244]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002244:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224a:	f023 021f 	bic.w	r2, r3, #31
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	4937      	ldr	r1, [pc, #220]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01d      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002268:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226e:	0e1b      	lsrs	r3, r3, #24
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002276:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227c:	0f1b      	lsrs	r3, r3, #28
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	019a      	lsls	r2, r3, #6
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	431a      	orrs	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	431a      	orrs	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	071b      	lsls	r3, r3, #28
 800229c:	4925      	ldr	r1, [pc, #148]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d011      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	019a      	lsls	r2, r3, #6
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	061b      	lsls	r3, r3, #24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	071b      	lsls	r3, r3, #28
 80022cc:	4919      	ldr	r1, [pc, #100]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e0:	f7fe fd64 	bl	8000dac <HAL_GetTick>
 80022e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022e8:	f7fe fd60 	bl	8000dac <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0d7      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b01      	cmp	r3, #1
 800230a:	f040 80cd 	bne.w	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231a:	f7fe fd47 	bl	8000dac <HAL_GetTick>
 800231e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002322:	f7fe fd43 	bl	8000dac <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d903      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0ba      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002334:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002338:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002344:	d0ed      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02e      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12a      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800236e:	4b51      	ldr	r3, [pc, #324]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	0f1b      	lsrs	r3, r3, #28
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	019a      	lsls	r2, r3, #6
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	071b      	lsls	r3, r3, #28
 80023a2:	4944      	ldr	r1, [pc, #272]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023aa:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	493d      	ldr	r1, [pc, #244]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d022      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d8:	d11d      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023da:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	0e1b      	lsrs	r3, r3, #24
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023e8:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	0f1b      	lsrs	r3, r3, #28
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	019a      	lsls	r2, r3, #6
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	071b      	lsls	r3, r3, #28
 800240e:	4929      	ldr	r1, [pc, #164]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d028      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	0e1b      	lsrs	r3, r3, #24
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	019a      	lsls	r2, r3, #6
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	431a      	orrs	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	071b      	lsls	r3, r3, #28
 8002456:	4917      	ldr	r1, [pc, #92]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	4911      	ldr	r1, [pc, #68]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fc94 	bl	8000dac <HAL_GetTick>
 8002484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002488:	f7fe fc90 	bl	8000dac <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e007      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a6:	d1ef      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e049      	b.n	800255e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f841 	bl	8002566 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fa00 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e054      	b.n	800263e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <HAL_TIM_Base_Start_IT+0xd0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d022      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x80>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025be:	d01d      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x80>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_TIM_Base_Start_IT+0xd4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d018      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x80>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_TIM_Base_Start_IT+0xd8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x80>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_TIM_Base_Start_IT+0xdc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x80>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_TIM_Base_Start_IT+0xe0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d009      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x80>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_TIM_Base_Start_IT+0xe4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x80>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_TIM_Base_Start_IT+0xe8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d115      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_TIM_Base_Start_IT+0xec>)
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d015      	beq.n	800263a <HAL_TIM_Base_Start_IT+0xbe>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d011      	beq.n	800263a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e008      	b.n	800263a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e000      	b.n	800263c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40010000 	.word	0x40010000
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800
 8002658:	40000c00 	.word	0x40000c00
 800265c:	40010400 	.word	0x40010400
 8002660:	40014000 	.word	0x40014000
 8002664:	40001800 	.word	0x40001800
 8002668:	00010007 	.word	0x00010007

0800266c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0202 	mvn.w	r2, #2
 8002698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f905 	bl	80028be <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8f7 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f908 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0204 	mvn.w	r2, #4
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8db 	bl	80028be <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8cd 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f8de 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b08      	cmp	r3, #8
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b08      	cmp	r3, #8
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0208 	mvn.w	r2, #8
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8b1 	bl	80028be <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8a3 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f8b4 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0210 	mvn.w	r2, #16
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2208      	movs	r2, #8
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f887 	bl	80028be <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f879 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f88a 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0201 	mvn.w	r2, #1
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe f892 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f91a 	bl	8002a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282a:	d10e      	bne.n	800284a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d107      	bne.n	800284a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f90d 	bl	8002a64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d10e      	bne.n	8002876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d107      	bne.n	8002876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800286e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f838 	bl	80028e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d10e      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b20      	cmp	r3, #32
 8002890:	d107      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f06f 0220 	mvn.w	r2, #32
 800289a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f8cd 	bl	8002a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a40      	ldr	r2, [pc, #256]	; (8002a10 <TIM_Base_SetConfig+0x114>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d013      	beq.n	800293c <TIM_Base_SetConfig+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d00f      	beq.n	800293c <TIM_Base_SetConfig+0x40>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3d      	ldr	r2, [pc, #244]	; (8002a14 <TIM_Base_SetConfig+0x118>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00b      	beq.n	800293c <TIM_Base_SetConfig+0x40>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <TIM_Base_SetConfig+0x11c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x40>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <TIM_Base_SetConfig+0x120>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x40>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a3a      	ldr	r2, [pc, #232]	; (8002a20 <TIM_Base_SetConfig+0x124>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <TIM_Base_SetConfig+0x114>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d02b      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d027      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <TIM_Base_SetConfig+0x118>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d023      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <TIM_Base_SetConfig+0x11c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01f      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a2a      	ldr	r2, [pc, #168]	; (8002a1c <TIM_Base_SetConfig+0x120>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01b      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <TIM_Base_SetConfig+0x124>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d017      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <TIM_Base_SetConfig+0x128>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <TIM_Base_SetConfig+0x12c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00f      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a26      	ldr	r2, [pc, #152]	; (8002a2c <TIM_Base_SetConfig+0x130>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00b      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <TIM_Base_SetConfig+0x134>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a24      	ldr	r2, [pc, #144]	; (8002a34 <TIM_Base_SetConfig+0x138>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <TIM_Base_SetConfig+0x13c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d108      	bne.n	80029c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <TIM_Base_SetConfig+0x114>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0xf8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <TIM_Base_SetConfig+0x124>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d103      	bne.n	80029fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	615a      	str	r2, [r3, #20]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	40010400 	.word	0x40010400
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800
 8002a30:	40001800 	.word	0x40001800
 8002a34:	40001c00 	.word	0x40001c00
 8002a38:	40002000 	.word	0x40002000

08002a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e040      	b.n	8002b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe f8da 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8c0 	bl	8002c3c <UART_SetConfig>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e022      	b.n	8002b0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fb16 	bl	8003100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fb9d 	bl	8003244 <UART_CheckIdleState>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	f040 8081 	bne.w	8002c30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_UART_Transmit+0x26>
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e079      	b.n	8002c32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_UART_Transmit+0x38>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e072      	b.n	8002c32 <HAL_UART_Transmit+0x11e>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2221      	movs	r2, #33	; 0x21
 8002b60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b62:	f7fe f923 	bl	8000dac <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b80:	d108      	bne.n	8002b94 <HAL_UART_Transmit+0x80>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e003      	b.n	8002b9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ba4:	e02c      	b.n	8002c00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2180      	movs	r1, #128	; 0x80
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fb7a 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e038      	b.n	8002c32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e007      	b.n	8002bee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3301      	adds	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1cc      	bne.n	8002ba6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2200      	movs	r2, #0
 8002c14:	2140      	movs	r1, #64	; 0x40
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fb47 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e005      	b.n	8002c32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4ba7      	ldr	r3, [pc, #668]	; (8002f04 <UART_SetConfig+0x2c8>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	6979      	ldr	r1, [r7, #20]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a95      	ldr	r2, [pc, #596]	; (8002f08 <UART_SetConfig+0x2cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d120      	bne.n	8002cfa <UART_SetConfig+0xbe>
 8002cb8:	4b94      	ldr	r3, [pc, #592]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d816      	bhi.n	8002cf4 <UART_SetConfig+0xb8>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <UART_SetConfig+0x90>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002ce9 	.word	0x08002ce9
 8002cd4:	08002ce3 	.word	0x08002ce3
 8002cd8:	08002cef 	.word	0x08002cef
 8002cdc:	2301      	movs	r3, #1
 8002cde:	77fb      	strb	r3, [r7, #31]
 8002ce0:	e14f      	b.n	8002f82 <UART_SetConfig+0x346>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	77fb      	strb	r3, [r7, #31]
 8002ce6:	e14c      	b.n	8002f82 <UART_SetConfig+0x346>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e149      	b.n	8002f82 <UART_SetConfig+0x346>
 8002cee:	2308      	movs	r3, #8
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e146      	b.n	8002f82 <UART_SetConfig+0x346>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e143      	b.n	8002f82 <UART_SetConfig+0x346>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a84      	ldr	r2, [pc, #528]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d132      	bne.n	8002d6a <UART_SetConfig+0x12e>
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d828      	bhi.n	8002d64 <UART_SetConfig+0x128>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <UART_SetConfig+0xdc>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d4d 	.word	0x08002d4d
 8002d1c:	08002d65 	.word	0x08002d65
 8002d20:	08002d65 	.word	0x08002d65
 8002d24:	08002d65 	.word	0x08002d65
 8002d28:	08002d59 	.word	0x08002d59
 8002d2c:	08002d65 	.word	0x08002d65
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d65 	.word	0x08002d65
 8002d38:	08002d53 	.word	0x08002d53
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08002d65 	.word	0x08002d65
 8002d48:	08002d5f 	.word	0x08002d5f
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e117      	b.n	8002f82 <UART_SetConfig+0x346>
 8002d52:	2302      	movs	r3, #2
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e114      	b.n	8002f82 <UART_SetConfig+0x346>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e111      	b.n	8002f82 <UART_SetConfig+0x346>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e10e      	b.n	8002f82 <UART_SetConfig+0x346>
 8002d64:	2310      	movs	r3, #16
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e10b      	b.n	8002f82 <UART_SetConfig+0x346>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a69      	ldr	r2, [pc, #420]	; (8002f14 <UART_SetConfig+0x2d8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d120      	bne.n	8002db6 <UART_SetConfig+0x17a>
 8002d74:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d7e:	2b30      	cmp	r3, #48	; 0x30
 8002d80:	d013      	beq.n	8002daa <UART_SetConfig+0x16e>
 8002d82:	2b30      	cmp	r3, #48	; 0x30
 8002d84:	d814      	bhi.n	8002db0 <UART_SetConfig+0x174>
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d009      	beq.n	8002d9e <UART_SetConfig+0x162>
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d810      	bhi.n	8002db0 <UART_SetConfig+0x174>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <UART_SetConfig+0x15c>
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d006      	beq.n	8002da4 <UART_SetConfig+0x168>
 8002d96:	e00b      	b.n	8002db0 <UART_SetConfig+0x174>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e0f1      	b.n	8002f82 <UART_SetConfig+0x346>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e0ee      	b.n	8002f82 <UART_SetConfig+0x346>
 8002da4:	2304      	movs	r3, #4
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e0eb      	b.n	8002f82 <UART_SetConfig+0x346>
 8002daa:	2308      	movs	r3, #8
 8002dac:	77fb      	strb	r3, [r7, #31]
 8002dae:	e0e8      	b.n	8002f82 <UART_SetConfig+0x346>
 8002db0:	2310      	movs	r3, #16
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e0e5      	b.n	8002f82 <UART_SetConfig+0x346>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a57      	ldr	r2, [pc, #348]	; (8002f18 <UART_SetConfig+0x2dc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d120      	bne.n	8002e02 <UART_SetConfig+0x1c6>
 8002dc0:	4b52      	ldr	r3, [pc, #328]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dca:	2bc0      	cmp	r3, #192	; 0xc0
 8002dcc:	d013      	beq.n	8002df6 <UART_SetConfig+0x1ba>
 8002dce:	2bc0      	cmp	r3, #192	; 0xc0
 8002dd0:	d814      	bhi.n	8002dfc <UART_SetConfig+0x1c0>
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d009      	beq.n	8002dea <UART_SetConfig+0x1ae>
 8002dd6:	2b80      	cmp	r3, #128	; 0x80
 8002dd8:	d810      	bhi.n	8002dfc <UART_SetConfig+0x1c0>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <UART_SetConfig+0x1a8>
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d006      	beq.n	8002df0 <UART_SetConfig+0x1b4>
 8002de2:	e00b      	b.n	8002dfc <UART_SetConfig+0x1c0>
 8002de4:	2300      	movs	r3, #0
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e0cb      	b.n	8002f82 <UART_SetConfig+0x346>
 8002dea:	2302      	movs	r3, #2
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e0c8      	b.n	8002f82 <UART_SetConfig+0x346>
 8002df0:	2304      	movs	r3, #4
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e0c5      	b.n	8002f82 <UART_SetConfig+0x346>
 8002df6:	2308      	movs	r3, #8
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	e0c2      	b.n	8002f82 <UART_SetConfig+0x346>
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e0bf      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a45      	ldr	r2, [pc, #276]	; (8002f1c <UART_SetConfig+0x2e0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d125      	bne.n	8002e58 <UART_SetConfig+0x21c>
 8002e0c:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e1a:	d017      	beq.n	8002e4c <UART_SetConfig+0x210>
 8002e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e20:	d817      	bhi.n	8002e52 <UART_SetConfig+0x216>
 8002e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e26:	d00b      	beq.n	8002e40 <UART_SetConfig+0x204>
 8002e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2c:	d811      	bhi.n	8002e52 <UART_SetConfig+0x216>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <UART_SetConfig+0x1fe>
 8002e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e36:	d006      	beq.n	8002e46 <UART_SetConfig+0x20a>
 8002e38:	e00b      	b.n	8002e52 <UART_SetConfig+0x216>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e0a0      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e40:	2302      	movs	r3, #2
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e09d      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e46:	2304      	movs	r3, #4
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e09a      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e097      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e52:	2310      	movs	r3, #16
 8002e54:	77fb      	strb	r3, [r7, #31]
 8002e56:	e094      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <UART_SetConfig+0x2e4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d125      	bne.n	8002eae <UART_SetConfig+0x272>
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e70:	d017      	beq.n	8002ea2 <UART_SetConfig+0x266>
 8002e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e76:	d817      	bhi.n	8002ea8 <UART_SetConfig+0x26c>
 8002e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7c:	d00b      	beq.n	8002e96 <UART_SetConfig+0x25a>
 8002e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e82:	d811      	bhi.n	8002ea8 <UART_SetConfig+0x26c>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <UART_SetConfig+0x254>
 8002e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8c:	d006      	beq.n	8002e9c <UART_SetConfig+0x260>
 8002e8e:	e00b      	b.n	8002ea8 <UART_SetConfig+0x26c>
 8002e90:	2301      	movs	r3, #1
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e075      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e96:	2302      	movs	r3, #2
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e072      	b.n	8002f82 <UART_SetConfig+0x346>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e06f      	b.n	8002f82 <UART_SetConfig+0x346>
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e06c      	b.n	8002f82 <UART_SetConfig+0x346>
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e069      	b.n	8002f82 <UART_SetConfig+0x346>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <UART_SetConfig+0x2e8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d137      	bne.n	8002f28 <UART_SetConfig+0x2ec>
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ec2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ec6:	d017      	beq.n	8002ef8 <UART_SetConfig+0x2bc>
 8002ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ecc:	d817      	bhi.n	8002efe <UART_SetConfig+0x2c2>
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	d00b      	beq.n	8002eec <UART_SetConfig+0x2b0>
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed8:	d811      	bhi.n	8002efe <UART_SetConfig+0x2c2>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <UART_SetConfig+0x2aa>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d006      	beq.n	8002ef2 <UART_SetConfig+0x2b6>
 8002ee4:	e00b      	b.n	8002efe <UART_SetConfig+0x2c2>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e04a      	b.n	8002f82 <UART_SetConfig+0x346>
 8002eec:	2302      	movs	r3, #2
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e047      	b.n	8002f82 <UART_SetConfig+0x346>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e044      	b.n	8002f82 <UART_SetConfig+0x346>
 8002ef8:	2308      	movs	r3, #8
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e041      	b.n	8002f82 <UART_SetConfig+0x346>
 8002efe:	2310      	movs	r3, #16
 8002f00:	77fb      	strb	r3, [r7, #31]
 8002f02:	e03e      	b.n	8002f82 <UART_SetConfig+0x346>
 8002f04:	efff69f3 	.word	0xefff69f3
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40004400 	.word	0x40004400
 8002f14:	40004800 	.word	0x40004800
 8002f18:	40004c00 	.word	0x40004c00
 8002f1c:	40005000 	.word	0x40005000
 8002f20:	40011400 	.word	0x40011400
 8002f24:	40007800 	.word	0x40007800
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a71      	ldr	r2, [pc, #452]	; (80030f4 <UART_SetConfig+0x4b8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d125      	bne.n	8002f7e <UART_SetConfig+0x342>
 8002f32:	4b71      	ldr	r3, [pc, #452]	; (80030f8 <UART_SetConfig+0x4bc>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f40:	d017      	beq.n	8002f72 <UART_SetConfig+0x336>
 8002f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f46:	d817      	bhi.n	8002f78 <UART_SetConfig+0x33c>
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4c:	d00b      	beq.n	8002f66 <UART_SetConfig+0x32a>
 8002f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f52:	d811      	bhi.n	8002f78 <UART_SetConfig+0x33c>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <UART_SetConfig+0x324>
 8002f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x330>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x33c>
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e00d      	b.n	8002f82 <UART_SetConfig+0x346>
 8002f66:	2302      	movs	r3, #2
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e00a      	b.n	8002f82 <UART_SetConfig+0x346>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e007      	b.n	8002f82 <UART_SetConfig+0x346>
 8002f72:	2308      	movs	r3, #8
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e004      	b.n	8002f82 <UART_SetConfig+0x346>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e001      	b.n	8002f82 <UART_SetConfig+0x346>
 8002f7e:	2310      	movs	r3, #16
 8002f80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f8a:	d15b      	bne.n	8003044 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002f8c:	7ffb      	ldrb	r3, [r7, #31]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d827      	bhi.n	8002fe2 <UART_SetConfig+0x3a6>
 8002f92:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <UART_SetConfig+0x35c>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08002fc5 	.word	0x08002fc5
 8002fa0:	08002fcd 	.word	0x08002fcd
 8002fa4:	08002fe3 	.word	0x08002fe3
 8002fa8:	08002fd3 	.word	0x08002fd3
 8002fac:	08002fe3 	.word	0x08002fe3
 8002fb0:	08002fe3 	.word	0x08002fe3
 8002fb4:	08002fe3 	.word	0x08002fe3
 8002fb8:	08002fdb 	.word	0x08002fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f7fe fe32 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	61b8      	str	r0, [r7, #24]
        break;
 8002fc2:	e013      	b.n	8002fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fc4:	f7fe fe42 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002fc8:	61b8      	str	r0, [r7, #24]
        break;
 8002fca:	e00f      	b.n	8002fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fcc:	4b4b      	ldr	r3, [pc, #300]	; (80030fc <UART_SetConfig+0x4c0>)
 8002fce:	61bb      	str	r3, [r7, #24]
        break;
 8002fd0:	e00c      	b.n	8002fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd2:	f7fe fd65 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8002fd6:	61b8      	str	r0, [r7, #24]
        break;
 8002fd8:	e008      	b.n	8002fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	61bb      	str	r3, [r7, #24]
        break;
 8002fe0:	e004      	b.n	8002fec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8002fea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d074      	beq.n	80030dc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	005a      	lsls	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	b29b      	uxth	r3, r3
 8003008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d916      	bls.n	800303e <UART_SetConfig+0x402>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003016:	d212      	bcs.n	800303e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	b29b      	uxth	r3, r3
 800301c:	f023 030f 	bic.w	r3, r3, #15
 8003020:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	b29b      	uxth	r3, r3
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	b29a      	uxth	r2, r3
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	4313      	orrs	r3, r2
 8003032:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	89fa      	ldrh	r2, [r7, #14]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	e04e      	b.n	80030dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	77bb      	strb	r3, [r7, #30]
 8003042:	e04b      	b.n	80030dc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	2b08      	cmp	r3, #8
 8003048:	d827      	bhi.n	800309a <UART_SetConfig+0x45e>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <UART_SetConfig+0x414>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003075 	.word	0x08003075
 8003054:	0800307d 	.word	0x0800307d
 8003058:	08003085 	.word	0x08003085
 800305c:	0800309b 	.word	0x0800309b
 8003060:	0800308b 	.word	0x0800308b
 8003064:	0800309b 	.word	0x0800309b
 8003068:	0800309b 	.word	0x0800309b
 800306c:	0800309b 	.word	0x0800309b
 8003070:	08003093 	.word	0x08003093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003074:	f7fe fdd6 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8003078:	61b8      	str	r0, [r7, #24]
        break;
 800307a:	e013      	b.n	80030a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7fe fde6 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8003080:	61b8      	str	r0, [r7, #24]
        break;
 8003082:	e00f      	b.n	80030a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <UART_SetConfig+0x4c0>)
 8003086:	61bb      	str	r3, [r7, #24]
        break;
 8003088:	e00c      	b.n	80030a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308a:	f7fe fd09 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 800308e:	61b8      	str	r0, [r7, #24]
        break;
 8003090:	e008      	b.n	80030a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003096:	61bb      	str	r3, [r7, #24]
        break;
 8003098:	e004      	b.n	80030a4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	77bb      	strb	r3, [r7, #30]
        break;
 80030a2:	bf00      	nop
    }

    if (pclk != 0U)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d018      	beq.n	80030dc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	085a      	lsrs	r2, r3, #1
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	441a      	add	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	b29b      	uxth	r3, r3
 80030be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	d908      	bls.n	80030d8 <UART_SetConfig+0x49c>
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d204      	bcs.n	80030d8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	e001      	b.n	80030dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40007c00 	.word	0x40007c00
 80030f8:	40023800 	.word	0x40023800
 80030fc:	00f42400 	.word	0x00f42400

08003100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01a      	beq.n	8003216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031fe:	d10a      	bne.n	8003216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003254:	f7fd fdaa 	bl	8000dac <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d10e      	bne.n	8003286 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f817 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e00d      	b.n	80032a2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ba:	e05e      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d05a      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c4:	f7fd fd72 	bl	8000dac <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <UART_WaitOnFlagUntilTimeout+0x30>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11b      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e043      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02c      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332e:	d124      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003348:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e00f      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	429a      	cmp	r2, r3
 8003396:	d091      	beq.n	80032bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b4:	2b84      	cmp	r3, #132	; 0x84
 80033b6:	d005      	beq.n	80033c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	3303      	adds	r3, #3
 80033c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033c4:	68fb      	ldr	r3, [r7, #12]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033d6:	f000 ff03 	bl	80041e0 <vTaskStartScheduler>
  
  return osOK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}

080033e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af04      	add	r7, sp, #16
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <osThreadCreate+0x54>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01c      	beq.n	8003434 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685c      	ldr	r4, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681d      	ldr	r5, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691e      	ldr	r6, [r3, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ffc8 	bl	80033a2 <makeFreeRtosPriority>
 8003412:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800341c:	9202      	str	r2, [sp, #8]
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	9100      	str	r1, [sp, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	4632      	mov	r2, r6
 8003426:	4629      	mov	r1, r5
 8003428:	4620      	mov	r0, r4
 800342a:	f000 fd07 	bl	8003e3c <xTaskCreateStatic>
 800342e:	4603      	mov	r3, r0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e01c      	b.n	800346e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685c      	ldr	r4, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003440:	b29e      	uxth	r6, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ffaa 	bl	80033a2 <makeFreeRtosPriority>
 800344e:	4602      	mov	r2, r0
 8003450:	f107 030c 	add.w	r3, r7, #12
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	9200      	str	r2, [sp, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4632      	mov	r2, r6
 800345c:	4629      	mov	r1, r5
 800345e:	4620      	mov	r0, r4
 8003460:	f000 fd4f 	bl	8003f02 <xTaskCreate>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d001      	beq.n	800346e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003478 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <osDelay+0x16>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	e000      	b.n	8003490 <osDelay+0x18>
 800348e:	2301      	movs	r3, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fe6f 	bl	8004174 <vTaskDelay>
  
  return osOK;
 8003496:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f103 0208 	add.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f103 0208 	add.w	r2, r3, #8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f103 0208 	add.w	r2, r3, #8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034fa:	b480      	push	{r7}
 80034fc:	b085      	sub	sp, #20
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d103      	bne.n	8003562 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e00c      	b.n	800357c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3308      	adds	r3, #8
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e002      	b.n	8003570 <vListInsert+0x2e>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	d2f6      	bcs.n	800356a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6892      	ldr	r2, [r2, #8]
 80035ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6852      	ldr	r2, [r2, #4]
 80035d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d103      	bne.n	80035e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1e5a      	subs	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10c      	bne.n	8003636 <xQueueGenericReset+0x2e>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	b672      	cpsid	i
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	b662      	cpsie	i
 8003630:	60bb      	str	r3, [r7, #8]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003636:	f001 fd31 	bl	800509c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	441a      	add	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	3b01      	subs	r3, #1
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	441a      	add	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	22ff      	movs	r2, #255	; 0xff
 800367a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	22ff      	movs	r2, #255	; 0xff
 8003682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d114      	bne.n	80036b6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01a      	beq.n	80036ca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3310      	adds	r3, #16
 8003698:	4618      	mov	r0, r3
 800369a:	f000 ffef 	bl	800467c <xTaskRemoveFromEventList>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <xQueueGenericReset+0xd0>)
 80036a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	e009      	b.n	80036ca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3310      	adds	r3, #16
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fef0 	bl	80034a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3324      	adds	r3, #36	; 0x24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff feeb 	bl	80034a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036ca:	f001 fd1b 	bl	8005104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10c      	bne.n	800370a <xQueueGenericCreate+0x2e>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	b672      	cpsid	i
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	b662      	cpsie	i
 8003704:	613b      	str	r3, [r7, #16]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e004      	b.n	8003720 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	3348      	adds	r3, #72	; 0x48
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fda1 	bl	800526c <pvPortMalloc>
 800372a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d011      	beq.n	8003756 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3348      	adds	r3, #72	; 0x48
 800373a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003744:	79fa      	ldrb	r2, [r7, #7]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f805 	bl	8003760 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003756:	69bb      	ldr	r3, [r7, #24]
	}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e002      	b.n	8003782 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800378e:	2101      	movs	r1, #1
 8003790:	69b8      	ldr	r0, [r7, #24]
 8003792:	f7ff ff39 	bl	8003608 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80037be:	2300      	movs	r3, #0
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f81d 	bl	8003804 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037dc:	2301      	movs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6939      	ldr	r1, [r7, #16]
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f7ff ff76 	bl	80036dc <xQueueGenericCreate>
 80037f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ffd3 	bl	800379e <prvInitialiseMutex>

		return xNewQueue;
 80037f8:	68fb      	ldr	r3, [r7, #12]
	}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08e      	sub	sp, #56	; 0x38
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003812:	2300      	movs	r3, #0
 8003814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10c      	bne.n	800383a <xQueueGenericSend+0x36>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	b672      	cpsid	i
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	b662      	cpsie	i
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <xQueueGenericSend+0x44>
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <xQueueGenericSend+0x48>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <xQueueGenericSend+0x4a>
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <xQueueGenericSend+0x68>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	b672      	cpsid	i
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	b662      	cpsie	i
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d103      	bne.n	800387a <xQueueGenericSend+0x76>
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <xQueueGenericSend+0x7a>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <xQueueGenericSend+0x7c>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10c      	bne.n	800389e <xQueueGenericSend+0x9a>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	b672      	cpsid	i
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	b662      	cpsie	i
 8003898:	623b      	str	r3, [r7, #32]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800389e:	f001 f8b1 	bl	8004a04 <xTaskGetSchedulerState>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <xQueueGenericSend+0xaa>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <xQueueGenericSend+0xae>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <xQueueGenericSend+0xb0>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10c      	bne.n	80038d2 <xQueueGenericSend+0xce>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	b672      	cpsid	i
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	b662      	cpsie	i
 80038cc:	61fb      	str	r3, [r7, #28]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038d2:	f001 fbe3 	bl	800509c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <xQueueGenericSend+0xe4>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d129      	bne.n	800393c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ee:	f000 f9bb 	bl	8003c68 <prvCopyDataToQueue>
 80038f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d010      	beq.n	800391e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	3324      	adds	r3, #36	; 0x24
 8003900:	4618      	mov	r0, r3
 8003902:	f000 febb 	bl	800467c <xTaskRemoveFromEventList>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800390c:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <xQueueGenericSend+0x208>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	e00a      	b.n	8003934 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003924:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <xQueueGenericSend+0x208>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003934:	f001 fbe6 	bl	8005104 <vPortExitCritical>
				return pdPASS;
 8003938:	2301      	movs	r3, #1
 800393a:	e063      	b.n	8003a04 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003942:	f001 fbdf 	bl	8005104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003946:	2300      	movs	r3, #0
 8003948:	e05c      	b.n	8003a04 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fef5 	bl	8004744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800395e:	f001 fbd1 	bl	8005104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003962:	f000 fca1 	bl	80042a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003966:	f001 fb99 	bl	800509c <vPortEnterCritical>
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003970:	b25b      	sxtb	r3, r3
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d103      	bne.n	8003980 <xQueueGenericSend+0x17c>
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003986:	b25b      	sxtb	r3, r3
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d103      	bne.n	8003996 <xQueueGenericSend+0x192>
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003996:	f001 fbb5 	bl	8005104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800399a:	1d3a      	adds	r2, r7, #4
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fee4 	bl	8004770 <xTaskCheckForTimeOut>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d124      	bne.n	80039f8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b0:	f000 fa2c 	bl	8003e0c <prvIsQueueFull>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d018      	beq.n	80039ec <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	3310      	adds	r3, #16
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fe34 	bl	8004630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ca:	f000 f9b7 	bl	8003d3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039ce:	f000 fc79 	bl	80042c4 <xTaskResumeAll>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f af7c 	bne.w	80038d2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <xQueueGenericSend+0x208>)
 80039dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	e772      	b.n	80038d2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ee:	f000 f9a5 	bl	8003d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039f2:	f000 fc67 	bl	80042c4 <xTaskResumeAll>
 80039f6:	e76c      	b.n	80038d2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039fa:	f000 f99f 	bl	8003d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039fe:	f000 fc61 	bl	80042c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3738      	adds	r7, #56	; 0x38
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08e      	sub	sp, #56	; 0x38
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10c      	bne.n	8003a46 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	b672      	cpsid	i
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	b662      	cpsie	i
 8003a40:	623b      	str	r3, [r7, #32]
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	b672      	cpsid	i
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	b662      	cpsie	i
 8003a62:	61fb      	str	r3, [r7, #28]
}
 8003a64:	bf00      	nop
 8003a66:	e7fe      	b.n	8003a66 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a68:	f000 ffcc 	bl	8004a04 <xTaskGetSchedulerState>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <xQueueSemaphoreTake+0x68>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <xQueueSemaphoreTake+0x6c>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <xQueueSemaphoreTake+0x6e>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	b672      	cpsid	i
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	b662      	cpsie	i
 8003a96:	61bb      	str	r3, [r7, #24]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9c:	f001 fafe 	bl	800509c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d024      	beq.n	8003af6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	1e5a      	subs	r2, r3, #1
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003abc:	f001 f968 	bl	8004d90 <pvTaskIncrementMutexHeldCount>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00f      	beq.n	8003aee <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	3310      	adds	r3, #16
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fdd2 	bl	800467c <xTaskRemoveFromEventList>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ade:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <xQueueSemaphoreTake+0x224>)
 8003ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003aee:	f001 fb09 	bl	8005104 <vPortExitCritical>
				return pdPASS;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e099      	b.n	8003c2a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	b672      	cpsid	i
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	b662      	cpsie	i
 8003b16:	617b      	str	r3, [r7, #20]
}
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003b1c:	f001 faf2 	bl	8005104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e082      	b.n	8003c2a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b2a:	f107 030c 	add.w	r3, r7, #12
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fe08 	bl	8004744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b38:	f001 fae4 	bl	8005104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b3c:	f000 fbb4 	bl	80042a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b40:	f001 faac 	bl	800509c <vPortEnterCritical>
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <xQueueSemaphoreTake+0x14a>
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <xQueueSemaphoreTake+0x160>
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b70:	f001 fac8 	bl	8005104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b74:	463a      	mov	r2, r7
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fdf7 	bl	8004770 <xTaskCheckForTimeOut>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d132      	bne.n	8003bee <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b8a:	f000 f929 	bl	8003de0 <prvIsQueueEmpty>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d026      	beq.n	8003be2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8003b9c:	f001 fa7e 	bl	800509c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 ff4b 	bl	8004a40 <xTaskPriorityInherit>
 8003baa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003bac:	f001 faaa 	bl	8005104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	3324      	adds	r3, #36	; 0x24
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fd39 	bl	8004630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bc0:	f000 f8bc 	bl	8003d3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bc4:	f000 fb7e 	bl	80042c4 <xTaskResumeAll>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f47f af66 	bne.w	8003a9c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <xQueueSemaphoreTake+0x224>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	e75c      	b.n	8003a9c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003be4:	f000 f8aa 	bl	8003d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003be8:	f000 fb6c 	bl	80042c4 <xTaskResumeAll>
 8003bec:	e756      	b.n	8003a9c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bf0:	f000 f8a4 	bl	8003d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bf4:	f000 fb66 	bl	80042c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bfa:	f000 f8f1 	bl	8003de0 <prvIsQueueEmpty>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f43f af4b 	beq.w	8003a9c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8003c0c:	f001 fa46 	bl	800509c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c12:	f000 f811 	bl	8003c38 <prvGetDisinheritPriorityAfterTimeout>
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 f818 	bl	8004c54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003c24:	f001 fa6e 	bl	8005104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3738      	adds	r7, #56	; 0x38
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1c3 0307 	rsb	r3, r3, #7
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e001      	b.n	8003c5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
	}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d14d      	bne.n	8003d2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 ff54 	bl	8004b40 <xTaskPriorityDisinherit>
 8003c98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	e043      	b.n	8003d2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d119      	bne.n	8003cdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6858      	ldr	r0, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	f001 fce8 	bl	8005688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	441a      	add	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d32b      	bcc.n	8003d2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	e026      	b.n	8003d2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68d8      	ldr	r0, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	f001 fcce 	bl	8005688 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	425b      	negs	r3, r3
 8003cf6:	441a      	add	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d207      	bcs.n	8003d18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	425b      	negs	r3, r3
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d105      	bne.n	8003d2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d32:	697b      	ldr	r3, [r7, #20]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d44:	f001 f9aa 	bl	800509c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d50:	e011      	b.n	8003d76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3324      	adds	r3, #36	; 0x24
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fc8c 	bl	800467c <xTaskRemoveFromEventList>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d6a:	f000 fd67 	bl	800483c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	dce9      	bgt.n	8003d52 <prvUnlockQueue+0x16>
 8003d7e:	e000      	b.n	8003d82 <prvUnlockQueue+0x46>
					break;
 8003d80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	22ff      	movs	r2, #255	; 0xff
 8003d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d8a:	f001 f9bb 	bl	8005104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d8e:	f001 f985 	bl	800509c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d9a:	e011      	b.n	8003dc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3310      	adds	r3, #16
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc67 	bl	800467c <xTaskRemoveFromEventList>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003db4:	f000 fd42 	bl	800483c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003db8:	7bbb      	ldrb	r3, [r7, #14]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	dce9      	bgt.n	8003d9c <prvUnlockQueue+0x60>
 8003dc8:	e000      	b.n	8003dcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	22ff      	movs	r2, #255	; 0xff
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003dd4:	f001 f996 	bl	8005104 <vPortExitCritical>
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003de8:	f001 f958 	bl	800509c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e001      	b.n	8003dfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dfe:	f001 f981 	bl	8005104 <vPortExitCritical>

	return xReturn;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e14:	f001 f942 	bl	800509c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d102      	bne.n	8003e2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e001      	b.n	8003e2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e2e:	f001 f969 	bl	8005104 <vPortExitCritical>

	return xReturn;
 8003e32:	68fb      	ldr	r3, [r7, #12]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08e      	sub	sp, #56	; 0x38
 8003e40:	af04      	add	r7, sp, #16
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10c      	bne.n	8003e6a <xTaskCreateStatic+0x2e>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	b672      	cpsid	i
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	b662      	cpsie	i
 8003e64:	623b      	str	r3, [r7, #32]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10c      	bne.n	8003e8a <xTaskCreateStatic+0x4e>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	b672      	cpsid	i
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	b662      	cpsie	i
 8003e84:	61fb      	str	r3, [r7, #28]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e8a:	2354      	movs	r3, #84	; 0x54
 8003e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b54      	cmp	r3, #84	; 0x54
 8003e92:	d00c      	beq.n	8003eae <xTaskCreateStatic+0x72>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	b672      	cpsid	i
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	b662      	cpsie	i
 8003ea8:	61bb      	str	r3, [r7, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003eae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01e      	beq.n	8003ef4 <xTaskCreateStatic+0xb8>
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01b      	beq.n	8003ef4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9303      	str	r3, [sp, #12]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	9302      	str	r3, [sp, #8]
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f850 	bl	8003f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eee:	f000 f8d7 	bl	80040a0 <prvAddNewTaskToReadyList>
 8003ef2:	e001      	b.n	8003ef8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ef8:	697b      	ldr	r3, [r7, #20]
	}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3728      	adds	r7, #40	; 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b08c      	sub	sp, #48	; 0x30
 8003f06:	af04      	add	r7, sp, #16
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 f9a8 	bl	800526c <pvPortMalloc>
 8003f1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00e      	beq.n	8003f42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f24:	2054      	movs	r0, #84	; 0x54
 8003f26:	f001 f9a1 	bl	800526c <pvPortMalloc>
 8003f2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
 8003f38:	e005      	b.n	8003f46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f3a:	6978      	ldr	r0, [r7, #20]
 8003f3c:	f001 fa60 	bl	8005400 <vPortFree>
 8003f40:	e001      	b.n	8003f46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	2300      	movs	r3, #0
 8003f58:	9303      	str	r3, [sp, #12]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	9302      	str	r3, [sp, #8]
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f80e 	bl	8003f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f70:	69f8      	ldr	r0, [r7, #28]
 8003f72:	f000 f895 	bl	80040a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f76:	2301      	movs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	e002      	b.n	8003f82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f82:	69bb      	ldr	r3, [r7, #24]
	}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003fa4:	440b      	add	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	b672      	cpsid	i
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	b662      	cpsie	i
 8003fd2:	617b      	str	r3, [r7, #20]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01f      	beq.n	800401e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e012      	b.n	800400a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	7819      	ldrb	r1, [r3, #0]
 8003fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3334      	adds	r3, #52	; 0x34
 8003ff4:	460a      	mov	r2, r1
 8003ff6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d9e9      	bls.n	8003fe4 <prvInitialiseNewTask+0x58>
 8004010:	e000      	b.n	8004014 <prvInitialiseNewTask+0x88>
			{
				break;
 8004012:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800401c:	e003      	b.n	8004026 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	2b06      	cmp	r3, #6
 800402a:	d901      	bls.n	8004030 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800402c:	2306      	movs	r3, #6
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2200      	movs	r2, #0
 8004040:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	3304      	adds	r3, #4
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fa4a 	bl	80034e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	3318      	adds	r3, #24
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fa45 	bl	80034e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	f1c3 0207 	rsb	r2, r3, #7
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	2200      	movs	r2, #0
 8004070:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	69b8      	ldr	r0, [r7, #24]
 8004080:	f000 ff00 	bl	8004e84 <pxPortInitialiseStack>
 8004084:	4602      	mov	r2, r0
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004096:	bf00      	nop
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040a8:	f000 fff8 	bl	800509c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040ac:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <prvAddNewTaskToReadyList+0xb8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	4a29      	ldr	r2, [pc, #164]	; (8004158 <prvAddNewTaskToReadyList+0xb8>)
 80040b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040b6:	4b29      	ldr	r3, [pc, #164]	; (800415c <prvAddNewTaskToReadyList+0xbc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040be:	4a27      	ldr	r2, [pc, #156]	; (800415c <prvAddNewTaskToReadyList+0xbc>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040c4:	4b24      	ldr	r3, [pc, #144]	; (8004158 <prvAddNewTaskToReadyList+0xb8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d110      	bne.n	80040ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040cc:	f000 fbda 	bl	8004884 <prvInitialiseTaskLists>
 80040d0:	e00d      	b.n	80040ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040d2:	4b23      	ldr	r3, [pc, #140]	; (8004160 <prvAddNewTaskToReadyList+0xc0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040da:	4b20      	ldr	r3, [pc, #128]	; (800415c <prvAddNewTaskToReadyList+0xbc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d802      	bhi.n	80040ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <prvAddNewTaskToReadyList+0xbc>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <prvAddNewTaskToReadyList+0xc4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <prvAddNewTaskToReadyList+0xc4>)
 80040f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	2201      	movs	r2, #1
 80040fe:	409a      	lsls	r2, r3
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <prvAddNewTaskToReadyList+0xc8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	4a18      	ldr	r2, [pc, #96]	; (8004168 <prvAddNewTaskToReadyList+0xc8>)
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4a15      	ldr	r2, [pc, #84]	; (800416c <prvAddNewTaskToReadyList+0xcc>)
 8004118:	441a      	add	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3304      	adds	r3, #4
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f7ff f9ea 	bl	80034fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004126:	f000 ffed 	bl	8005104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <prvAddNewTaskToReadyList+0xc0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00e      	beq.n	8004150 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <prvAddNewTaskToReadyList+0xbc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	429a      	cmp	r2, r3
 800413e:	d207      	bcs.n	8004150 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <prvAddNewTaskToReadyList+0xd0>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	200003e8 	.word	0x200003e8
 800415c:	200002e8 	.word	0x200002e8
 8004160:	200003f4 	.word	0x200003f4
 8004164:	20000404 	.word	0x20000404
 8004168:	200003f0 	.word	0x200003f0
 800416c:	200002ec 	.word	0x200002ec
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d019      	beq.n	80041ba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <vTaskDelay+0x64>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <vTaskDelay+0x34>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	b672      	cpsid	i
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	b662      	cpsie	i
 80041a2:	60bb      	str	r3, [r7, #8]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80041a8:	f000 f87e 	bl	80042a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041ac:	2100      	movs	r1, #0
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fe02 	bl	8004db8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041b4:	f000 f886 	bl	80042c4 <xTaskResumeAll>
 80041b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <vTaskDelay+0x68>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000410 	.word	0x20000410
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041ee:	463a      	mov	r2, r7
 80041f0:	1d39      	adds	r1, r7, #4
 80041f2:	f107 0308 	add.w	r3, r7, #8
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc f9d6 	bl	80005a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	9202      	str	r2, [sp, #8]
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	2300      	movs	r3, #0
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2300      	movs	r3, #0
 800420c:	460a      	mov	r2, r1
 800420e:	4920      	ldr	r1, [pc, #128]	; (8004290 <vTaskStartScheduler+0xb0>)
 8004210:	4820      	ldr	r0, [pc, #128]	; (8004294 <vTaskStartScheduler+0xb4>)
 8004212:	f7ff fe13 	bl	8003e3c <xTaskCreateStatic>
 8004216:	4603      	mov	r3, r0
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <vTaskStartScheduler+0xb8>)
 800421a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <vTaskStartScheduler+0xb8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e001      	b.n	800422e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d118      	bne.n	8004266 <vTaskStartScheduler+0x86>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	b672      	cpsid	i
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	b662      	cpsie	i
 8004248:	613b      	str	r3, [r7, #16]
}
 800424a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <vTaskStartScheduler+0xbc>)
 800424e:	f04f 32ff 	mov.w	r2, #4294967295
 8004252:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <vTaskStartScheduler+0xc0>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <vTaskStartScheduler+0xc4>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004260:	f000 fe9e 	bl	8004fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004264:	e010      	b.n	8004288 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d10c      	bne.n	8004288 <vTaskStartScheduler+0xa8>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	b672      	cpsid	i
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	b662      	cpsie	i
 8004282:	60fb      	str	r3, [r7, #12]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <vTaskStartScheduler+0xa6>
}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08006718 	.word	0x08006718
 8004294:	08004855 	.word	0x08004855
 8004298:	2000040c 	.word	0x2000040c
 800429c:	20000408 	.word	0x20000408
 80042a0:	200003f4 	.word	0x200003f4
 80042a4:	200003ec 	.word	0x200003ec

080042a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <vTaskSuspendAll+0x18>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a03      	ldr	r2, [pc, #12]	; (80042c0 <vTaskSuspendAll+0x18>)
 80042b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000410 	.word	0x20000410

080042c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042d2:	4b42      	ldr	r3, [pc, #264]	; (80043dc <xTaskResumeAll+0x118>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10c      	bne.n	80042f4 <xTaskResumeAll+0x30>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	b672      	cpsid	i
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	b662      	cpsie	i
 80042ee:	603b      	str	r3, [r7, #0]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042f4:	f000 fed2 	bl	800509c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042f8:	4b38      	ldr	r3, [pc, #224]	; (80043dc <xTaskResumeAll+0x118>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	4a37      	ldr	r2, [pc, #220]	; (80043dc <xTaskResumeAll+0x118>)
 8004300:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <xTaskResumeAll+0x118>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d161      	bne.n	80043ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800430a:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <xTaskResumeAll+0x11c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d05d      	beq.n	80043ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004312:	e02e      	b.n	8004372 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004314:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <xTaskResumeAll+0x120>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3318      	adds	r3, #24
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff f947 	bl	80035b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3304      	adds	r3, #4
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f942 	bl	80035b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	2201      	movs	r2, #1
 8004336:	409a      	lsls	r2, r3
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <xTaskResumeAll+0x124>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4313      	orrs	r3, r2
 800433e:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <xTaskResumeAll+0x124>)
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4a27      	ldr	r2, [pc, #156]	; (80043ec <xTaskResumeAll+0x128>)
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f7ff f8ce 	bl	80034fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <xTaskResumeAll+0x12c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	429a      	cmp	r2, r3
 800436a:	d302      	bcc.n	8004372 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <xTaskResumeAll+0x130>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <xTaskResumeAll+0x120>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1cc      	bne.n	8004314 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004380:	f000 fb20 	bl	80049c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <xTaskResumeAll+0x134>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004390:	f000 f836 	bl	8004400 <xTaskIncrementTick>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <xTaskResumeAll+0x130>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f1      	bne.n	8004390 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <xTaskResumeAll+0x134>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <xTaskResumeAll+0x130>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <xTaskResumeAll+0x138>)
 80043c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043ce:	f000 fe99 	bl	8005104 <vPortExitCritical>

	return xAlreadyYielded;
 80043d2:	68bb      	ldr	r3, [r7, #8]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000410 	.word	0x20000410
 80043e0:	200003e8 	.word	0x200003e8
 80043e4:	200003a8 	.word	0x200003a8
 80043e8:	200003f0 	.word	0x200003f0
 80043ec:	200002ec 	.word	0x200002ec
 80043f0:	200002e8 	.word	0x200002e8
 80043f4:	200003fc 	.word	0x200003fc
 80043f8:	200003f8 	.word	0x200003f8
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440a:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <xTaskIncrementTick+0x148>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 808a 	bne.w	8004528 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004414:	4b4d      	ldr	r3, [pc, #308]	; (800454c <xTaskIncrementTick+0x14c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800441c:	4a4b      	ldr	r2, [pc, #300]	; (800454c <xTaskIncrementTick+0x14c>)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d122      	bne.n	800446e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004428:	4b49      	ldr	r3, [pc, #292]	; (8004550 <xTaskIncrementTick+0x150>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	b672      	cpsid	i
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	b662      	cpsie	i
 8004446:	603b      	str	r3, [r7, #0]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xTaskIncrementTick+0x4a>
 800444c:	4b40      	ldr	r3, [pc, #256]	; (8004550 <xTaskIncrementTick+0x150>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	4b40      	ldr	r3, [pc, #256]	; (8004554 <xTaskIncrementTick+0x154>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3e      	ldr	r2, [pc, #248]	; (8004550 <xTaskIncrementTick+0x150>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <xTaskIncrementTick+0x154>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4b3d      	ldr	r3, [pc, #244]	; (8004558 <xTaskIncrementTick+0x158>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <xTaskIncrementTick+0x158>)
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	f000 faab 	bl	80049c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800446e:	4b3b      	ldr	r3, [pc, #236]	; (800455c <xTaskIncrementTick+0x15c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d348      	bcc.n	800450a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <xTaskIncrementTick+0x150>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004482:	4b36      	ldr	r3, [pc, #216]	; (800455c <xTaskIncrementTick+0x15c>)
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	601a      	str	r2, [r3, #0]
					break;
 800448a:	e03e      	b.n	800450a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448c:	4b30      	ldr	r3, [pc, #192]	; (8004550 <xTaskIncrementTick+0x150>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d203      	bcs.n	80044ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <xTaskIncrementTick+0x15c>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044aa:	e02e      	b.n	800450a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f87f 	bl	80035b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3318      	adds	r3, #24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff f876 	bl	80035b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	4b23      	ldr	r3, [pc, #140]	; (8004560 <xTaskIncrementTick+0x160>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	4a22      	ldr	r2, [pc, #136]	; (8004560 <xTaskIncrementTick+0x160>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <xTaskIncrementTick+0x164>)
 80044e8:	441a      	add	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7ff f802 	bl	80034fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <xTaskIncrementTick+0x168>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d3b9      	bcc.n	8004478 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004508:	e7b6      	b.n	8004478 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800450a:	4b17      	ldr	r3, [pc, #92]	; (8004568 <xTaskIncrementTick+0x168>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4914      	ldr	r1, [pc, #80]	; (8004564 <xTaskIncrementTick+0x164>)
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d907      	bls.n	8004532 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e004      	b.n	8004532 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004528:	4b10      	ldr	r3, [pc, #64]	; (800456c <xTaskIncrementTick+0x16c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a0f      	ldr	r2, [pc, #60]	; (800456c <xTaskIncrementTick+0x16c>)
 8004530:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <xTaskIncrementTick+0x170>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800453a:	2301      	movs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800453e:	697b      	ldr	r3, [r7, #20]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000410 	.word	0x20000410
 800454c:	200003ec 	.word	0x200003ec
 8004550:	200003a0 	.word	0x200003a0
 8004554:	200003a4 	.word	0x200003a4
 8004558:	20000400 	.word	0x20000400
 800455c:	20000408 	.word	0x20000408
 8004560:	200003f0 	.word	0x200003f0
 8004564:	200002ec 	.word	0x200002ec
 8004568:	200002e8 	.word	0x200002e8
 800456c:	200003f8 	.word	0x200003f8
 8004570:	200003fc 	.word	0x200003fc

08004574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <vTaskSwitchContext+0xa8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004582:	4b27      	ldr	r3, [pc, #156]	; (8004620 <vTaskSwitchContext+0xac>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004588:	e041      	b.n	800460e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800458a:	4b25      	ldr	r3, [pc, #148]	; (8004620 <vTaskSwitchContext+0xac>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004590:	4b24      	ldr	r3, [pc, #144]	; (8004624 <vTaskSwitchContext+0xb0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	f1c3 031f 	rsb	r3, r3, #31
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	4920      	ldr	r1, [pc, #128]	; (8004628 <vTaskSwitchContext+0xb4>)
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <vTaskSwitchContext+0x60>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	b672      	cpsid	i
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	b662      	cpsie	i
 80045ce:	607b      	str	r3, [r7, #4]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <vTaskSwitchContext+0x5e>
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <vTaskSwitchContext+0xb4>)
 80045e0:	4413      	add	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3308      	adds	r3, #8
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d104      	bne.n	8004604 <vTaskSwitchContext+0x90>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	4a08      	ldr	r2, [pc, #32]	; (800462c <vTaskSwitchContext+0xb8>)
 800460c:	6013      	str	r3, [r2, #0]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000410 	.word	0x20000410
 8004620:	200003fc 	.word	0x200003fc
 8004624:	200003f0 	.word	0x200003f0
 8004628:	200002ec 	.word	0x200002ec
 800462c:	200002e8 	.word	0x200002e8

08004630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10c      	bne.n	800465a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	b672      	cpsid	i
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	b662      	cpsie	i
 8004654:	60fb      	str	r3, [r7, #12]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <vTaskPlaceOnEventList+0x48>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3318      	adds	r3, #24
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fe ff6d 	bl	8003542 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004668:	2101      	movs	r1, #1
 800466a:	6838      	ldr	r0, [r7, #0]
 800466c:	f000 fba4 	bl	8004db8 <prvAddCurrentTaskToDelayedList>
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200002e8 	.word	0x200002e8

0800467c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10c      	bne.n	80046ac <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	b672      	cpsid	i
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	b662      	cpsie	i
 80046a6:	60fb      	str	r3, [r7, #12]
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3318      	adds	r3, #24
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe ff7f 	bl	80035b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <xTaskRemoveFromEventList+0xb0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11c      	bne.n	80046f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe ff76 	bl	80035b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	2201      	movs	r2, #1
 80046ce:	409a      	lsls	r2, r3
 80046d0:	4b17      	ldr	r3, [pc, #92]	; (8004730 <xTaskRemoveFromEventList+0xb4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <xTaskRemoveFromEventList+0xb4>)
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a13      	ldr	r2, [pc, #76]	; (8004734 <xTaskRemoveFromEventList+0xb8>)
 80046e8:	441a      	add	r2, r3
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fe ff02 	bl	80034fa <vListInsertEnd>
 80046f6:	e005      	b.n	8004704 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4619      	mov	r1, r3
 80046fe:	480e      	ldr	r0, [pc, #56]	; (8004738 <xTaskRemoveFromEventList+0xbc>)
 8004700:	f7fe fefb 	bl	80034fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <xTaskRemoveFromEventList+0xc0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	429a      	cmp	r2, r3
 8004710:	d905      	bls.n	800471e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <xTaskRemoveFromEventList+0xc4>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e001      	b.n	8004722 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004722:	697b      	ldr	r3, [r7, #20]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000410 	.word	0x20000410
 8004730:	200003f0 	.word	0x200003f0
 8004734:	200002ec 	.word	0x200002ec
 8004738:	200003a8 	.word	0x200003a8
 800473c:	200002e8 	.word	0x200002e8
 8004740:	200003fc 	.word	0x200003fc

08004744 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <vTaskInternalSetTimeOutState+0x24>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <vTaskInternalSetTimeOutState+0x28>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	605a      	str	r2, [r3, #4]
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20000400 	.word	0x20000400
 800476c:	200003ec 	.word	0x200003ec

08004770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	b672      	cpsid	i
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	b662      	cpsie	i
 8004794:	613b      	str	r3, [r7, #16]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10c      	bne.n	80047ba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	b672      	cpsid	i
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	b662      	cpsie	i
 80047b4:	60fb      	str	r3, [r7, #12]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80047ba:	f000 fc6f 	bl	800509c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <xTaskCheckForTimeOut+0xc4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d102      	bne.n	80047de <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	e023      	b.n	8004826 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <xTaskCheckForTimeOut+0xc8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d007      	beq.n	80047fa <xTaskCheckForTimeOut+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	e015      	b.n	8004826 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	429a      	cmp	r2, r3
 8004802:	d20b      	bcs.n	800481c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ff97 	bl	8004744 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e004      	b.n	8004826 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004826:	f000 fc6d 	bl	8005104 <vPortExitCritical>

	return xReturn;
 800482a:	69fb      	ldr	r3, [r7, #28]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	200003ec 	.word	0x200003ec
 8004838:	20000400 	.word	0x20000400

0800483c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <vTaskMissedYield+0x14>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
}
 8004846:	bf00      	nop
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	200003fc 	.word	0x200003fc

08004854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800485c:	f000 f852 	bl	8004904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <prvIdleTask+0x28>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d9f9      	bls.n	800485c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <prvIdleTask+0x2c>)
 800486a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004878:	e7f0      	b.n	800485c <prvIdleTask+0x8>
 800487a:	bf00      	nop
 800487c:	200002ec 	.word	0x200002ec
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	e00c      	b.n	80048aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <prvInitialiseTaskLists+0x60>)
 800489c:	4413      	add	r3, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fdfe 	bl	80034a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3301      	adds	r3, #1
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d9ef      	bls.n	8004890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048b0:	480d      	ldr	r0, [pc, #52]	; (80048e8 <prvInitialiseTaskLists+0x64>)
 80048b2:	f7fe fdf5 	bl	80034a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048b6:	480d      	ldr	r0, [pc, #52]	; (80048ec <prvInitialiseTaskLists+0x68>)
 80048b8:	f7fe fdf2 	bl	80034a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048bc:	480c      	ldr	r0, [pc, #48]	; (80048f0 <prvInitialiseTaskLists+0x6c>)
 80048be:	f7fe fdef 	bl	80034a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048c2:	480c      	ldr	r0, [pc, #48]	; (80048f4 <prvInitialiseTaskLists+0x70>)
 80048c4:	f7fe fdec 	bl	80034a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048c8:	480b      	ldr	r0, [pc, #44]	; (80048f8 <prvInitialiseTaskLists+0x74>)
 80048ca:	f7fe fde9 	bl	80034a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <prvInitialiseTaskLists+0x78>)
 80048d0:	4a05      	ldr	r2, [pc, #20]	; (80048e8 <prvInitialiseTaskLists+0x64>)
 80048d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <prvInitialiseTaskLists+0x7c>)
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <prvInitialiseTaskLists+0x68>)
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	200002ec 	.word	0x200002ec
 80048e8:	20000378 	.word	0x20000378
 80048ec:	2000038c 	.word	0x2000038c
 80048f0:	200003a8 	.word	0x200003a8
 80048f4:	200003bc 	.word	0x200003bc
 80048f8:	200003d4 	.word	0x200003d4
 80048fc:	200003a0 	.word	0x200003a0
 8004900:	200003a4 	.word	0x200003a4

08004904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800490a:	e019      	b.n	8004940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800490c:	f000 fbc6 	bl	800509c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004910:	4b10      	ldr	r3, [pc, #64]	; (8004954 <prvCheckTasksWaitingTermination+0x50>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fe49 	bl	80035b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004922:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <prvCheckTasksWaitingTermination+0x54>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3b01      	subs	r3, #1
 8004928:	4a0b      	ldr	r2, [pc, #44]	; (8004958 <prvCheckTasksWaitingTermination+0x54>)
 800492a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <prvCheckTasksWaitingTermination+0x58>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3b01      	subs	r3, #1
 8004932:	4a0a      	ldr	r2, [pc, #40]	; (800495c <prvCheckTasksWaitingTermination+0x58>)
 8004934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004936:	f000 fbe5 	bl	8005104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f810 	bl	8004960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <prvCheckTasksWaitingTermination+0x58>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e1      	bne.n	800490c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200003bc 	.word	0x200003bc
 8004958:	200003e8 	.word	0x200003e8
 800495c:	200003d0 	.word	0x200003d0

08004960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800496e:	2b00      	cmp	r3, #0
 8004970:	d108      	bne.n	8004984 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fd42 	bl	8005400 <vPortFree>
				vPortFree( pxTCB );
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fd3f 	bl	8005400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004982:	e01a      	b.n	80049ba <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498a:	2b01      	cmp	r3, #1
 800498c:	d103      	bne.n	8004996 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fd36 	bl	8005400 <vPortFree>
	}
 8004994:	e011      	b.n	80049ba <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800499c:	2b02      	cmp	r3, #2
 800499e:	d00c      	beq.n	80049ba <prvDeleteTCB+0x5a>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	b672      	cpsid	i
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	b662      	cpsie	i
 80049b4:	60fb      	str	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <prvDeleteTCB+0x58>
	}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <prvResetNextTaskUnblockTime+0x38>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <prvResetNextTaskUnblockTime+0x3c>)
 80049d6:	f04f 32ff 	mov.w	r2, #4294967295
 80049da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049dc:	e008      	b.n	80049f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <prvResetNextTaskUnblockTime+0x38>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a04      	ldr	r2, [pc, #16]	; (8004a00 <prvResetNextTaskUnblockTime+0x3c>)
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	200003a0 	.word	0x200003a0
 8004a00:	20000408 	.word	0x20000408

08004a04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <xTaskGetSchedulerState+0x34>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a12:	2301      	movs	r3, #1
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	e008      	b.n	8004a2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a18:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <xTaskGetSchedulerState+0x38>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a20:	2302      	movs	r3, #2
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	e001      	b.n	8004a2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a2a:	687b      	ldr	r3, [r7, #4]
	}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	200003f4 	.word	0x200003f4
 8004a3c:	20000410 	.word	0x20000410

08004a40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d069      	beq.n	8004b2a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5a:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <xTaskPriorityInherit+0xf4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d259      	bcs.n	8004b18 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	db06      	blt.n	8004a7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6c:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <xTaskPriorityInherit+0xf4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f1c3 0207 	rsb	r2, r3, #7
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6959      	ldr	r1, [r3, #20]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4a2b      	ldr	r2, [pc, #172]	; (8004b38 <xTaskPriorityInherit+0xf8>)
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	d13a      	bne.n	8004b08 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fd8c 	bl	80035b4 <uxListRemove>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	4924      	ldr	r1, [pc, #144]	; (8004b38 <xTaskPriorityInherit+0xf8>)
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xTaskPriorityInherit+0x8e>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	2201      	movs	r2, #1
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <xTaskPriorityInherit+0xfc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <xTaskPriorityInherit+0xfc>)
 8004acc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ace:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <xTaskPriorityInherit+0xf4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	2201      	movs	r2, #1
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <xTaskPriorityInherit+0xfc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <xTaskPriorityInherit+0xfc>)
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <xTaskPriorityInherit+0xf8>)
 8004af8:	441a      	add	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f7fe fcfa 	bl	80034fa <vListInsertEnd>
 8004b06:	e004      	b.n	8004b12 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <xTaskPriorityInherit+0xf4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e008      	b.n	8004b2a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <xTaskPriorityInherit+0xf4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d201      	bcs.n	8004b2a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
	}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	200002e8 	.word	0x200002e8
 8004b38:	200002ec 	.word	0x200002ec
 8004b3c:	200003f0 	.word	0x200003f0

08004b40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d072      	beq.n	8004c3c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b56:	4b3c      	ldr	r3, [pc, #240]	; (8004c48 <xTaskPriorityDisinherit+0x108>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d00c      	beq.n	8004b7a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	b672      	cpsid	i
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	b662      	cpsie	i
 8004b74:	60fb      	str	r3, [r7, #12]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	b672      	cpsid	i
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	b662      	cpsie	i
 8004b96:	60bb      	str	r3, [r7, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d044      	beq.n	8004c3c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d140      	bne.n	8004c3c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fcf8 	bl	80035b4 <uxListRemove>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d115      	bne.n	8004bf6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	491f      	ldr	r1, [pc, #124]	; (8004c4c <xTaskPriorityDisinherit+0x10c>)
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xTaskPriorityDisinherit+0xb6>
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	2201      	movs	r2, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43da      	mvns	r2, r3
 8004bec:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <xTaskPriorityDisinherit+0x110>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <xTaskPriorityDisinherit+0x110>)
 8004bf4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	f1c3 0207 	rsb	r2, r3, #7
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	2201      	movs	r2, #1
 8004c10:	409a      	lsls	r2, r3
 8004c12:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <xTaskPriorityDisinherit+0x110>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	4a0d      	ldr	r2, [pc, #52]	; (8004c50 <xTaskPriorityDisinherit+0x110>)
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <xTaskPriorityDisinherit+0x10c>)
 8004c2a:	441a      	add	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7fe fc61 	bl	80034fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c3c:	697b      	ldr	r3, [r7, #20]
	}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200002e8 	.word	0x200002e8
 8004c4c:	200002ec 	.word	0x200002ec
 8004c50:	200003f0 	.word	0x200003f0

08004c54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8087 	beq.w	8004d7c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	b672      	cpsid	i
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	b662      	cpsie	i
 8004c8a:	60fb      	str	r3, [r7, #12]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d902      	bls.n	8004ca0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	e002      	b.n	8004ca6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d065      	beq.n	8004d7c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d160      	bne.n	8004d7c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004cba:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d10c      	bne.n	8004cde <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	b672      	cpsid	i
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	b662      	cpsie	i
 8004cd8:	60bb      	str	r3, [r7, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db04      	blt.n	8004cfc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f1c3 0207 	rsb	r2, r3, #7
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	6959      	ldr	r1, [r3, #20]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004d0c:	4413      	add	r3, r2
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	d134      	bne.n	8004d7c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fc4c 	bl	80035b4 <uxListRemove>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d115      	bne.n	8004d4e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d26:	4918      	ldr	r1, [pc, #96]	; (8004d88 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43da      	mvns	r2, r3
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	4a10      	ldr	r2, [pc, #64]	; (8004d8c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004d4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	2201      	movs	r2, #1
 8004d54:	409a      	lsls	r2, r3
 8004d56:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4a06      	ldr	r2, [pc, #24]	; (8004d88 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004d6e:	441a      	add	r2, r3
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7fe fbbf 	bl	80034fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d7c:	bf00      	nop
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200002e8 	.word	0x200002e8
 8004d88:	200002ec 	.word	0x200002ec
 8004d8c:	200003f0 	.word	0x200003f0

08004d90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004d94:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da2:	3201      	adds	r2, #1
 8004da4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004da6:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004da8:	681b      	ldr	r3, [r3, #0]
	}
 8004daa:	4618      	mov	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	200002e8 	.word	0x200002e8

08004db8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dc2:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fbf0 	bl	80035b4 <uxListRemove>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	2201      	movs	r2, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43da      	mvns	r2, r3
 8004de8:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4013      	ands	r3, r2
 8004dee:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004df0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d10a      	bne.n	8004e10 <prvAddCurrentTaskToDelayedList+0x58>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	481a      	ldr	r0, [pc, #104]	; (8004e74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e0a:	f7fe fb76 	bl	80034fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e0e:	e026      	b.n	8004e5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d209      	bcs.n	8004e3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fe fb84 	bl	8003542 <vListInsert>
}
 8004e3a:	e010      	b.n	8004e5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7fe fb7a 	bl	8003542 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d202      	bcs.n	8004e5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200003ec 	.word	0x200003ec
 8004e6c:	200002e8 	.word	0x200002e8
 8004e70:	200003f0 	.word	0x200003f0
 8004e74:	200003d4 	.word	0x200003d4
 8004e78:	200003a4 	.word	0x200003a4
 8004e7c:	200003a0 	.word	0x200003a0
 8004e80:	20000408 	.word	0x20000408

08004e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3b04      	subs	r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b04      	subs	r3, #4
 8004eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004eb4:	4a0c      	ldr	r2, [pc, #48]	; (8004ee8 <pxPortInitialiseStack+0x64>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b14      	subs	r3, #20
 8004ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f06f 0202 	mvn.w	r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3b20      	subs	r3, #32
 8004ed8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	08004eed 	.word	0x08004eed

08004eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvTaskExitError+0x5c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d00c      	beq.n	8004f1a <prvTaskExitError+0x2e>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	b672      	cpsid	i
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	b662      	cpsie	i
 8004f14:	60fb      	str	r3, [r7, #12]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <prvTaskExitError+0x2c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	b672      	cpsid	i
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	b662      	cpsie	i
 8004f2e:	60bb      	str	r3, [r7, #8]
}
 8004f30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f32:	bf00      	nop
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0fc      	beq.n	8004f34 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	2000000c 	.word	0x2000000c
 8004f4c:	00000000 	.word	0x00000000

08004f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <pxCurrentTCBConst2>)
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	6808      	ldr	r0, [r1, #0]
 8004f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	f380 8809 	msr	PSP, r0
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	4770      	bx	lr
 8004f6c:	f3af 8000 	nop.w

08004f70 <pxCurrentTCBConst2>:
 8004f70:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f78:	4808      	ldr	r0, [pc, #32]	; (8004f9c <prvPortStartFirstTask+0x24>)
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f380 8808 	msr	MSP, r0
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8814 	msr	CONTROL, r0
 8004f8a:	b662      	cpsie	i
 8004f8c:	b661      	cpsie	f
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	df00      	svc	0
 8004f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f9a:	bf00      	nop
 8004f9c:	e000ed08 	.word	0xe000ed08

08004fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fa6:	4b37      	ldr	r3, [pc, #220]	; (8005084 <xPortStartScheduler+0xe4>)
 8004fa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <xPortStartScheduler+0xe8>)
 8004fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fce:	4b2f      	ldr	r3, [pc, #188]	; (800508c <xPortStartScheduler+0xec>)
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fd4:	e009      	b.n	8004fea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004fd6:	4b2d      	ldr	r3, [pc, #180]	; (800508c <xPortStartScheduler+0xec>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	4a2b      	ldr	r2, [pc, #172]	; (800508c <xPortStartScheduler+0xec>)
 8004fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d0ef      	beq.n	8004fd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ff6:	4b25      	ldr	r3, [pc, #148]	; (800508c <xPortStartScheduler+0xec>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1c3 0307 	rsb	r3, r3, #7
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d00c      	beq.n	800501c <xPortStartScheduler+0x7c>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	b672      	cpsid	i
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	b662      	cpsie	i
 8005016:	60bb      	str	r3, [r7, #8]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <xPortStartScheduler+0xec>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	4a1a      	ldr	r2, [pc, #104]	; (800508c <xPortStartScheduler+0xec>)
 8005024:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005026:	4b19      	ldr	r3, [pc, #100]	; (800508c <xPortStartScheduler+0xec>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800502e:	4a17      	ldr	r2, [pc, #92]	; (800508c <xPortStartScheduler+0xec>)
 8005030:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <xPortStartScheduler+0xf0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a14      	ldr	r2, [pc, #80]	; (8005090 <xPortStartScheduler+0xf0>)
 8005040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005044:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <xPortStartScheduler+0xf0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a11      	ldr	r2, [pc, #68]	; (8005090 <xPortStartScheduler+0xf0>)
 800504c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005050:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005052:	f000 f8dd 	bl	8005210 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005056:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <xPortStartScheduler+0xf4>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800505c:	f000 f8fc 	bl	8005258 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005060:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <xPortStartScheduler+0xf8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <xPortStartScheduler+0xf8>)
 8005066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800506a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800506c:	f7ff ff84 	bl	8004f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005070:	f7ff fa80 	bl	8004574 <vTaskSwitchContext>
	prvTaskExitError();
 8005074:	f7ff ff3a 	bl	8004eec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	e000e400 	.word	0xe000e400
 8005088:	20000414 	.word	0x20000414
 800508c:	20000418 	.word	0x20000418
 8005090:	e000ed20 	.word	0xe000ed20
 8005094:	2000000c 	.word	0x2000000c
 8005098:	e000ef34 	.word	0xe000ef34

0800509c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	b672      	cpsid	i
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	b662      	cpsie	i
 80050b6:	607b      	str	r3, [r7, #4]
}
 80050b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <vPortEnterCritical+0x60>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	4a0e      	ldr	r2, [pc, #56]	; (80050fc <vPortEnterCritical+0x60>)
 80050c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <vPortEnterCritical+0x60>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d111      	bne.n	80050f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <vPortEnterCritical+0x64>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00c      	beq.n	80050f0 <vPortEnterCritical+0x54>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	b672      	cpsid	i
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	b662      	cpsie	i
 80050ea:	603b      	str	r3, [r7, #0]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <vPortEnterCritical+0x52>
	}
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	2000000c 	.word	0x2000000c
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800510a:	4b13      	ldr	r3, [pc, #76]	; (8005158 <vPortExitCritical+0x54>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <vPortExitCritical+0x28>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	b672      	cpsid	i
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	b662      	cpsie	i
 8005126:	607b      	str	r3, [r7, #4]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <vPortExitCritical+0x54>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3b01      	subs	r3, #1
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <vPortExitCritical+0x54>)
 8005134:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <vPortExitCritical+0x54>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <vPortExitCritical+0x46>
 800513e:	2300      	movs	r3, #0
 8005140:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005148:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	2000000c 	.word	0x2000000c
 800515c:	00000000 	.word	0x00000000

08005160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005160:	f3ef 8009 	mrs	r0, PSP
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <pxCurrentTCBConst>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	f01e 0f10 	tst.w	lr, #16
 8005170:	bf08      	it	eq
 8005172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517a:	6010      	str	r0, [r2, #0]
 800517c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005184:	b672      	cpsid	i
 8005186:	f380 8811 	msr	BASEPRI, r0
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	b662      	cpsie	i
 8005194:	f7ff f9ee 	bl	8004574 <vTaskSwitchContext>
 8005198:	f04f 0000 	mov.w	r0, #0
 800519c:	f380 8811 	msr	BASEPRI, r0
 80051a0:	bc09      	pop	{r0, r3}
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	6808      	ldr	r0, [r1, #0]
 80051a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	f01e 0f10 	tst.w	lr, #16
 80051ae:	bf08      	it	eq
 80051b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051b4:	f380 8809 	msr	PSP, r0
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop

080051c0 <pxCurrentTCBConst>:
 80051c0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop

080051c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	b672      	cpsid	i
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	b662      	cpsie	i
 80051e2:	607b      	str	r3, [r7, #4]
}
 80051e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051e6:	f7ff f90b 	bl	8004400 <xTaskIncrementTick>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <SysTick_Handler+0x44>)
 80051f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f383 8811 	msr	BASEPRI, r3
}
 8005202:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <vPortSetupTimerInterrupt+0x34>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <vPortSetupTimerInterrupt+0x38>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <vPortSetupTimerInterrupt+0x3c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <vPortSetupTimerInterrupt+0x40>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <vPortSetupTimerInterrupt+0x44>)
 800522e:	3b01      	subs	r3, #1
 8005230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005232:	4b04      	ldr	r3, [pc, #16]	; (8005244 <vPortSetupTimerInterrupt+0x34>)
 8005234:	2207      	movs	r2, #7
 8005236:	601a      	str	r2, [r3, #0]
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	e000e010 	.word	0xe000e010
 8005248:	e000e018 	.word	0xe000e018
 800524c:	20000000 	.word	0x20000000
 8005250:	10624dd3 	.word	0x10624dd3
 8005254:	e000e014 	.word	0xe000e014

08005258 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005258:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005268 <vPortEnableVFP+0x10>
 800525c:	6801      	ldr	r1, [r0, #0]
 800525e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005262:	6001      	str	r1, [r0, #0]
 8005264:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005266:	bf00      	nop
 8005268:	e000ed88 	.word	0xe000ed88

0800526c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005278:	f7ff f816 	bl	80042a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800527c:	4b5b      	ldr	r3, [pc, #364]	; (80053ec <pvPortMalloc+0x180>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005284:	f000 f91a 	bl	80054bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005288:	4b59      	ldr	r3, [pc, #356]	; (80053f0 <pvPortMalloc+0x184>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	f040 8092 	bne.w	80053ba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01f      	beq.n	80052dc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800529c:	2208      	movs	r2, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4413      	add	r3, r2
 80052a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	3308      	adds	r3, #8
 80052b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <pvPortMalloc+0x70>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	b672      	cpsid	i
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	b662      	cpsie	i
 80052d6:	617b      	str	r3, [r7, #20]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d06b      	beq.n	80053ba <pvPortMalloc+0x14e>
 80052e2:	4b44      	ldr	r3, [pc, #272]	; (80053f4 <pvPortMalloc+0x188>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d866      	bhi.n	80053ba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052ec:	4b42      	ldr	r3, [pc, #264]	; (80053f8 <pvPortMalloc+0x18c>)
 80052ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052f0:	4b41      	ldr	r3, [pc, #260]	; (80053f8 <pvPortMalloc+0x18c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052f6:	e004      	b.n	8005302 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d903      	bls.n	8005314 <pvPortMalloc+0xa8>
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f1      	bne.n	80052f8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005314:	4b35      	ldr	r3, [pc, #212]	; (80053ec <pvPortMalloc+0x180>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	429a      	cmp	r2, r3
 800531c:	d04d      	beq.n	80053ba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2208      	movs	r2, #8
 8005324:	4413      	add	r3, r2
 8005326:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1ad2      	subs	r2, r2, r3
 8005338:	2308      	movs	r3, #8
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	429a      	cmp	r2, r3
 800533e:	d921      	bls.n	8005384 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <pvPortMalloc+0x100>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	b672      	cpsid	i
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	b662      	cpsie	i
 8005366:	613b      	str	r3, [r7, #16]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f000 f8fe 	bl	8005580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <pvPortMalloc+0x188>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <pvPortMalloc+0x188>)
 8005390:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005392:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <pvPortMalloc+0x188>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b19      	ldr	r3, [pc, #100]	; (80053fc <pvPortMalloc+0x190>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d203      	bcs.n	80053a6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <pvPortMalloc+0x188>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a16      	ldr	r2, [pc, #88]	; (80053fc <pvPortMalloc+0x190>)
 80053a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <pvPortMalloc+0x184>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053ba:	f7fe ff83 	bl	80042c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00c      	beq.n	80053e2 <pvPortMalloc+0x176>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	b672      	cpsid	i
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	b662      	cpsie	i
 80053dc:	60fb      	str	r3, [r7, #12]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <pvPortMalloc+0x174>
	return pvReturn;
 80053e2:	69fb      	ldr	r3, [r7, #28]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3728      	adds	r7, #40	; 0x28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20004024 	.word	0x20004024
 80053f0:	20004030 	.word	0x20004030
 80053f4:	20004028 	.word	0x20004028
 80053f8:	2000401c 	.word	0x2000401c
 80053fc:	2000402c 	.word	0x2000402c

08005400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04c      	beq.n	80054ac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005412:	2308      	movs	r3, #8
 8005414:	425b      	negs	r3, r3
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <vPortFree+0xb4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10c      	bne.n	8005448 <vPortFree+0x48>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	b672      	cpsid	i
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	b662      	cpsie	i
 8005442:	60fb      	str	r3, [r7, #12]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <vPortFree+0x6a>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	b672      	cpsid	i
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	b662      	cpsie	i
 8005464:	60bb      	str	r3, [r7, #8]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <vPortFree+0xb4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d019      	beq.n	80054ac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d115      	bne.n	80054ac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <vPortFree+0xb4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	43db      	mvns	r3, r3
 800548a:	401a      	ands	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005490:	f7fe ff0a 	bl	80042a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <vPortFree+0xb8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4413      	add	r3, r2
 800549e:	4a06      	ldr	r2, [pc, #24]	; (80054b8 <vPortFree+0xb8>)
 80054a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054a2:	6938      	ldr	r0, [r7, #16]
 80054a4:	f000 f86c 	bl	8005580 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054a8:	f7fe ff0c 	bl	80042c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ac:	bf00      	nop
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20004030 	.word	0x20004030
 80054b8:	20004028 	.word	0x20004028

080054bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <prvHeapInit+0xac>)
 80054ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00c      	beq.n	80054f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3307      	adds	r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <prvHeapInit+0xac>)
 80054ec:	4413      	add	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <prvHeapInit+0xb0>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054fa:	4b1c      	ldr	r3, [pc, #112]	; (800556c <prvHeapInit+0xb0>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005508:	2208      	movs	r2, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <prvHeapInit+0xb4>)
 800551c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800551e:	4b14      	ldr	r3, [pc, #80]	; (8005570 <prvHeapInit+0xb4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <prvHeapInit+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <prvHeapInit+0xb4>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <prvHeapInit+0xb8>)
 800554a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a09      	ldr	r2, [pc, #36]	; (8005578 <prvHeapInit+0xbc>)
 8005552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <prvHeapInit+0xc0>)
 8005556:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	2000041c 	.word	0x2000041c
 800556c:	2000401c 	.word	0x2000401c
 8005570:	20004024 	.word	0x20004024
 8005574:	2000402c 	.word	0x2000402c
 8005578:	20004028 	.word	0x20004028
 800557c:	20004030 	.word	0x20004030

08005580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005588:	4b28      	ldr	r3, [pc, #160]	; (800562c <prvInsertBlockIntoFreeList+0xac>)
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e002      	b.n	8005594 <prvInsertBlockIntoFreeList+0x14>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d8f7      	bhi.n	800558e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4413      	add	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d108      	bne.n	80055c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d118      	bne.n	8005608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <prvInsertBlockIntoFreeList+0xb0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d00d      	beq.n	80055fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	441a      	add	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e008      	b.n	8005610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <prvInsertBlockIntoFreeList+0xb0>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e003      	b.n	8005610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d002      	beq.n	800561e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	2000401c 	.word	0x2000401c
 8005630:	20004024 	.word	0x20004024

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000010 	.word	0x20000010

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4d0d      	ldr	r5, [pc, #52]	; (8005678 <__libc_init_array+0x38>)
 8005644:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	2600      	movs	r6, #0
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	4d0b      	ldr	r5, [pc, #44]	; (8005680 <__libc_init_array+0x40>)
 8005652:	4c0c      	ldr	r4, [pc, #48]	; (8005684 <__libc_init_array+0x44>)
 8005654:	f000 fffa 	bl	800664c <_init>
 8005658:	1b64      	subs	r4, r4, r5
 800565a:	10a4      	asrs	r4, r4, #2
 800565c:	2600      	movs	r6, #0
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f855 3b04 	ldr.w	r3, [r5], #4
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	080067d8 	.word	0x080067d8
 800567c:	080067d8 	.word	0x080067d8
 8005680:	080067d8 	.word	0x080067d8
 8005684:	080067dc 	.word	0x080067dc

08005688 <memcpy>:
 8005688:	440a      	add	r2, r1
 800568a:	4291      	cmp	r1, r2
 800568c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005690:	d100      	bne.n	8005694 <memcpy+0xc>
 8005692:	4770      	bx	lr
 8005694:	b510      	push	{r4, lr}
 8005696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800569a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800569e:	4291      	cmp	r1, r2
 80056a0:	d1f9      	bne.n	8005696 <memcpy+0xe>
 80056a2:	bd10      	pop	{r4, pc}

080056a4 <memset>:
 80056a4:	4402      	add	r2, r0
 80056a6:	4603      	mov	r3, r0
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d100      	bne.n	80056ae <memset+0xa>
 80056ac:	4770      	bx	lr
 80056ae:	f803 1b01 	strb.w	r1, [r3], #1
 80056b2:	e7f9      	b.n	80056a8 <memset+0x4>

080056b4 <iprintf>:
 80056b4:	b40f      	push	{r0, r1, r2, r3}
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <iprintf+0x2c>)
 80056b8:	b513      	push	{r0, r1, r4, lr}
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	b124      	cbz	r4, 80056c8 <iprintf+0x14>
 80056be:	69a3      	ldr	r3, [r4, #24]
 80056c0:	b913      	cbnz	r3, 80056c8 <iprintf+0x14>
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fa5e 	bl	8005b84 <__sinit>
 80056c8:	ab05      	add	r3, sp, #20
 80056ca:	9a04      	ldr	r2, [sp, #16]
 80056cc:	68a1      	ldr	r1, [r4, #8]
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fc2f 	bl	8005f34 <_vfiprintf_r>
 80056d6:	b002      	add	sp, #8
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056dc:	b004      	add	sp, #16
 80056de:	4770      	bx	lr
 80056e0:	20000010 	.word	0x20000010

080056e4 <_puts_r>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	460e      	mov	r6, r1
 80056e8:	4605      	mov	r5, r0
 80056ea:	b118      	cbz	r0, 80056f4 <_puts_r+0x10>
 80056ec:	6983      	ldr	r3, [r0, #24]
 80056ee:	b90b      	cbnz	r3, 80056f4 <_puts_r+0x10>
 80056f0:	f000 fa48 	bl	8005b84 <__sinit>
 80056f4:	69ab      	ldr	r3, [r5, #24]
 80056f6:	68ac      	ldr	r4, [r5, #8]
 80056f8:	b913      	cbnz	r3, 8005700 <_puts_r+0x1c>
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 fa42 	bl	8005b84 <__sinit>
 8005700:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <_puts_r+0xd0>)
 8005702:	429c      	cmp	r4, r3
 8005704:	d120      	bne.n	8005748 <_puts_r+0x64>
 8005706:	686c      	ldr	r4, [r5, #4]
 8005708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800570a:	07db      	lsls	r3, r3, #31
 800570c:	d405      	bmi.n	800571a <_puts_r+0x36>
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	0598      	lsls	r0, r3, #22
 8005712:	d402      	bmi.n	800571a <_puts_r+0x36>
 8005714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005716:	f000 fad3 	bl	8005cc0 <__retarget_lock_acquire_recursive>
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	0719      	lsls	r1, r3, #28
 800571e:	d51d      	bpl.n	800575c <_puts_r+0x78>
 8005720:	6923      	ldr	r3, [r4, #16]
 8005722:	b1db      	cbz	r3, 800575c <_puts_r+0x78>
 8005724:	3e01      	subs	r6, #1
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800572c:	3b01      	subs	r3, #1
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	bb39      	cbnz	r1, 8005782 <_puts_r+0x9e>
 8005732:	2b00      	cmp	r3, #0
 8005734:	da38      	bge.n	80057a8 <_puts_r+0xc4>
 8005736:	4622      	mov	r2, r4
 8005738:	210a      	movs	r1, #10
 800573a:	4628      	mov	r0, r5
 800573c:	f000 f848 	bl	80057d0 <__swbuf_r>
 8005740:	3001      	adds	r0, #1
 8005742:	d011      	beq.n	8005768 <_puts_r+0x84>
 8005744:	250a      	movs	r5, #10
 8005746:	e011      	b.n	800576c <_puts_r+0x88>
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <_puts_r+0xd4>)
 800574a:	429c      	cmp	r4, r3
 800574c:	d101      	bne.n	8005752 <_puts_r+0x6e>
 800574e:	68ac      	ldr	r4, [r5, #8]
 8005750:	e7da      	b.n	8005708 <_puts_r+0x24>
 8005752:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <_puts_r+0xd8>)
 8005754:	429c      	cmp	r4, r3
 8005756:	bf08      	it	eq
 8005758:	68ec      	ldreq	r4, [r5, #12]
 800575a:	e7d5      	b.n	8005708 <_puts_r+0x24>
 800575c:	4621      	mov	r1, r4
 800575e:	4628      	mov	r0, r5
 8005760:	f000 f888 	bl	8005874 <__swsetup_r>
 8005764:	2800      	cmp	r0, #0
 8005766:	d0dd      	beq.n	8005724 <_puts_r+0x40>
 8005768:	f04f 35ff 	mov.w	r5, #4294967295
 800576c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800576e:	07da      	lsls	r2, r3, #31
 8005770:	d405      	bmi.n	800577e <_puts_r+0x9a>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	059b      	lsls	r3, r3, #22
 8005776:	d402      	bmi.n	800577e <_puts_r+0x9a>
 8005778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800577a:	f000 faa2 	bl	8005cc2 <__retarget_lock_release_recursive>
 800577e:	4628      	mov	r0, r5
 8005780:	bd70      	pop	{r4, r5, r6, pc}
 8005782:	2b00      	cmp	r3, #0
 8005784:	da04      	bge.n	8005790 <_puts_r+0xac>
 8005786:	69a2      	ldr	r2, [r4, #24]
 8005788:	429a      	cmp	r2, r3
 800578a:	dc06      	bgt.n	800579a <_puts_r+0xb6>
 800578c:	290a      	cmp	r1, #10
 800578e:	d004      	beq.n	800579a <_puts_r+0xb6>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	6022      	str	r2, [r4, #0]
 8005796:	7019      	strb	r1, [r3, #0]
 8005798:	e7c5      	b.n	8005726 <_puts_r+0x42>
 800579a:	4622      	mov	r2, r4
 800579c:	4628      	mov	r0, r5
 800579e:	f000 f817 	bl	80057d0 <__swbuf_r>
 80057a2:	3001      	adds	r0, #1
 80057a4:	d1bf      	bne.n	8005726 <_puts_r+0x42>
 80057a6:	e7df      	b.n	8005768 <_puts_r+0x84>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	250a      	movs	r5, #10
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	6022      	str	r2, [r4, #0]
 80057b0:	701d      	strb	r5, [r3, #0]
 80057b2:	e7db      	b.n	800576c <_puts_r+0x88>
 80057b4:	0800675c 	.word	0x0800675c
 80057b8:	0800677c 	.word	0x0800677c
 80057bc:	0800673c 	.word	0x0800673c

080057c0 <puts>:
 80057c0:	4b02      	ldr	r3, [pc, #8]	; (80057cc <puts+0xc>)
 80057c2:	4601      	mov	r1, r0
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f7ff bf8d 	b.w	80056e4 <_puts_r>
 80057ca:	bf00      	nop
 80057cc:	20000010 	.word	0x20000010

080057d0 <__swbuf_r>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	460e      	mov	r6, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	4605      	mov	r5, r0
 80057d8:	b118      	cbz	r0, 80057e2 <__swbuf_r+0x12>
 80057da:	6983      	ldr	r3, [r0, #24]
 80057dc:	b90b      	cbnz	r3, 80057e2 <__swbuf_r+0x12>
 80057de:	f000 f9d1 	bl	8005b84 <__sinit>
 80057e2:	4b21      	ldr	r3, [pc, #132]	; (8005868 <__swbuf_r+0x98>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	d12b      	bne.n	8005840 <__swbuf_r+0x70>
 80057e8:	686c      	ldr	r4, [r5, #4]
 80057ea:	69a3      	ldr	r3, [r4, #24]
 80057ec:	60a3      	str	r3, [r4, #8]
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	071a      	lsls	r2, r3, #28
 80057f2:	d52f      	bpl.n	8005854 <__swbuf_r+0x84>
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	b36b      	cbz	r3, 8005854 <__swbuf_r+0x84>
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	1ac0      	subs	r0, r0, r3
 80057fe:	6963      	ldr	r3, [r4, #20]
 8005800:	b2f6      	uxtb	r6, r6
 8005802:	4283      	cmp	r3, r0
 8005804:	4637      	mov	r7, r6
 8005806:	dc04      	bgt.n	8005812 <__swbuf_r+0x42>
 8005808:	4621      	mov	r1, r4
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f926 	bl	8005a5c <_fflush_r>
 8005810:	bb30      	cbnz	r0, 8005860 <__swbuf_r+0x90>
 8005812:	68a3      	ldr	r3, [r4, #8]
 8005814:	3b01      	subs	r3, #1
 8005816:	60a3      	str	r3, [r4, #8]
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	6022      	str	r2, [r4, #0]
 800581e:	701e      	strb	r6, [r3, #0]
 8005820:	6963      	ldr	r3, [r4, #20]
 8005822:	3001      	adds	r0, #1
 8005824:	4283      	cmp	r3, r0
 8005826:	d004      	beq.n	8005832 <__swbuf_r+0x62>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	07db      	lsls	r3, r3, #31
 800582c:	d506      	bpl.n	800583c <__swbuf_r+0x6c>
 800582e:	2e0a      	cmp	r6, #10
 8005830:	d104      	bne.n	800583c <__swbuf_r+0x6c>
 8005832:	4621      	mov	r1, r4
 8005834:	4628      	mov	r0, r5
 8005836:	f000 f911 	bl	8005a5c <_fflush_r>
 800583a:	b988      	cbnz	r0, 8005860 <__swbuf_r+0x90>
 800583c:	4638      	mov	r0, r7
 800583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <__swbuf_r+0x9c>)
 8005842:	429c      	cmp	r4, r3
 8005844:	d101      	bne.n	800584a <__swbuf_r+0x7a>
 8005846:	68ac      	ldr	r4, [r5, #8]
 8005848:	e7cf      	b.n	80057ea <__swbuf_r+0x1a>
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <__swbuf_r+0xa0>)
 800584c:	429c      	cmp	r4, r3
 800584e:	bf08      	it	eq
 8005850:	68ec      	ldreq	r4, [r5, #12]
 8005852:	e7ca      	b.n	80057ea <__swbuf_r+0x1a>
 8005854:	4621      	mov	r1, r4
 8005856:	4628      	mov	r0, r5
 8005858:	f000 f80c 	bl	8005874 <__swsetup_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	d0cb      	beq.n	80057f8 <__swbuf_r+0x28>
 8005860:	f04f 37ff 	mov.w	r7, #4294967295
 8005864:	e7ea      	b.n	800583c <__swbuf_r+0x6c>
 8005866:	bf00      	nop
 8005868:	0800675c 	.word	0x0800675c
 800586c:	0800677c 	.word	0x0800677c
 8005870:	0800673c 	.word	0x0800673c

08005874 <__swsetup_r>:
 8005874:	4b32      	ldr	r3, [pc, #200]	; (8005940 <__swsetup_r+0xcc>)
 8005876:	b570      	push	{r4, r5, r6, lr}
 8005878:	681d      	ldr	r5, [r3, #0]
 800587a:	4606      	mov	r6, r0
 800587c:	460c      	mov	r4, r1
 800587e:	b125      	cbz	r5, 800588a <__swsetup_r+0x16>
 8005880:	69ab      	ldr	r3, [r5, #24]
 8005882:	b913      	cbnz	r3, 800588a <__swsetup_r+0x16>
 8005884:	4628      	mov	r0, r5
 8005886:	f000 f97d 	bl	8005b84 <__sinit>
 800588a:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <__swsetup_r+0xd0>)
 800588c:	429c      	cmp	r4, r3
 800588e:	d10f      	bne.n	80058b0 <__swsetup_r+0x3c>
 8005890:	686c      	ldr	r4, [r5, #4]
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005898:	0719      	lsls	r1, r3, #28
 800589a:	d42c      	bmi.n	80058f6 <__swsetup_r+0x82>
 800589c:	06dd      	lsls	r5, r3, #27
 800589e:	d411      	bmi.n	80058c4 <__swsetup_r+0x50>
 80058a0:	2309      	movs	r3, #9
 80058a2:	6033      	str	r3, [r6, #0]
 80058a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	e03e      	b.n	800592e <__swsetup_r+0xba>
 80058b0:	4b25      	ldr	r3, [pc, #148]	; (8005948 <__swsetup_r+0xd4>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	d101      	bne.n	80058ba <__swsetup_r+0x46>
 80058b6:	68ac      	ldr	r4, [r5, #8]
 80058b8:	e7eb      	b.n	8005892 <__swsetup_r+0x1e>
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <__swsetup_r+0xd8>)
 80058bc:	429c      	cmp	r4, r3
 80058be:	bf08      	it	eq
 80058c0:	68ec      	ldreq	r4, [r5, #12]
 80058c2:	e7e6      	b.n	8005892 <__swsetup_r+0x1e>
 80058c4:	0758      	lsls	r0, r3, #29
 80058c6:	d512      	bpl.n	80058ee <__swsetup_r+0x7a>
 80058c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ca:	b141      	cbz	r1, 80058de <__swsetup_r+0x6a>
 80058cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058d0:	4299      	cmp	r1, r3
 80058d2:	d002      	beq.n	80058da <__swsetup_r+0x66>
 80058d4:	4630      	mov	r0, r6
 80058d6:	f000 fa59 	bl	8005d8c <_free_r>
 80058da:	2300      	movs	r3, #0
 80058dc:	6363      	str	r3, [r4, #52]	; 0x34
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	2300      	movs	r3, #0
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	6923      	ldr	r3, [r4, #16]
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	f043 0308 	orr.w	r3, r3, #8
 80058f4:	81a3      	strh	r3, [r4, #12]
 80058f6:	6923      	ldr	r3, [r4, #16]
 80058f8:	b94b      	cbnz	r3, 800590e <__swsetup_r+0x9a>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005904:	d003      	beq.n	800590e <__swsetup_r+0x9a>
 8005906:	4621      	mov	r1, r4
 8005908:	4630      	mov	r0, r6
 800590a:	f000 f9ff 	bl	8005d0c <__smakebuf_r>
 800590e:	89a0      	ldrh	r0, [r4, #12]
 8005910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005914:	f010 0301 	ands.w	r3, r0, #1
 8005918:	d00a      	beq.n	8005930 <__swsetup_r+0xbc>
 800591a:	2300      	movs	r3, #0
 800591c:	60a3      	str	r3, [r4, #8]
 800591e:	6963      	ldr	r3, [r4, #20]
 8005920:	425b      	negs	r3, r3
 8005922:	61a3      	str	r3, [r4, #24]
 8005924:	6923      	ldr	r3, [r4, #16]
 8005926:	b943      	cbnz	r3, 800593a <__swsetup_r+0xc6>
 8005928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800592c:	d1ba      	bne.n	80058a4 <__swsetup_r+0x30>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	0781      	lsls	r1, r0, #30
 8005932:	bf58      	it	pl
 8005934:	6963      	ldrpl	r3, [r4, #20]
 8005936:	60a3      	str	r3, [r4, #8]
 8005938:	e7f4      	b.n	8005924 <__swsetup_r+0xb0>
 800593a:	2000      	movs	r0, #0
 800593c:	e7f7      	b.n	800592e <__swsetup_r+0xba>
 800593e:	bf00      	nop
 8005940:	20000010 	.word	0x20000010
 8005944:	0800675c 	.word	0x0800675c
 8005948:	0800677c 	.word	0x0800677c
 800594c:	0800673c 	.word	0x0800673c

08005950 <__sflush_r>:
 8005950:	898a      	ldrh	r2, [r1, #12]
 8005952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005956:	4605      	mov	r5, r0
 8005958:	0710      	lsls	r0, r2, #28
 800595a:	460c      	mov	r4, r1
 800595c:	d458      	bmi.n	8005a10 <__sflush_r+0xc0>
 800595e:	684b      	ldr	r3, [r1, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	dc05      	bgt.n	8005970 <__sflush_r+0x20>
 8005964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	dc02      	bgt.n	8005970 <__sflush_r+0x20>
 800596a:	2000      	movs	r0, #0
 800596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005972:	2e00      	cmp	r6, #0
 8005974:	d0f9      	beq.n	800596a <__sflush_r+0x1a>
 8005976:	2300      	movs	r3, #0
 8005978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800597c:	682f      	ldr	r7, [r5, #0]
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	d032      	beq.n	80059e8 <__sflush_r+0x98>
 8005982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	075a      	lsls	r2, r3, #29
 8005988:	d505      	bpl.n	8005996 <__sflush_r+0x46>
 800598a:	6863      	ldr	r3, [r4, #4]
 800598c:	1ac0      	subs	r0, r0, r3
 800598e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005990:	b10b      	cbz	r3, 8005996 <__sflush_r+0x46>
 8005992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005994:	1ac0      	subs	r0, r0, r3
 8005996:	2300      	movs	r3, #0
 8005998:	4602      	mov	r2, r0
 800599a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800599c:	6a21      	ldr	r1, [r4, #32]
 800599e:	4628      	mov	r0, r5
 80059a0:	47b0      	blx	r6
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	d106      	bne.n	80059b6 <__sflush_r+0x66>
 80059a8:	6829      	ldr	r1, [r5, #0]
 80059aa:	291d      	cmp	r1, #29
 80059ac:	d82c      	bhi.n	8005a08 <__sflush_r+0xb8>
 80059ae:	4a2a      	ldr	r2, [pc, #168]	; (8005a58 <__sflush_r+0x108>)
 80059b0:	40ca      	lsrs	r2, r1
 80059b2:	07d6      	lsls	r6, r2, #31
 80059b4:	d528      	bpl.n	8005a08 <__sflush_r+0xb8>
 80059b6:	2200      	movs	r2, #0
 80059b8:	6062      	str	r2, [r4, #4]
 80059ba:	04d9      	lsls	r1, r3, #19
 80059bc:	6922      	ldr	r2, [r4, #16]
 80059be:	6022      	str	r2, [r4, #0]
 80059c0:	d504      	bpl.n	80059cc <__sflush_r+0x7c>
 80059c2:	1c42      	adds	r2, r0, #1
 80059c4:	d101      	bne.n	80059ca <__sflush_r+0x7a>
 80059c6:	682b      	ldr	r3, [r5, #0]
 80059c8:	b903      	cbnz	r3, 80059cc <__sflush_r+0x7c>
 80059ca:	6560      	str	r0, [r4, #84]	; 0x54
 80059cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ce:	602f      	str	r7, [r5, #0]
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d0ca      	beq.n	800596a <__sflush_r+0x1a>
 80059d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059d8:	4299      	cmp	r1, r3
 80059da:	d002      	beq.n	80059e2 <__sflush_r+0x92>
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 f9d5 	bl	8005d8c <_free_r>
 80059e2:	2000      	movs	r0, #0
 80059e4:	6360      	str	r0, [r4, #52]	; 0x34
 80059e6:	e7c1      	b.n	800596c <__sflush_r+0x1c>
 80059e8:	6a21      	ldr	r1, [r4, #32]
 80059ea:	2301      	movs	r3, #1
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b0      	blx	r6
 80059f0:	1c41      	adds	r1, r0, #1
 80059f2:	d1c7      	bne.n	8005984 <__sflush_r+0x34>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0c4      	beq.n	8005984 <__sflush_r+0x34>
 80059fa:	2b1d      	cmp	r3, #29
 80059fc:	d001      	beq.n	8005a02 <__sflush_r+0xb2>
 80059fe:	2b16      	cmp	r3, #22
 8005a00:	d101      	bne.n	8005a06 <__sflush_r+0xb6>
 8005a02:	602f      	str	r7, [r5, #0]
 8005a04:	e7b1      	b.n	800596a <__sflush_r+0x1a>
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	e7ad      	b.n	800596c <__sflush_r+0x1c>
 8005a10:	690f      	ldr	r7, [r1, #16]
 8005a12:	2f00      	cmp	r7, #0
 8005a14:	d0a9      	beq.n	800596a <__sflush_r+0x1a>
 8005a16:	0793      	lsls	r3, r2, #30
 8005a18:	680e      	ldr	r6, [r1, #0]
 8005a1a:	bf08      	it	eq
 8005a1c:	694b      	ldreq	r3, [r1, #20]
 8005a1e:	600f      	str	r7, [r1, #0]
 8005a20:	bf18      	it	ne
 8005a22:	2300      	movne	r3, #0
 8005a24:	eba6 0807 	sub.w	r8, r6, r7
 8005a28:	608b      	str	r3, [r1, #8]
 8005a2a:	f1b8 0f00 	cmp.w	r8, #0
 8005a2e:	dd9c      	ble.n	800596a <__sflush_r+0x1a>
 8005a30:	6a21      	ldr	r1, [r4, #32]
 8005a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a34:	4643      	mov	r3, r8
 8005a36:	463a      	mov	r2, r7
 8005a38:	4628      	mov	r0, r5
 8005a3a:	47b0      	blx	r6
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	dc06      	bgt.n	8005a4e <__sflush_r+0xfe>
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a46:	81a3      	strh	r3, [r4, #12]
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4c:	e78e      	b.n	800596c <__sflush_r+0x1c>
 8005a4e:	4407      	add	r7, r0
 8005a50:	eba8 0800 	sub.w	r8, r8, r0
 8005a54:	e7e9      	b.n	8005a2a <__sflush_r+0xda>
 8005a56:	bf00      	nop
 8005a58:	20400001 	.word	0x20400001

08005a5c <_fflush_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	690b      	ldr	r3, [r1, #16]
 8005a60:	4605      	mov	r5, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	b913      	cbnz	r3, 8005a6c <_fflush_r+0x10>
 8005a66:	2500      	movs	r5, #0
 8005a68:	4628      	mov	r0, r5
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	b118      	cbz	r0, 8005a76 <_fflush_r+0x1a>
 8005a6e:	6983      	ldr	r3, [r0, #24]
 8005a70:	b90b      	cbnz	r3, 8005a76 <_fflush_r+0x1a>
 8005a72:	f000 f887 	bl	8005b84 <__sinit>
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <_fflush_r+0x6c>)
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	d11b      	bne.n	8005ab4 <_fflush_r+0x58>
 8005a7c:	686c      	ldr	r4, [r5, #4]
 8005a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0ef      	beq.n	8005a66 <_fflush_r+0xa>
 8005a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a88:	07d0      	lsls	r0, r2, #31
 8005a8a:	d404      	bmi.n	8005a96 <_fflush_r+0x3a>
 8005a8c:	0599      	lsls	r1, r3, #22
 8005a8e:	d402      	bmi.n	8005a96 <_fflush_r+0x3a>
 8005a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a92:	f000 f915 	bl	8005cc0 <__retarget_lock_acquire_recursive>
 8005a96:	4628      	mov	r0, r5
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f7ff ff59 	bl	8005950 <__sflush_r>
 8005a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa0:	07da      	lsls	r2, r3, #31
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	d4e0      	bmi.n	8005a68 <_fflush_r+0xc>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	059b      	lsls	r3, r3, #22
 8005aaa:	d4dd      	bmi.n	8005a68 <_fflush_r+0xc>
 8005aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aae:	f000 f908 	bl	8005cc2 <__retarget_lock_release_recursive>
 8005ab2:	e7d9      	b.n	8005a68 <_fflush_r+0xc>
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <_fflush_r+0x70>)
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d101      	bne.n	8005abe <_fflush_r+0x62>
 8005aba:	68ac      	ldr	r4, [r5, #8]
 8005abc:	e7df      	b.n	8005a7e <_fflush_r+0x22>
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <_fflush_r+0x74>)
 8005ac0:	429c      	cmp	r4, r3
 8005ac2:	bf08      	it	eq
 8005ac4:	68ec      	ldreq	r4, [r5, #12]
 8005ac6:	e7da      	b.n	8005a7e <_fflush_r+0x22>
 8005ac8:	0800675c 	.word	0x0800675c
 8005acc:	0800677c 	.word	0x0800677c
 8005ad0:	0800673c 	.word	0x0800673c

08005ad4 <std>:
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	4604      	mov	r4, r0
 8005ada:	e9c0 3300 	strd	r3, r3, [r0]
 8005ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ae2:	6083      	str	r3, [r0, #8]
 8005ae4:	8181      	strh	r1, [r0, #12]
 8005ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ae8:	81c2      	strh	r2, [r0, #14]
 8005aea:	6183      	str	r3, [r0, #24]
 8005aec:	4619      	mov	r1, r3
 8005aee:	2208      	movs	r2, #8
 8005af0:	305c      	adds	r0, #92	; 0x5c
 8005af2:	f7ff fdd7 	bl	80056a4 <memset>
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <std+0x38>)
 8005af8:	6263      	str	r3, [r4, #36]	; 0x24
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <std+0x3c>)
 8005afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005afe:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <std+0x40>)
 8005b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <std+0x44>)
 8005b04:	6224      	str	r4, [r4, #32]
 8005b06:	6323      	str	r3, [r4, #48]	; 0x30
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	bf00      	nop
 8005b0c:	080064dd 	.word	0x080064dd
 8005b10:	080064ff 	.word	0x080064ff
 8005b14:	08006537 	.word	0x08006537
 8005b18:	0800655b 	.word	0x0800655b

08005b1c <_cleanup_r>:
 8005b1c:	4901      	ldr	r1, [pc, #4]	; (8005b24 <_cleanup_r+0x8>)
 8005b1e:	f000 b8af 	b.w	8005c80 <_fwalk_reent>
 8005b22:	bf00      	nop
 8005b24:	08005a5d 	.word	0x08005a5d

08005b28 <__sfmoreglue>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	1e4a      	subs	r2, r1, #1
 8005b2c:	2568      	movs	r5, #104	; 0x68
 8005b2e:	4355      	muls	r5, r2
 8005b30:	460e      	mov	r6, r1
 8005b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b36:	f000 f979 	bl	8005e2c <_malloc_r>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	b140      	cbz	r0, 8005b50 <__sfmoreglue+0x28>
 8005b3e:	2100      	movs	r1, #0
 8005b40:	e9c0 1600 	strd	r1, r6, [r0]
 8005b44:	300c      	adds	r0, #12
 8005b46:	60a0      	str	r0, [r4, #8]
 8005b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b4c:	f7ff fdaa 	bl	80056a4 <memset>
 8005b50:	4620      	mov	r0, r4
 8005b52:	bd70      	pop	{r4, r5, r6, pc}

08005b54 <__sfp_lock_acquire>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__sfp_lock_acquire+0x8>)
 8005b56:	f000 b8b3 	b.w	8005cc0 <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	20004120 	.word	0x20004120

08005b60 <__sfp_lock_release>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__sfp_lock_release+0x8>)
 8005b62:	f000 b8ae 	b.w	8005cc2 <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	20004120 	.word	0x20004120

08005b6c <__sinit_lock_acquire>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__sinit_lock_acquire+0x8>)
 8005b6e:	f000 b8a7 	b.w	8005cc0 <__retarget_lock_acquire_recursive>
 8005b72:	bf00      	nop
 8005b74:	2000411b 	.word	0x2000411b

08005b78 <__sinit_lock_release>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__sinit_lock_release+0x8>)
 8005b7a:	f000 b8a2 	b.w	8005cc2 <__retarget_lock_release_recursive>
 8005b7e:	bf00      	nop
 8005b80:	2000411b 	.word	0x2000411b

08005b84 <__sinit>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4604      	mov	r4, r0
 8005b88:	f7ff fff0 	bl	8005b6c <__sinit_lock_acquire>
 8005b8c:	69a3      	ldr	r3, [r4, #24]
 8005b8e:	b11b      	cbz	r3, 8005b98 <__sinit+0x14>
 8005b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b94:	f7ff bff0 	b.w	8005b78 <__sinit_lock_release>
 8005b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <__sinit+0x68>)
 8005ba0:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <__sinit+0x6c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	bf04      	itt	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	61a3      	streq	r3, [r4, #24]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 f820 	bl	8005bf4 <__sfp>
 8005bb4:	6060      	str	r0, [r4, #4]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f000 f81c 	bl	8005bf4 <__sfp>
 8005bbc:	60a0      	str	r0, [r4, #8]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 f818 	bl	8005bf4 <__sfp>
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	60e0      	str	r0, [r4, #12]
 8005bc8:	2104      	movs	r1, #4
 8005bca:	6860      	ldr	r0, [r4, #4]
 8005bcc:	f7ff ff82 	bl	8005ad4 <std>
 8005bd0:	68a0      	ldr	r0, [r4, #8]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2109      	movs	r1, #9
 8005bd6:	f7ff ff7d 	bl	8005ad4 <std>
 8005bda:	68e0      	ldr	r0, [r4, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	2112      	movs	r1, #18
 8005be0:	f7ff ff78 	bl	8005ad4 <std>
 8005be4:	2301      	movs	r3, #1
 8005be6:	61a3      	str	r3, [r4, #24]
 8005be8:	e7d2      	b.n	8005b90 <__sinit+0xc>
 8005bea:	bf00      	nop
 8005bec:	08006738 	.word	0x08006738
 8005bf0:	08005b1d 	.word	0x08005b1d

08005bf4 <__sfp>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	f7ff ffac 	bl	8005b54 <__sfp_lock_acquire>
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <__sfp+0x84>)
 8005bfe:	681e      	ldr	r6, [r3, #0]
 8005c00:	69b3      	ldr	r3, [r6, #24]
 8005c02:	b913      	cbnz	r3, 8005c0a <__sfp+0x16>
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff ffbd 	bl	8005b84 <__sinit>
 8005c0a:	3648      	adds	r6, #72	; 0x48
 8005c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	d503      	bpl.n	8005c1c <__sfp+0x28>
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	b30b      	cbz	r3, 8005c5c <__sfp+0x68>
 8005c18:	6836      	ldr	r6, [r6, #0]
 8005c1a:	e7f7      	b.n	8005c0c <__sfp+0x18>
 8005c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c20:	b9d5      	cbnz	r5, 8005c58 <__sfp+0x64>
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <__sfp+0x88>)
 8005c24:	60e3      	str	r3, [r4, #12]
 8005c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8005c2c:	f000 f847 	bl	8005cbe <__retarget_lock_init_recursive>
 8005c30:	f7ff ff96 	bl	8005b60 <__sfp_lock_release>
 8005c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c3c:	6025      	str	r5, [r4, #0]
 8005c3e:	61a5      	str	r5, [r4, #24]
 8005c40:	2208      	movs	r2, #8
 8005c42:	4629      	mov	r1, r5
 8005c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c48:	f7ff fd2c 	bl	80056a4 <memset>
 8005c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c54:	4620      	mov	r0, r4
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c58:	3468      	adds	r4, #104	; 0x68
 8005c5a:	e7d9      	b.n	8005c10 <__sfp+0x1c>
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff ff62 	bl	8005b28 <__sfmoreglue>
 8005c64:	4604      	mov	r4, r0
 8005c66:	6030      	str	r0, [r6, #0]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d1d5      	bne.n	8005c18 <__sfp+0x24>
 8005c6c:	f7ff ff78 	bl	8005b60 <__sfp_lock_release>
 8005c70:	230c      	movs	r3, #12
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	e7ee      	b.n	8005c54 <__sfp+0x60>
 8005c76:	bf00      	nop
 8005c78:	08006738 	.word	0x08006738
 8005c7c:	ffff0001 	.word	0xffff0001

08005c80 <_fwalk_reent>:
 8005c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	4606      	mov	r6, r0
 8005c86:	4688      	mov	r8, r1
 8005c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c8c:	2700      	movs	r7, #0
 8005c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c92:	f1b9 0901 	subs.w	r9, r9, #1
 8005c96:	d505      	bpl.n	8005ca4 <_fwalk_reent+0x24>
 8005c98:	6824      	ldr	r4, [r4, #0]
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d1f7      	bne.n	8005c8e <_fwalk_reent+0xe>
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca4:	89ab      	ldrh	r3, [r5, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d907      	bls.n	8005cba <_fwalk_reent+0x3a>
 8005caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	d003      	beq.n	8005cba <_fwalk_reent+0x3a>
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	47c0      	blx	r8
 8005cb8:	4307      	orrs	r7, r0
 8005cba:	3568      	adds	r5, #104	; 0x68
 8005cbc:	e7e9      	b.n	8005c92 <_fwalk_reent+0x12>

08005cbe <__retarget_lock_init_recursive>:
 8005cbe:	4770      	bx	lr

08005cc0 <__retarget_lock_acquire_recursive>:
 8005cc0:	4770      	bx	lr

08005cc2 <__retarget_lock_release_recursive>:
 8005cc2:	4770      	bx	lr

08005cc4 <__swhatbuf_r>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	b096      	sub	sp, #88	; 0x58
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	da07      	bge.n	8005ce6 <__swhatbuf_r+0x22>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	89b3      	ldrh	r3, [r6, #12]
 8005cdc:	061a      	lsls	r2, r3, #24
 8005cde:	d410      	bmi.n	8005d02 <__swhatbuf_r+0x3e>
 8005ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce4:	e00e      	b.n	8005d04 <__swhatbuf_r+0x40>
 8005ce6:	466a      	mov	r2, sp
 8005ce8:	f000 fc5e 	bl	80065a8 <_fstat_r>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	dbf2      	blt.n	8005cd6 <__swhatbuf_r+0x12>
 8005cf0:	9a01      	ldr	r2, [sp, #4]
 8005cf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cfa:	425a      	negs	r2, r3
 8005cfc:	415a      	adcs	r2, r3
 8005cfe:	602a      	str	r2, [r5, #0]
 8005d00:	e7ee      	b.n	8005ce0 <__swhatbuf_r+0x1c>
 8005d02:	2340      	movs	r3, #64	; 0x40
 8005d04:	2000      	movs	r0, #0
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	b016      	add	sp, #88	; 0x58
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}

08005d0c <__smakebuf_r>:
 8005d0c:	898b      	ldrh	r3, [r1, #12]
 8005d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d10:	079d      	lsls	r5, r3, #30
 8005d12:	4606      	mov	r6, r0
 8005d14:	460c      	mov	r4, r1
 8005d16:	d507      	bpl.n	8005d28 <__smakebuf_r+0x1c>
 8005d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	2301      	movs	r3, #1
 8005d22:	6163      	str	r3, [r4, #20]
 8005d24:	b002      	add	sp, #8
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	ab01      	add	r3, sp, #4
 8005d2a:	466a      	mov	r2, sp
 8005d2c:	f7ff ffca 	bl	8005cc4 <__swhatbuf_r>
 8005d30:	9900      	ldr	r1, [sp, #0]
 8005d32:	4605      	mov	r5, r0
 8005d34:	4630      	mov	r0, r6
 8005d36:	f000 f879 	bl	8005e2c <_malloc_r>
 8005d3a:	b948      	cbnz	r0, 8005d50 <__smakebuf_r+0x44>
 8005d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d4ef      	bmi.n	8005d24 <__smakebuf_r+0x18>
 8005d44:	f023 0303 	bic.w	r3, r3, #3
 8005d48:	f043 0302 	orr.w	r3, r3, #2
 8005d4c:	81a3      	strh	r3, [r4, #12]
 8005d4e:	e7e3      	b.n	8005d18 <__smakebuf_r+0xc>
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <__smakebuf_r+0x7c>)
 8005d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	6020      	str	r0, [r4, #0]
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	9b00      	ldr	r3, [sp, #0]
 8005d60:	6163      	str	r3, [r4, #20]
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	6120      	str	r0, [r4, #16]
 8005d66:	b15b      	cbz	r3, 8005d80 <__smakebuf_r+0x74>
 8005d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f000 fc2d 	bl	80065cc <_isatty_r>
 8005d72:	b128      	cbz	r0, 8005d80 <__smakebuf_r+0x74>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	89a0      	ldrh	r0, [r4, #12]
 8005d82:	4305      	orrs	r5, r0
 8005d84:	81a5      	strh	r5, [r4, #12]
 8005d86:	e7cd      	b.n	8005d24 <__smakebuf_r+0x18>
 8005d88:	08005b1d 	.word	0x08005b1d

08005d8c <_free_r>:
 8005d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d048      	beq.n	8005e24 <_free_r+0x98>
 8005d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d96:	9001      	str	r0, [sp, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d9e:	bfb8      	it	lt
 8005da0:	18e4      	addlt	r4, r4, r3
 8005da2:	f000 fc35 	bl	8006610 <__malloc_lock>
 8005da6:	4a20      	ldr	r2, [pc, #128]	; (8005e28 <_free_r+0x9c>)
 8005da8:	9801      	ldr	r0, [sp, #4]
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	4615      	mov	r5, r2
 8005dae:	b933      	cbnz	r3, 8005dbe <_free_r+0x32>
 8005db0:	6063      	str	r3, [r4, #4]
 8005db2:	6014      	str	r4, [r2, #0]
 8005db4:	b003      	add	sp, #12
 8005db6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dba:	f000 bc2f 	b.w	800661c <__malloc_unlock>
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	d90b      	bls.n	8005dda <_free_r+0x4e>
 8005dc2:	6821      	ldr	r1, [r4, #0]
 8005dc4:	1862      	adds	r2, r4, r1
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bf04      	itt	eq
 8005dca:	681a      	ldreq	r2, [r3, #0]
 8005dcc:	685b      	ldreq	r3, [r3, #4]
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	bf04      	itt	eq
 8005dd2:	1852      	addeq	r2, r2, r1
 8005dd4:	6022      	streq	r2, [r4, #0]
 8005dd6:	602c      	str	r4, [r5, #0]
 8005dd8:	e7ec      	b.n	8005db4 <_free_r+0x28>
 8005dda:	461a      	mov	r2, r3
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b10b      	cbz	r3, 8005de4 <_free_r+0x58>
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d9fa      	bls.n	8005dda <_free_r+0x4e>
 8005de4:	6811      	ldr	r1, [r2, #0]
 8005de6:	1855      	adds	r5, r2, r1
 8005de8:	42a5      	cmp	r5, r4
 8005dea:	d10b      	bne.n	8005e04 <_free_r+0x78>
 8005dec:	6824      	ldr	r4, [r4, #0]
 8005dee:	4421      	add	r1, r4
 8005df0:	1854      	adds	r4, r2, r1
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	d1dd      	bne.n	8005db4 <_free_r+0x28>
 8005df8:	681c      	ldr	r4, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	6053      	str	r3, [r2, #4]
 8005dfe:	4421      	add	r1, r4
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	e7d7      	b.n	8005db4 <_free_r+0x28>
 8005e04:	d902      	bls.n	8005e0c <_free_r+0x80>
 8005e06:	230c      	movs	r3, #12
 8005e08:	6003      	str	r3, [r0, #0]
 8005e0a:	e7d3      	b.n	8005db4 <_free_r+0x28>
 8005e0c:	6825      	ldr	r5, [r4, #0]
 8005e0e:	1961      	adds	r1, r4, r5
 8005e10:	428b      	cmp	r3, r1
 8005e12:	bf04      	itt	eq
 8005e14:	6819      	ldreq	r1, [r3, #0]
 8005e16:	685b      	ldreq	r3, [r3, #4]
 8005e18:	6063      	str	r3, [r4, #4]
 8005e1a:	bf04      	itt	eq
 8005e1c:	1949      	addeq	r1, r1, r5
 8005e1e:	6021      	streq	r1, [r4, #0]
 8005e20:	6054      	str	r4, [r2, #4]
 8005e22:	e7c7      	b.n	8005db4 <_free_r+0x28>
 8005e24:	b003      	add	sp, #12
 8005e26:	bd30      	pop	{r4, r5, pc}
 8005e28:	20004034 	.word	0x20004034

08005e2c <_malloc_r>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	1ccd      	adds	r5, r1, #3
 8005e30:	f025 0503 	bic.w	r5, r5, #3
 8005e34:	3508      	adds	r5, #8
 8005e36:	2d0c      	cmp	r5, #12
 8005e38:	bf38      	it	cc
 8005e3a:	250c      	movcc	r5, #12
 8005e3c:	2d00      	cmp	r5, #0
 8005e3e:	4606      	mov	r6, r0
 8005e40:	db01      	blt.n	8005e46 <_malloc_r+0x1a>
 8005e42:	42a9      	cmp	r1, r5
 8005e44:	d903      	bls.n	8005e4e <_malloc_r+0x22>
 8005e46:	230c      	movs	r3, #12
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e4e:	f000 fbdf 	bl	8006610 <__malloc_lock>
 8005e52:	4921      	ldr	r1, [pc, #132]	; (8005ed8 <_malloc_r+0xac>)
 8005e54:	680a      	ldr	r2, [r1, #0]
 8005e56:	4614      	mov	r4, r2
 8005e58:	b99c      	cbnz	r4, 8005e82 <_malloc_r+0x56>
 8005e5a:	4f20      	ldr	r7, [pc, #128]	; (8005edc <_malloc_r+0xb0>)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	b923      	cbnz	r3, 8005e6a <_malloc_r+0x3e>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4630      	mov	r0, r6
 8005e64:	f000 fb2a 	bl	80064bc <_sbrk_r>
 8005e68:	6038      	str	r0, [r7, #0]
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f000 fb25 	bl	80064bc <_sbrk_r>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	d123      	bne.n	8005ebe <_malloc_r+0x92>
 8005e76:	230c      	movs	r3, #12
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 fbce 	bl	800661c <__malloc_unlock>
 8005e80:	e7e3      	b.n	8005e4a <_malloc_r+0x1e>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	1b5b      	subs	r3, r3, r5
 8005e86:	d417      	bmi.n	8005eb8 <_malloc_r+0x8c>
 8005e88:	2b0b      	cmp	r3, #11
 8005e8a:	d903      	bls.n	8005e94 <_malloc_r+0x68>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	441c      	add	r4, r3
 8005e90:	6025      	str	r5, [r4, #0]
 8005e92:	e004      	b.n	8005e9e <_malloc_r+0x72>
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	42a2      	cmp	r2, r4
 8005e98:	bf0c      	ite	eq
 8005e9a:	600b      	streq	r3, [r1, #0]
 8005e9c:	6053      	strne	r3, [r2, #4]
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f000 fbbc 	bl	800661c <__malloc_unlock>
 8005ea4:	f104 000b 	add.w	r0, r4, #11
 8005ea8:	1d23      	adds	r3, r4, #4
 8005eaa:	f020 0007 	bic.w	r0, r0, #7
 8005eae:	1ac2      	subs	r2, r0, r3
 8005eb0:	d0cc      	beq.n	8005e4c <_malloc_r+0x20>
 8005eb2:	1a1b      	subs	r3, r3, r0
 8005eb4:	50a3      	str	r3, [r4, r2]
 8005eb6:	e7c9      	b.n	8005e4c <_malloc_r+0x20>
 8005eb8:	4622      	mov	r2, r4
 8005eba:	6864      	ldr	r4, [r4, #4]
 8005ebc:	e7cc      	b.n	8005e58 <_malloc_r+0x2c>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d0e3      	beq.n	8005e90 <_malloc_r+0x64>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f000 faf6 	bl	80064bc <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d1dd      	bne.n	8005e90 <_malloc_r+0x64>
 8005ed4:	e7cf      	b.n	8005e76 <_malloc_r+0x4a>
 8005ed6:	bf00      	nop
 8005ed8:	20004034 	.word	0x20004034
 8005edc:	20004038 	.word	0x20004038

08005ee0 <__sfputc_r>:
 8005ee0:	6893      	ldr	r3, [r2, #8]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	b410      	push	{r4}
 8005ee8:	6093      	str	r3, [r2, #8]
 8005eea:	da08      	bge.n	8005efe <__sfputc_r+0x1e>
 8005eec:	6994      	ldr	r4, [r2, #24]
 8005eee:	42a3      	cmp	r3, r4
 8005ef0:	db01      	blt.n	8005ef6 <__sfputc_r+0x16>
 8005ef2:	290a      	cmp	r1, #10
 8005ef4:	d103      	bne.n	8005efe <__sfputc_r+0x1e>
 8005ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efa:	f7ff bc69 	b.w	80057d0 <__swbuf_r>
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	1c58      	adds	r0, r3, #1
 8005f02:	6010      	str	r0, [r2, #0]
 8005f04:	7019      	strb	r1, [r3, #0]
 8005f06:	4608      	mov	r0, r1
 8005f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <__sfputs_r>:
 8005f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f10:	4606      	mov	r6, r0
 8005f12:	460f      	mov	r7, r1
 8005f14:	4614      	mov	r4, r2
 8005f16:	18d5      	adds	r5, r2, r3
 8005f18:	42ac      	cmp	r4, r5
 8005f1a:	d101      	bne.n	8005f20 <__sfputs_r+0x12>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e007      	b.n	8005f30 <__sfputs_r+0x22>
 8005f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f24:	463a      	mov	r2, r7
 8005f26:	4630      	mov	r0, r6
 8005f28:	f7ff ffda 	bl	8005ee0 <__sfputc_r>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d1f3      	bne.n	8005f18 <__sfputs_r+0xa>
 8005f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f34 <_vfiprintf_r>:
 8005f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	460d      	mov	r5, r1
 8005f3a:	b09d      	sub	sp, #116	; 0x74
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	4698      	mov	r8, r3
 8005f40:	4606      	mov	r6, r0
 8005f42:	b118      	cbz	r0, 8005f4c <_vfiprintf_r+0x18>
 8005f44:	6983      	ldr	r3, [r0, #24]
 8005f46:	b90b      	cbnz	r3, 8005f4c <_vfiprintf_r+0x18>
 8005f48:	f7ff fe1c 	bl	8005b84 <__sinit>
 8005f4c:	4b89      	ldr	r3, [pc, #548]	; (8006174 <_vfiprintf_r+0x240>)
 8005f4e:	429d      	cmp	r5, r3
 8005f50:	d11b      	bne.n	8005f8a <_vfiprintf_r+0x56>
 8005f52:	6875      	ldr	r5, [r6, #4]
 8005f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f56:	07d9      	lsls	r1, r3, #31
 8005f58:	d405      	bmi.n	8005f66 <_vfiprintf_r+0x32>
 8005f5a:	89ab      	ldrh	r3, [r5, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d402      	bmi.n	8005f66 <_vfiprintf_r+0x32>
 8005f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f62:	f7ff fead 	bl	8005cc0 <__retarget_lock_acquire_recursive>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	071b      	lsls	r3, r3, #28
 8005f6a:	d501      	bpl.n	8005f70 <_vfiprintf_r+0x3c>
 8005f6c:	692b      	ldr	r3, [r5, #16]
 8005f6e:	b9eb      	cbnz	r3, 8005fac <_vfiprintf_r+0x78>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4630      	mov	r0, r6
 8005f74:	f7ff fc7e 	bl	8005874 <__swsetup_r>
 8005f78:	b1c0      	cbz	r0, 8005fac <_vfiprintf_r+0x78>
 8005f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f7c:	07dc      	lsls	r4, r3, #31
 8005f7e:	d50e      	bpl.n	8005f9e <_vfiprintf_r+0x6a>
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295
 8005f84:	b01d      	add	sp, #116	; 0x74
 8005f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	4b7b      	ldr	r3, [pc, #492]	; (8006178 <_vfiprintf_r+0x244>)
 8005f8c:	429d      	cmp	r5, r3
 8005f8e:	d101      	bne.n	8005f94 <_vfiprintf_r+0x60>
 8005f90:	68b5      	ldr	r5, [r6, #8]
 8005f92:	e7df      	b.n	8005f54 <_vfiprintf_r+0x20>
 8005f94:	4b79      	ldr	r3, [pc, #484]	; (800617c <_vfiprintf_r+0x248>)
 8005f96:	429d      	cmp	r5, r3
 8005f98:	bf08      	it	eq
 8005f9a:	68f5      	ldreq	r5, [r6, #12]
 8005f9c:	e7da      	b.n	8005f54 <_vfiprintf_r+0x20>
 8005f9e:	89ab      	ldrh	r3, [r5, #12]
 8005fa0:	0598      	lsls	r0, r3, #22
 8005fa2:	d4ed      	bmi.n	8005f80 <_vfiprintf_r+0x4c>
 8005fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fa6:	f7ff fe8c 	bl	8005cc2 <__retarget_lock_release_recursive>
 8005faa:	e7e9      	b.n	8005f80 <_vfiprintf_r+0x4c>
 8005fac:	2300      	movs	r3, #0
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fba:	2330      	movs	r3, #48	; 0x30
 8005fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006180 <_vfiprintf_r+0x24c>
 8005fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc4:	f04f 0901 	mov.w	r9, #1
 8005fc8:	4623      	mov	r3, r4
 8005fca:	469a      	mov	sl, r3
 8005fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd0:	b10a      	cbz	r2, 8005fd6 <_vfiprintf_r+0xa2>
 8005fd2:	2a25      	cmp	r2, #37	; 0x25
 8005fd4:	d1f9      	bne.n	8005fca <_vfiprintf_r+0x96>
 8005fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fda:	d00b      	beq.n	8005ff4 <_vfiprintf_r+0xc0>
 8005fdc:	465b      	mov	r3, fp
 8005fde:	4622      	mov	r2, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7ff ff93 	bl	8005f0e <__sfputs_r>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f000 80aa 	beq.w	8006142 <_vfiprintf_r+0x20e>
 8005fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff0:	445a      	add	r2, fp
 8005ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80a2 	beq.w	8006142 <_vfiprintf_r+0x20e>
 8005ffe:	2300      	movs	r3, #0
 8006000:	f04f 32ff 	mov.w	r2, #4294967295
 8006004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006008:	f10a 0a01 	add.w	sl, sl, #1
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	9307      	str	r3, [sp, #28]
 8006010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006014:	931a      	str	r3, [sp, #104]	; 0x68
 8006016:	4654      	mov	r4, sl
 8006018:	2205      	movs	r2, #5
 800601a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601e:	4858      	ldr	r0, [pc, #352]	; (8006180 <_vfiprintf_r+0x24c>)
 8006020:	f7fa f8f6 	bl	8000210 <memchr>
 8006024:	9a04      	ldr	r2, [sp, #16]
 8006026:	b9d8      	cbnz	r0, 8006060 <_vfiprintf_r+0x12c>
 8006028:	06d1      	lsls	r1, r2, #27
 800602a:	bf44      	itt	mi
 800602c:	2320      	movmi	r3, #32
 800602e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006032:	0713      	lsls	r3, r2, #28
 8006034:	bf44      	itt	mi
 8006036:	232b      	movmi	r3, #43	; 0x2b
 8006038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800603c:	f89a 3000 	ldrb.w	r3, [sl]
 8006040:	2b2a      	cmp	r3, #42	; 0x2a
 8006042:	d015      	beq.n	8006070 <_vfiprintf_r+0x13c>
 8006044:	9a07      	ldr	r2, [sp, #28]
 8006046:	4654      	mov	r4, sl
 8006048:	2000      	movs	r0, #0
 800604a:	f04f 0c0a 	mov.w	ip, #10
 800604e:	4621      	mov	r1, r4
 8006050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006054:	3b30      	subs	r3, #48	; 0x30
 8006056:	2b09      	cmp	r3, #9
 8006058:	d94e      	bls.n	80060f8 <_vfiprintf_r+0x1c4>
 800605a:	b1b0      	cbz	r0, 800608a <_vfiprintf_r+0x156>
 800605c:	9207      	str	r2, [sp, #28]
 800605e:	e014      	b.n	800608a <_vfiprintf_r+0x156>
 8006060:	eba0 0308 	sub.w	r3, r0, r8
 8006064:	fa09 f303 	lsl.w	r3, r9, r3
 8006068:	4313      	orrs	r3, r2
 800606a:	9304      	str	r3, [sp, #16]
 800606c:	46a2      	mov	sl, r4
 800606e:	e7d2      	b.n	8006016 <_vfiprintf_r+0xe2>
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	1d19      	adds	r1, r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	9103      	str	r1, [sp, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	bfbb      	ittet	lt
 800607c:	425b      	neglt	r3, r3
 800607e:	f042 0202 	orrlt.w	r2, r2, #2
 8006082:	9307      	strge	r3, [sp, #28]
 8006084:	9307      	strlt	r3, [sp, #28]
 8006086:	bfb8      	it	lt
 8006088:	9204      	strlt	r2, [sp, #16]
 800608a:	7823      	ldrb	r3, [r4, #0]
 800608c:	2b2e      	cmp	r3, #46	; 0x2e
 800608e:	d10c      	bne.n	80060aa <_vfiprintf_r+0x176>
 8006090:	7863      	ldrb	r3, [r4, #1]
 8006092:	2b2a      	cmp	r3, #42	; 0x2a
 8006094:	d135      	bne.n	8006102 <_vfiprintf_r+0x1ce>
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	9203      	str	r2, [sp, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfb8      	it	lt
 80060a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80060a6:	3402      	adds	r4, #2
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006190 <_vfiprintf_r+0x25c>
 80060ae:	7821      	ldrb	r1, [r4, #0]
 80060b0:	2203      	movs	r2, #3
 80060b2:	4650      	mov	r0, sl
 80060b4:	f7fa f8ac 	bl	8000210 <memchr>
 80060b8:	b140      	cbz	r0, 80060cc <_vfiprintf_r+0x198>
 80060ba:	2340      	movs	r3, #64	; 0x40
 80060bc:	eba0 000a 	sub.w	r0, r0, sl
 80060c0:	fa03 f000 	lsl.w	r0, r3, r0
 80060c4:	9b04      	ldr	r3, [sp, #16]
 80060c6:	4303      	orrs	r3, r0
 80060c8:	3401      	adds	r4, #1
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d0:	482c      	ldr	r0, [pc, #176]	; (8006184 <_vfiprintf_r+0x250>)
 80060d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060d6:	2206      	movs	r2, #6
 80060d8:	f7fa f89a 	bl	8000210 <memchr>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d03f      	beq.n	8006160 <_vfiprintf_r+0x22c>
 80060e0:	4b29      	ldr	r3, [pc, #164]	; (8006188 <_vfiprintf_r+0x254>)
 80060e2:	bb1b      	cbnz	r3, 800612c <_vfiprintf_r+0x1f8>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	3307      	adds	r3, #7
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	3308      	adds	r3, #8
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f2:	443b      	add	r3, r7
 80060f4:	9309      	str	r3, [sp, #36]	; 0x24
 80060f6:	e767      	b.n	8005fc8 <_vfiprintf_r+0x94>
 80060f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80060fc:	460c      	mov	r4, r1
 80060fe:	2001      	movs	r0, #1
 8006100:	e7a5      	b.n	800604e <_vfiprintf_r+0x11a>
 8006102:	2300      	movs	r3, #0
 8006104:	3401      	adds	r4, #1
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	4619      	mov	r1, r3
 800610a:	f04f 0c0a 	mov.w	ip, #10
 800610e:	4620      	mov	r0, r4
 8006110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006114:	3a30      	subs	r2, #48	; 0x30
 8006116:	2a09      	cmp	r2, #9
 8006118:	d903      	bls.n	8006122 <_vfiprintf_r+0x1ee>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0c5      	beq.n	80060aa <_vfiprintf_r+0x176>
 800611e:	9105      	str	r1, [sp, #20]
 8006120:	e7c3      	b.n	80060aa <_vfiprintf_r+0x176>
 8006122:	fb0c 2101 	mla	r1, ip, r1, r2
 8006126:	4604      	mov	r4, r0
 8006128:	2301      	movs	r3, #1
 800612a:	e7f0      	b.n	800610e <_vfiprintf_r+0x1da>
 800612c:	ab03      	add	r3, sp, #12
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	462a      	mov	r2, r5
 8006132:	4b16      	ldr	r3, [pc, #88]	; (800618c <_vfiprintf_r+0x258>)
 8006134:	a904      	add	r1, sp, #16
 8006136:	4630      	mov	r0, r6
 8006138:	f3af 8000 	nop.w
 800613c:	4607      	mov	r7, r0
 800613e:	1c78      	adds	r0, r7, #1
 8006140:	d1d6      	bne.n	80060f0 <_vfiprintf_r+0x1bc>
 8006142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006144:	07d9      	lsls	r1, r3, #31
 8006146:	d405      	bmi.n	8006154 <_vfiprintf_r+0x220>
 8006148:	89ab      	ldrh	r3, [r5, #12]
 800614a:	059a      	lsls	r2, r3, #22
 800614c:	d402      	bmi.n	8006154 <_vfiprintf_r+0x220>
 800614e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006150:	f7ff fdb7 	bl	8005cc2 <__retarget_lock_release_recursive>
 8006154:	89ab      	ldrh	r3, [r5, #12]
 8006156:	065b      	lsls	r3, r3, #25
 8006158:	f53f af12 	bmi.w	8005f80 <_vfiprintf_r+0x4c>
 800615c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800615e:	e711      	b.n	8005f84 <_vfiprintf_r+0x50>
 8006160:	ab03      	add	r3, sp, #12
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	462a      	mov	r2, r5
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <_vfiprintf_r+0x258>)
 8006168:	a904      	add	r1, sp, #16
 800616a:	4630      	mov	r0, r6
 800616c:	f000 f880 	bl	8006270 <_printf_i>
 8006170:	e7e4      	b.n	800613c <_vfiprintf_r+0x208>
 8006172:	bf00      	nop
 8006174:	0800675c 	.word	0x0800675c
 8006178:	0800677c 	.word	0x0800677c
 800617c:	0800673c 	.word	0x0800673c
 8006180:	0800679c 	.word	0x0800679c
 8006184:	080067a6 	.word	0x080067a6
 8006188:	00000000 	.word	0x00000000
 800618c:	08005f0f 	.word	0x08005f0f
 8006190:	080067a2 	.word	0x080067a2

08006194 <_printf_common>:
 8006194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	4616      	mov	r6, r2
 800619a:	4699      	mov	r9, r3
 800619c:	688a      	ldr	r2, [r1, #8]
 800619e:	690b      	ldr	r3, [r1, #16]
 80061a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061a4:	4293      	cmp	r3, r2
 80061a6:	bfb8      	it	lt
 80061a8:	4613      	movlt	r3, r2
 80061aa:	6033      	str	r3, [r6, #0]
 80061ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061b0:	4607      	mov	r7, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	b10a      	cbz	r2, 80061ba <_printf_common+0x26>
 80061b6:	3301      	adds	r3, #1
 80061b8:	6033      	str	r3, [r6, #0]
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	0699      	lsls	r1, r3, #26
 80061be:	bf42      	ittt	mi
 80061c0:	6833      	ldrmi	r3, [r6, #0]
 80061c2:	3302      	addmi	r3, #2
 80061c4:	6033      	strmi	r3, [r6, #0]
 80061c6:	6825      	ldr	r5, [r4, #0]
 80061c8:	f015 0506 	ands.w	r5, r5, #6
 80061cc:	d106      	bne.n	80061dc <_printf_common+0x48>
 80061ce:	f104 0a19 	add.w	sl, r4, #25
 80061d2:	68e3      	ldr	r3, [r4, #12]
 80061d4:	6832      	ldr	r2, [r6, #0]
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	42ab      	cmp	r3, r5
 80061da:	dc26      	bgt.n	800622a <_printf_common+0x96>
 80061dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061e0:	1e13      	subs	r3, r2, #0
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	bf18      	it	ne
 80061e6:	2301      	movne	r3, #1
 80061e8:	0692      	lsls	r2, r2, #26
 80061ea:	d42b      	bmi.n	8006244 <_printf_common+0xb0>
 80061ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061f0:	4649      	mov	r1, r9
 80061f2:	4638      	mov	r0, r7
 80061f4:	47c0      	blx	r8
 80061f6:	3001      	adds	r0, #1
 80061f8:	d01e      	beq.n	8006238 <_printf_common+0xa4>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	68e5      	ldr	r5, [r4, #12]
 80061fe:	6832      	ldr	r2, [r6, #0]
 8006200:	f003 0306 	and.w	r3, r3, #6
 8006204:	2b04      	cmp	r3, #4
 8006206:	bf08      	it	eq
 8006208:	1aad      	subeq	r5, r5, r2
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	6922      	ldr	r2, [r4, #16]
 800620e:	bf0c      	ite	eq
 8006210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006214:	2500      	movne	r5, #0
 8006216:	4293      	cmp	r3, r2
 8006218:	bfc4      	itt	gt
 800621a:	1a9b      	subgt	r3, r3, r2
 800621c:	18ed      	addgt	r5, r5, r3
 800621e:	2600      	movs	r6, #0
 8006220:	341a      	adds	r4, #26
 8006222:	42b5      	cmp	r5, r6
 8006224:	d11a      	bne.n	800625c <_printf_common+0xc8>
 8006226:	2000      	movs	r0, #0
 8006228:	e008      	b.n	800623c <_printf_common+0xa8>
 800622a:	2301      	movs	r3, #1
 800622c:	4652      	mov	r2, sl
 800622e:	4649      	mov	r1, r9
 8006230:	4638      	mov	r0, r7
 8006232:	47c0      	blx	r8
 8006234:	3001      	adds	r0, #1
 8006236:	d103      	bne.n	8006240 <_printf_common+0xac>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006240:	3501      	adds	r5, #1
 8006242:	e7c6      	b.n	80061d2 <_printf_common+0x3e>
 8006244:	18e1      	adds	r1, r4, r3
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	2030      	movs	r0, #48	; 0x30
 800624a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800624e:	4422      	add	r2, r4
 8006250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006258:	3302      	adds	r3, #2
 800625a:	e7c7      	b.n	80061ec <_printf_common+0x58>
 800625c:	2301      	movs	r3, #1
 800625e:	4622      	mov	r2, r4
 8006260:	4649      	mov	r1, r9
 8006262:	4638      	mov	r0, r7
 8006264:	47c0      	blx	r8
 8006266:	3001      	adds	r0, #1
 8006268:	d0e6      	beq.n	8006238 <_printf_common+0xa4>
 800626a:	3601      	adds	r6, #1
 800626c:	e7d9      	b.n	8006222 <_printf_common+0x8e>
	...

08006270 <_printf_i>:
 8006270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	460c      	mov	r4, r1
 8006276:	4691      	mov	r9, r2
 8006278:	7e27      	ldrb	r7, [r4, #24]
 800627a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800627c:	2f78      	cmp	r7, #120	; 0x78
 800627e:	4680      	mov	r8, r0
 8006280:	469a      	mov	sl, r3
 8006282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006286:	d807      	bhi.n	8006298 <_printf_i+0x28>
 8006288:	2f62      	cmp	r7, #98	; 0x62
 800628a:	d80a      	bhi.n	80062a2 <_printf_i+0x32>
 800628c:	2f00      	cmp	r7, #0
 800628e:	f000 80d8 	beq.w	8006442 <_printf_i+0x1d2>
 8006292:	2f58      	cmp	r7, #88	; 0x58
 8006294:	f000 80a3 	beq.w	80063de <_printf_i+0x16e>
 8006298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800629c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062a0:	e03a      	b.n	8006318 <_printf_i+0xa8>
 80062a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062a6:	2b15      	cmp	r3, #21
 80062a8:	d8f6      	bhi.n	8006298 <_printf_i+0x28>
 80062aa:	a001      	add	r0, pc, #4	; (adr r0, 80062b0 <_printf_i+0x40>)
 80062ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062b0:	08006309 	.word	0x08006309
 80062b4:	0800631d 	.word	0x0800631d
 80062b8:	08006299 	.word	0x08006299
 80062bc:	08006299 	.word	0x08006299
 80062c0:	08006299 	.word	0x08006299
 80062c4:	08006299 	.word	0x08006299
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	08006299 	.word	0x08006299
 80062d0:	08006299 	.word	0x08006299
 80062d4:	08006299 	.word	0x08006299
 80062d8:	08006299 	.word	0x08006299
 80062dc:	08006429 	.word	0x08006429
 80062e0:	0800634d 	.word	0x0800634d
 80062e4:	0800640b 	.word	0x0800640b
 80062e8:	08006299 	.word	0x08006299
 80062ec:	08006299 	.word	0x08006299
 80062f0:	0800644b 	.word	0x0800644b
 80062f4:	08006299 	.word	0x08006299
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	08006299 	.word	0x08006299
 8006300:	08006299 	.word	0x08006299
 8006304:	08006413 	.word	0x08006413
 8006308:	680b      	ldr	r3, [r1, #0]
 800630a:	1d1a      	adds	r2, r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	600a      	str	r2, [r1, #0]
 8006310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006318:	2301      	movs	r3, #1
 800631a:	e0a3      	b.n	8006464 <_printf_i+0x1f4>
 800631c:	6825      	ldr	r5, [r4, #0]
 800631e:	6808      	ldr	r0, [r1, #0]
 8006320:	062e      	lsls	r6, r5, #24
 8006322:	f100 0304 	add.w	r3, r0, #4
 8006326:	d50a      	bpl.n	800633e <_printf_i+0xce>
 8006328:	6805      	ldr	r5, [r0, #0]
 800632a:	600b      	str	r3, [r1, #0]
 800632c:	2d00      	cmp	r5, #0
 800632e:	da03      	bge.n	8006338 <_printf_i+0xc8>
 8006330:	232d      	movs	r3, #45	; 0x2d
 8006332:	426d      	negs	r5, r5
 8006334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006338:	485e      	ldr	r0, [pc, #376]	; (80064b4 <_printf_i+0x244>)
 800633a:	230a      	movs	r3, #10
 800633c:	e019      	b.n	8006372 <_printf_i+0x102>
 800633e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006342:	6805      	ldr	r5, [r0, #0]
 8006344:	600b      	str	r3, [r1, #0]
 8006346:	bf18      	it	ne
 8006348:	b22d      	sxthne	r5, r5
 800634a:	e7ef      	b.n	800632c <_printf_i+0xbc>
 800634c:	680b      	ldr	r3, [r1, #0]
 800634e:	6825      	ldr	r5, [r4, #0]
 8006350:	1d18      	adds	r0, r3, #4
 8006352:	6008      	str	r0, [r1, #0]
 8006354:	0628      	lsls	r0, r5, #24
 8006356:	d501      	bpl.n	800635c <_printf_i+0xec>
 8006358:	681d      	ldr	r5, [r3, #0]
 800635a:	e002      	b.n	8006362 <_printf_i+0xf2>
 800635c:	0669      	lsls	r1, r5, #25
 800635e:	d5fb      	bpl.n	8006358 <_printf_i+0xe8>
 8006360:	881d      	ldrh	r5, [r3, #0]
 8006362:	4854      	ldr	r0, [pc, #336]	; (80064b4 <_printf_i+0x244>)
 8006364:	2f6f      	cmp	r7, #111	; 0x6f
 8006366:	bf0c      	ite	eq
 8006368:	2308      	moveq	r3, #8
 800636a:	230a      	movne	r3, #10
 800636c:	2100      	movs	r1, #0
 800636e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006372:	6866      	ldr	r6, [r4, #4]
 8006374:	60a6      	str	r6, [r4, #8]
 8006376:	2e00      	cmp	r6, #0
 8006378:	bfa2      	ittt	ge
 800637a:	6821      	ldrge	r1, [r4, #0]
 800637c:	f021 0104 	bicge.w	r1, r1, #4
 8006380:	6021      	strge	r1, [r4, #0]
 8006382:	b90d      	cbnz	r5, 8006388 <_printf_i+0x118>
 8006384:	2e00      	cmp	r6, #0
 8006386:	d04d      	beq.n	8006424 <_printf_i+0x1b4>
 8006388:	4616      	mov	r6, r2
 800638a:	fbb5 f1f3 	udiv	r1, r5, r3
 800638e:	fb03 5711 	mls	r7, r3, r1, r5
 8006392:	5dc7      	ldrb	r7, [r0, r7]
 8006394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006398:	462f      	mov	r7, r5
 800639a:	42bb      	cmp	r3, r7
 800639c:	460d      	mov	r5, r1
 800639e:	d9f4      	bls.n	800638a <_printf_i+0x11a>
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d10b      	bne.n	80063bc <_printf_i+0x14c>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	07df      	lsls	r7, r3, #31
 80063a8:	d508      	bpl.n	80063bc <_printf_i+0x14c>
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	6861      	ldr	r1, [r4, #4]
 80063ae:	4299      	cmp	r1, r3
 80063b0:	bfde      	ittt	le
 80063b2:	2330      	movle	r3, #48	; 0x30
 80063b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063bc:	1b92      	subs	r2, r2, r6
 80063be:	6122      	str	r2, [r4, #16]
 80063c0:	f8cd a000 	str.w	sl, [sp]
 80063c4:	464b      	mov	r3, r9
 80063c6:	aa03      	add	r2, sp, #12
 80063c8:	4621      	mov	r1, r4
 80063ca:	4640      	mov	r0, r8
 80063cc:	f7ff fee2 	bl	8006194 <_printf_common>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d14c      	bne.n	800646e <_printf_i+0x1fe>
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	b004      	add	sp, #16
 80063da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063de:	4835      	ldr	r0, [pc, #212]	; (80064b4 <_printf_i+0x244>)
 80063e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	680e      	ldr	r6, [r1, #0]
 80063e8:	061f      	lsls	r7, r3, #24
 80063ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80063ee:	600e      	str	r6, [r1, #0]
 80063f0:	d514      	bpl.n	800641c <_printf_i+0x1ac>
 80063f2:	07d9      	lsls	r1, r3, #31
 80063f4:	bf44      	itt	mi
 80063f6:	f043 0320 	orrmi.w	r3, r3, #32
 80063fa:	6023      	strmi	r3, [r4, #0]
 80063fc:	b91d      	cbnz	r5, 8006406 <_printf_i+0x196>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f023 0320 	bic.w	r3, r3, #32
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	2310      	movs	r3, #16
 8006408:	e7b0      	b.n	800636c <_printf_i+0xfc>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	f043 0320 	orr.w	r3, r3, #32
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	2378      	movs	r3, #120	; 0x78
 8006414:	4828      	ldr	r0, [pc, #160]	; (80064b8 <_printf_i+0x248>)
 8006416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800641a:	e7e3      	b.n	80063e4 <_printf_i+0x174>
 800641c:	065e      	lsls	r6, r3, #25
 800641e:	bf48      	it	mi
 8006420:	b2ad      	uxthmi	r5, r5
 8006422:	e7e6      	b.n	80063f2 <_printf_i+0x182>
 8006424:	4616      	mov	r6, r2
 8006426:	e7bb      	b.n	80063a0 <_printf_i+0x130>
 8006428:	680b      	ldr	r3, [r1, #0]
 800642a:	6826      	ldr	r6, [r4, #0]
 800642c:	6960      	ldr	r0, [r4, #20]
 800642e:	1d1d      	adds	r5, r3, #4
 8006430:	600d      	str	r5, [r1, #0]
 8006432:	0635      	lsls	r5, r6, #24
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	d501      	bpl.n	800643c <_printf_i+0x1cc>
 8006438:	6018      	str	r0, [r3, #0]
 800643a:	e002      	b.n	8006442 <_printf_i+0x1d2>
 800643c:	0671      	lsls	r1, r6, #25
 800643e:	d5fb      	bpl.n	8006438 <_printf_i+0x1c8>
 8006440:	8018      	strh	r0, [r3, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	6123      	str	r3, [r4, #16]
 8006446:	4616      	mov	r6, r2
 8006448:	e7ba      	b.n	80063c0 <_printf_i+0x150>
 800644a:	680b      	ldr	r3, [r1, #0]
 800644c:	1d1a      	adds	r2, r3, #4
 800644e:	600a      	str	r2, [r1, #0]
 8006450:	681e      	ldr	r6, [r3, #0]
 8006452:	6862      	ldr	r2, [r4, #4]
 8006454:	2100      	movs	r1, #0
 8006456:	4630      	mov	r0, r6
 8006458:	f7f9 feda 	bl	8000210 <memchr>
 800645c:	b108      	cbz	r0, 8006462 <_printf_i+0x1f2>
 800645e:	1b80      	subs	r0, r0, r6
 8006460:	6060      	str	r0, [r4, #4]
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	2300      	movs	r3, #0
 8006468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800646c:	e7a8      	b.n	80063c0 <_printf_i+0x150>
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	4632      	mov	r2, r6
 8006472:	4649      	mov	r1, r9
 8006474:	4640      	mov	r0, r8
 8006476:	47d0      	blx	sl
 8006478:	3001      	adds	r0, #1
 800647a:	d0ab      	beq.n	80063d4 <_printf_i+0x164>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	079b      	lsls	r3, r3, #30
 8006480:	d413      	bmi.n	80064aa <_printf_i+0x23a>
 8006482:	68e0      	ldr	r0, [r4, #12]
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	4298      	cmp	r0, r3
 8006488:	bfb8      	it	lt
 800648a:	4618      	movlt	r0, r3
 800648c:	e7a4      	b.n	80063d8 <_printf_i+0x168>
 800648e:	2301      	movs	r3, #1
 8006490:	4632      	mov	r2, r6
 8006492:	4649      	mov	r1, r9
 8006494:	4640      	mov	r0, r8
 8006496:	47d0      	blx	sl
 8006498:	3001      	adds	r0, #1
 800649a:	d09b      	beq.n	80063d4 <_printf_i+0x164>
 800649c:	3501      	adds	r5, #1
 800649e:	68e3      	ldr	r3, [r4, #12]
 80064a0:	9903      	ldr	r1, [sp, #12]
 80064a2:	1a5b      	subs	r3, r3, r1
 80064a4:	42ab      	cmp	r3, r5
 80064a6:	dcf2      	bgt.n	800648e <_printf_i+0x21e>
 80064a8:	e7eb      	b.n	8006482 <_printf_i+0x212>
 80064aa:	2500      	movs	r5, #0
 80064ac:	f104 0619 	add.w	r6, r4, #25
 80064b0:	e7f5      	b.n	800649e <_printf_i+0x22e>
 80064b2:	bf00      	nop
 80064b4:	080067ad 	.word	0x080067ad
 80064b8:	080067be 	.word	0x080067be

080064bc <_sbrk_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d06      	ldr	r5, [pc, #24]	; (80064d8 <_sbrk_r+0x1c>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	f7fa fb4c 	bl	8000b64 <_sbrk>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_sbrk_r+0x1a>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_sbrk_r+0x1a>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20004124 	.word	0x20004124

080064dc <__sread>:
 80064dc:	b510      	push	{r4, lr}
 80064de:	460c      	mov	r4, r1
 80064e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e4:	f000 f8a0 	bl	8006628 <_read_r>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	bfab      	itete	ge
 80064ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064ee:	89a3      	ldrhlt	r3, [r4, #12]
 80064f0:	181b      	addge	r3, r3, r0
 80064f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064f6:	bfac      	ite	ge
 80064f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80064fa:	81a3      	strhlt	r3, [r4, #12]
 80064fc:	bd10      	pop	{r4, pc}

080064fe <__swrite>:
 80064fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006502:	461f      	mov	r7, r3
 8006504:	898b      	ldrh	r3, [r1, #12]
 8006506:	05db      	lsls	r3, r3, #23
 8006508:	4605      	mov	r5, r0
 800650a:	460c      	mov	r4, r1
 800650c:	4616      	mov	r6, r2
 800650e:	d505      	bpl.n	800651c <__swrite+0x1e>
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	2302      	movs	r3, #2
 8006516:	2200      	movs	r2, #0
 8006518:	f000 f868 	bl	80065ec <_lseek_r>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	4632      	mov	r2, r6
 800652a:	463b      	mov	r3, r7
 800652c:	4628      	mov	r0, r5
 800652e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	f000 b817 	b.w	8006564 <_write_r>

08006536 <__sseek>:
 8006536:	b510      	push	{r4, lr}
 8006538:	460c      	mov	r4, r1
 800653a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800653e:	f000 f855 	bl	80065ec <_lseek_r>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	bf15      	itete	ne
 8006548:	6560      	strne	r0, [r4, #84]	; 0x54
 800654a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800654e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006552:	81a3      	strheq	r3, [r4, #12]
 8006554:	bf18      	it	ne
 8006556:	81a3      	strhne	r3, [r4, #12]
 8006558:	bd10      	pop	{r4, pc}

0800655a <__sclose>:
 800655a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655e:	f000 b813 	b.w	8006588 <_close_r>
	...

08006564 <_write_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	; (8006584 <_write_r+0x20>)
 8006568:	4604      	mov	r4, r0
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	2200      	movs	r2, #0
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fa faa5 	bl	8000ac2 <_write>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_write_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_write_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20004124 	.word	0x20004124

08006588 <_close_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	; (80065a4 <_close_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa fab1 	bl	8000afa <_close>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_close_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_close_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20004124 	.word	0x20004124

080065a8 <_fstat_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d07      	ldr	r5, [pc, #28]	; (80065c8 <_fstat_r+0x20>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	f7fa faac 	bl	8000b12 <_fstat>
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	d102      	bne.n	80065c4 <_fstat_r+0x1c>
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	b103      	cbz	r3, 80065c4 <_fstat_r+0x1c>
 80065c2:	6023      	str	r3, [r4, #0]
 80065c4:	bd38      	pop	{r3, r4, r5, pc}
 80065c6:	bf00      	nop
 80065c8:	20004124 	.word	0x20004124

080065cc <_isatty_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_isatty_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa faab 	bl	8000b32 <_isatty>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_isatty_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_isatty_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20004124 	.word	0x20004124

080065ec <_lseek_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	; (800660c <_lseek_r+0x20>)
 80065f0:	4604      	mov	r4, r0
 80065f2:	4608      	mov	r0, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	2200      	movs	r2, #0
 80065f8:	602a      	str	r2, [r5, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f7fa faa4 	bl	8000b48 <_lseek>
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	d102      	bne.n	800660a <_lseek_r+0x1e>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	b103      	cbz	r3, 800660a <_lseek_r+0x1e>
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	20004124 	.word	0x20004124

08006610 <__malloc_lock>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__malloc_lock+0x8>)
 8006612:	f7ff bb55 	b.w	8005cc0 <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	2000411c 	.word	0x2000411c

0800661c <__malloc_unlock>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__malloc_unlock+0x8>)
 800661e:	f7ff bb50 	b.w	8005cc2 <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	2000411c 	.word	0x2000411c

08006628 <_read_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	; (8006648 <_read_r+0x20>)
 800662c:	4604      	mov	r4, r0
 800662e:	4608      	mov	r0, r1
 8006630:	4611      	mov	r1, r2
 8006632:	2200      	movs	r2, #0
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fa fa26 	bl	8000a88 <_read>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_read_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_read_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20004124 	.word	0x20004124

0800664c <_init>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr

08006658 <_fini>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr
