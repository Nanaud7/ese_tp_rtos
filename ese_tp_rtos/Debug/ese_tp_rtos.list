
ese_tp_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005898  08005898  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058a0  080058a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004110  20000074  0800591c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004184  0800591c  00024184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179a3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fd  00000000  00000000  00037a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0003af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e84  00000000  00000000  0003d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cd5  00000000  00000000  00066124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f915f  00000000  00000000  0007adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  00173fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800578c 	.word	0x0800578c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800578c 	.word	0x0800578c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <vApplicationGetIdleTaskMemory+0x30>)
 80005be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000090 	.word	0x20000090
 80005d8:	20000144 	.word	0x20000144

080005dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_FREERTOS_Init+0x30>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fe83 	bl	8003304 <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <MX_FREERTOS_Init+0x34>)
 8000602:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bdb0      	pop	{r4, r5, r7, pc}
 800060c:	080057b0 	.word	0x080057b0
 8000610:	2000409c 	.word	0x2000409c

08000614 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f002 febd 	bl	800339c <osDelay>
 8000622:	e7fb      	b.n	800061c <StartDefaultTask+0x8>

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0x5c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_GPIO_Init+0x5c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_GPIO_Init+0x5c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	2201      	movs	r2, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <__io_putchar+0x20>)
 8000696:	f002 f9cf 	bl	8002a38 <HAL_UART_Transmit>
	return ch;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200040ec 	.word	0x200040ec

080006a8 <vTaskPeriodique>:

void vTaskPeriodique(void *p){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	uint16_t v = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	81fb      	strh	r3, [r7, #14]

	while(1){
		printf("%d\r\n",v++);
 80006b4:	89fb      	ldrh	r3, [r7, #14]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	81fa      	strh	r2, [r7, #14]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <vTaskPeriodique+0x24>)
 80006be:	f004 f9f7 	bl	8004ab0 <iprintf>
		vTaskDelay(1000);
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	f003 f8e3 	bl	8003890 <vTaskDelay>
		printf("%d\r\n",v++);
 80006ca:	e7f3      	b.n	80006b4 <vTaskPeriodique+0xc>
 80006cc:	080057cc 	.word	0x080057cc

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fada 	bl	8000c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f81f 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ffa1 	bl	8000624 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006e2:	f000 fa19 	bl	8000b18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BaseType_t xReturned;
  TaskHandle_t xHandle1 = NULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]

  xReturned = xTaskCreate(
 80006ea:	463b      	mov	r3, r7
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2301      	movs	r3, #1
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <main+0x44>)
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <main+0x48>)
 80006fc:	f002 ff79 	bl	80035f2 <xTaskCreate>
 8000700:	6078      	str	r0, [r7, #4]
		  STACK_SIZE,
		  ( void * ) NULL,
		  1,
		  &xHandle1);

  if( xReturned != pdPASS ) while(1){}
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d000      	beq.n	800070a <main+0x3a>
 8000708:	e7fe      	b.n	8000708 <main+0x38>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800070a:	f7ff ff67 	bl	80005dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800070e:	f002 fdf2 	bl	80032f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x42>
 8000714:	080057d4 	.word	0x080057d4
 8000718:	080006a9 	.word	0x080006a9

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b0b4      	sub	sp, #208	; 0xd0
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 f95d 	bl	80049ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2284      	movs	r2, #132	; 0x84
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f004 f94e 	bl	80049ea <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <SystemClock_Config+0x118>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a38      	ldr	r2, [pc, #224]	; (8000834 <SystemClock_Config+0x118>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <SystemClock_Config+0x118>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <SystemClock_Config+0x11c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a33      	ldr	r2, [pc, #204]	; (8000838 <SystemClock_Config+0x11c>)
 800076c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <SystemClock_Config+0x11c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2310      	movs	r3, #16
 800078c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007a2:	23d8      	movs	r3, #216	; 0xd8
 80007a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fd73 	bl	80012a4 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007c4:	f000 f84c 	bl	8000860 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c8:	f000 fd1c 	bl	8001204 <HAL_PWREx_EnableOverDrive>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007d2:	f000 f845 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007fc:	2107      	movs	r1, #7
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fff4 	bl	80017ec <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800080a:	f000 f829 	bl	8000860 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000812:	2300      	movs	r3, #0
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f9ee 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000826:	f000 f81b 	bl	8000860 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	37d0      	adds	r7, #208	; 0xd0
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 fa2b 	bl	8000ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40001000 	.word	0x40001000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fad5 	bl	8000e58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	2036      	movs	r0, #54	; 0x36
 80008d2:	f000 fac1 	bl	8000e58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008d6:	2036      	movs	r0, #54	; 0x36
 80008d8:	f000 fada 	bl	8000e90 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_InitTick+0xa0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a1e      	ldr	r2, [pc, #120]	; (800095c <HAL_InitTick+0xa0>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <HAL_InitTick+0xa0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 0210 	add.w	r2, r7, #16
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f94a 	bl	8001b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000904:	f001 f920 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8000908:	4603      	mov	r3, r0
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <HAL_InitTick+0xa4>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0c9b      	lsrs	r3, r3, #18
 8000918:	3b01      	subs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_InitTick+0xa8>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <HAL_InitTick+0xac>)
 8000920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_InitTick+0xa8>)
 8000924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000928:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_InitTick+0xa8>)
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_InitTick+0xa8>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_InitTick+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <HAL_InitTick+0xa8>)
 800093e:	f001 fd4d 	bl	80023dc <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <HAL_InitTick+0xa8>)
 800094a:	f001 fda9 	bl	80024a0 <HAL_TIM_Base_Start_IT>
 800094e:	4603      	mov	r3, r0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	431bde83 	.word	0x431bde83
 8000964:	200040a0 	.word	0x200040a0
 8000968:	40001000 	.word	0x40001000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM6_DAC_IRQHandler+0x10>)
 800099e:	f001 fdf7 	bl	8002590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200040a0 	.word	0x200040a0

080009ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e00a      	b.n	80009d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009be:	f3af 8000 	nop.w
 80009c2:	4601      	mov	r1, r0
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	b2ca      	uxtb	r2, r1
 80009cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf0      	blt.n	80009be <_read+0x12>
	}

return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e009      	b.n	8000a0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fe3f 	bl	8000684 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf1      	blt.n	80009f8 <_write+0x12>
	}
	return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_close>:

int _close(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	return -1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a46:	605a      	str	r2, [r3, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_isatty>:

int _isatty(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
	return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f003 fe74 	bl	80047a4 <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20050000 	.word	0x20050000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	20000344 	.word	0x20000344
 8000af0:	20004188 	.word	0x20004188

08000af4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART1_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b5c:	f001 ff1e 	bl	800299c <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f7ff fe7b 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200040ec 	.word	0x200040ec
 8000b74:	40011000 	.word	0x40011000

08000b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <HAL_UART_MspInit+0xb4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d144      	bne.n	8000c24 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a24      	ldr	r2, [pc, #144]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000ba0:	f043 0310 	orr.w	r3, r3, #16
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <HAL_UART_MspInit+0xbc>)
 8000bfe:	f000 f955 	bl	8000eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c14:	2307      	movs	r3, #7
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000c20:	f000 f944 	bl	8000eac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40011000 	.word	0x40011000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40020000 	.word	0x40020000

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c42:	490e      	ldr	r1, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c58:	4c0b      	ldr	r4, [pc, #44]	; (8000c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c66:	f7ff ff45 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f003 fe97 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fd2f 	bl	80006d0 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c80:	080058a8 	.word	0x080058a8
  ldr r2, =_sbss
 8000c84:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c88:	20004184 	.word	0x20004184

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>

08000c8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f8d5 	bl	8000e42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c98:	200f      	movs	r0, #15
 8000c9a:	f7ff fe0f 	bl	80008bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c9e:	f7ff fde5 	bl	800086c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20004170 	.word	0x20004170

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20004170 	.word	0x20004170

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x40>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	05fa0000 	.word	0x05fa0000

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff4c 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6a:	f7ff ff61 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f7ff ffb1 	bl	8000ddc <NVIC_EncodePriority>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff80 	bl	8000d88 <__NVIC_SetPriority>
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff54 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	e175      	b.n	80011b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	f040 8164 	bne.w	80011b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d00b      	beq.n	8000f0a <HAL_GPIO_Init+0x5e>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efe:	2b11      	cmp	r3, #17
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d130      	bne.n	8000f6c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x100>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b12      	cmp	r3, #18
 8000faa:	d123      	bne.n	8000ff4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	69b9      	ldr	r1, [r7, #24]
 8000ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0203 	and.w	r2, r3, #3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80be 	beq.w	80011b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b66      	ldr	r3, [pc, #408]	; (80011d0 <HAL_GPIO_Init+0x324>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a65      	ldr	r2, [pc, #404]	; (80011d0 <HAL_GPIO_Init+0x324>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HAL_GPIO_Init+0x324>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800104e:	4a61      	ldr	r2, [pc, #388]	; (80011d4 <HAL_GPIO_Init+0x328>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a58      	ldr	r2, [pc, #352]	; (80011d8 <HAL_GPIO_Init+0x32c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d037      	beq.n	80010ea <HAL_GPIO_Init+0x23e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a57      	ldr	r2, [pc, #348]	; (80011dc <HAL_GPIO_Init+0x330>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d031      	beq.n	80010e6 <HAL_GPIO_Init+0x23a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a56      	ldr	r2, [pc, #344]	; (80011e0 <HAL_GPIO_Init+0x334>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d02b      	beq.n	80010e2 <HAL_GPIO_Init+0x236>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a55      	ldr	r2, [pc, #340]	; (80011e4 <HAL_GPIO_Init+0x338>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d025      	beq.n	80010de <HAL_GPIO_Init+0x232>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <HAL_GPIO_Init+0x33c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01f      	beq.n	80010da <HAL_GPIO_Init+0x22e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a53      	ldr	r2, [pc, #332]	; (80011ec <HAL_GPIO_Init+0x340>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x22a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_GPIO_Init+0x344>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x226>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a51      	ldr	r2, [pc, #324]	; (80011f4 <HAL_GPIO_Init+0x348>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x222>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a50      	ldr	r2, [pc, #320]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x21e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <HAL_GPIO_Init+0x350>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x21a>
 80010c2:	2309      	movs	r3, #9
 80010c4:	e012      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010c6:	230a      	movs	r3, #10
 80010c8:	e010      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010ca:	2308      	movs	r3, #8
 80010cc:	e00e      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00c      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00a      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010da:	2304      	movs	r3, #4
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x240>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010fc:	4935      	ldr	r1, [pc, #212]	; (80011d4 <HAL_GPIO_Init+0x328>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <HAL_GPIO_Init+0x354>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112e:	4a34      	ldr	r2, [pc, #208]	; (8001200 <HAL_GPIO_Init+0x354>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <HAL_GPIO_Init+0x354>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <HAL_GPIO_Init+0x354>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <HAL_GPIO_Init+0x354>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_GPIO_Init+0x354>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_GPIO_Init+0x354>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_GPIO_Init+0x354>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f ae86 	bls.w	8000ecc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40021c00 	.word	0x40021c00
 80011f8:	40022000 	.word	0x40022000
 80011fc:	40022400 	.word	0x40022400
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_PWREx_EnableOverDrive+0x98>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_PWREx_EnableOverDrive+0x98>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_PWREx_EnableOverDrive+0x98>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001232:	f7ff fd4d 	bl	8000cd0 <HAL_GetTick>
 8001236:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001238:	e009      	b.n	800124e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800123a:	f7ff fd49 	bl	8000cd0 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001248:	d901      	bls.n	800124e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e022      	b.n	8001294 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125a:	d1ee      	bne.n	800123a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001266:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001268:	f7ff fd32 	bl	8000cd0 <HAL_GetTick>
 800126c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800126e:	e009      	b.n	8001284 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001270:	f7ff fd2e 	bl	8000cd0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800127e:	d901      	bls.n	8001284 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e007      	b.n	8001294 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001290:	d1ee      	bne.n	8001270 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e291      	b.n	80017de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8087 	beq.w	80013d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c8:	4b96      	ldr	r3, [pc, #600]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d00c      	beq.n	80012ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d4:	4b93      	ldr	r3, [pc, #588]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d112      	bne.n	8001306 <HAL_RCC_OscConfig+0x62>
 80012e0:	4b90      	ldr	r3, [pc, #576]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ec:	d10b      	bne.n	8001306 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ee:	4b8d      	ldr	r3, [pc, #564]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d06c      	beq.n	80013d4 <HAL_RCC_OscConfig+0x130>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d168      	bne.n	80013d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e26b      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130e:	d106      	bne.n	800131e <HAL_RCC_OscConfig+0x7a>
 8001310:	4b84      	ldr	r3, [pc, #528]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a83      	ldr	r2, [pc, #524]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e02e      	b.n	800137c <HAL_RCC_OscConfig+0xd8>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x9c>
 8001326:	4b7f      	ldr	r3, [pc, #508]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a7e      	ldr	r2, [pc, #504]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800132c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b7c      	ldr	r3, [pc, #496]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a7b      	ldr	r2, [pc, #492]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xd8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0xc0>
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a75      	ldr	r2, [pc, #468]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b73      	ldr	r3, [pc, #460]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a72      	ldr	r2, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xd8>
 8001364:	4b6f      	ldr	r3, [pc, #444]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a6e      	ldr	r2, [pc, #440]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b6c      	ldr	r3, [pc, #432]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a6b      	ldr	r2, [pc, #428]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fca4 	bl	8000cd0 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fca0 	bl	8000cd0 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e21f      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b61      	ldr	r3, [pc, #388]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc90 	bl	8000cd0 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc8c 	bl	8000cd0 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e20b      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b57      	ldr	r3, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x110>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d069      	beq.n	80014b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e2:	4b50      	ldr	r3, [pc, #320]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x190>
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d116      	bne.n	8001434 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x17a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e1df      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	493d      	ldr	r1, [pc, #244]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	e040      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d023      	beq.n	8001484 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a38      	ldr	r2, [pc, #224]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc42 	bl	8000cd0 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fc3e 	bl	8000cd0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1bd      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4929      	ldr	r1, [pc, #164]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
 8001482:	e018      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc1e 	bl	8000cd0 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fc1a 	bl	8000cd0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e199      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d038      	beq.n	8001534 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d019      	beq.n	80014fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d6:	f7ff fbfb 	bl	8000cd0 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014de:	f7ff fbf7 	bl	8000cd0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e176      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x23a>
 80014fc:	e01a      	b.n	8001534 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_RCC_OscConfig+0x280>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150a:	f7ff fbe1 	bl	8000cd0 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fbdd 	bl	8000cd0 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d903      	bls.n	8001528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e15c      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
 8001524:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	4b91      	ldr	r3, [pc, #580]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ee      	bne.n	8001512 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80a4 	beq.w	800168a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001542:	4b8b      	ldr	r3, [pc, #556]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b88      	ldr	r3, [pc, #544]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a87      	ldr	r2, [pc, #540]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b85      	ldr	r3, [pc, #532]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156a:	4b82      	ldr	r3, [pc, #520]	; (8001774 <HAL_RCC_OscConfig+0x4d0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001576:	4b7f      	ldr	r3, [pc, #508]	; (8001774 <HAL_RCC_OscConfig+0x4d0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7e      	ldr	r2, [pc, #504]	; (8001774 <HAL_RCC_OscConfig+0x4d0>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fba5 	bl	8000cd0 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff fba1 	bl	8000cd0 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e120      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159c:	4b75      	ldr	r3, [pc, #468]	; (8001774 <HAL_RCC_OscConfig+0x4d0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x31a>
 80015b0:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a6e      	ldr	r2, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	e02d      	b.n	800161a <HAL_RCC_OscConfig+0x376>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x33c>
 80015c6:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a69      	ldr	r2, [pc, #420]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	4b67      	ldr	r3, [pc, #412]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a66      	ldr	r2, [pc, #408]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	e01c      	b.n	800161a <HAL_RCC_OscConfig+0x376>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_OscConfig+0x35e>
 80015e8:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a60      	ldr	r2, [pc, #384]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
 80015f4:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	e00b      	b.n	800161a <HAL_RCC_OscConfig+0x376>
 8001602:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a5a      	ldr	r2, [pc, #360]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	4b58      	ldr	r3, [pc, #352]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a57      	ldr	r2, [pc, #348]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d015      	beq.n	800164e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fb55 	bl	8000cd0 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fb51 	bl	8000cd0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0ce      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ee      	beq.n	800162a <HAL_RCC_OscConfig+0x386>
 800164c:	e014      	b.n	8001678 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164e:	f7ff fb3f 	bl	8000cd0 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fb3b 	bl	8000cd0 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0b8      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	4b40      	ldr	r3, [pc, #256]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ee      	bne.n	8001656 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d105      	bne.n	800168a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a3b      	ldr	r2, [pc, #236]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a4 	beq.w	80017dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	d06b      	beq.n	8001778 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d149      	bne.n	800173c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a30      	ldr	r2, [pc, #192]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb0c 	bl	8000cd0 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fb08 	bl	8000cd0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e087      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69da      	ldr	r2, [r3, #28]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	019b      	lsls	r3, r3, #6
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	3b01      	subs	r3, #1
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	4313      	orrs	r3, r2
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001706:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 800170e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fadc 	bl	8000cd0 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff fad8 	bl	8000cd0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e057      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x478>
 800173a:	e04f      	b.n	80017dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fac2 	bl	8000cd0 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff fabe 	bl	8000cd0 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e03d      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x4ac>
 800176e:	e035      	b.n	80017dc <HAL_RCC_OscConfig+0x538>
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x544>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d028      	beq.n	80017d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d121      	bne.n	80017d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d11a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a8:	4013      	ands	r3, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d111      	bne.n	80017d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	3b01      	subs	r3, #1
 80017c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0d0      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d910      	bls.n	8001834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 020f 	bic.w	r2, r3, #15
 800181a:	4965      	ldr	r1, [pc, #404]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0b8      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800186e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	494d      	ldr	r1, [pc, #308]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d040      	beq.n	8001910 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e07f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e073      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4936      	ldr	r1, [pc, #216]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e0:	f7ff f9f6 	bl	8000cd0 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff f9f2 	bl	8000cd0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e053      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d210      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 020f 	bic.w	r2, r3, #15
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e032      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4916      	ldr	r1, [pc, #88]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197e:	f000 f821 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001982:	4602      	mov	r2, r0
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	490a      	ldr	r1, [pc, #40]	; (80019b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001990:	5ccb      	ldrb	r3, [r1, r3]
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1d0>)
 8001998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_ClockConfig+0x1d4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe ff8c 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	080057e8 	.word	0x080057e8
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019ca:	2100      	movs	r1, #0
 80019cc:	6079      	str	r1, [r7, #4]
 80019ce:	2100      	movs	r1, #0
 80019d0:	60f9      	str	r1, [r7, #12]
 80019d2:	2100      	movs	r1, #0
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019d6:	2100      	movs	r1, #0
 80019d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019da:	4952      	ldr	r1, [pc, #328]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x160>)
 80019dc:	6889      	ldr	r1, [r1, #8]
 80019de:	f001 010c 	and.w	r1, r1, #12
 80019e2:	2908      	cmp	r1, #8
 80019e4:	d00d      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x3e>
 80019e6:	2908      	cmp	r1, #8
 80019e8:	f200 8094 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x150>
 80019ec:	2900      	cmp	r1, #0
 80019ee:	d002      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x32>
 80019f0:	2904      	cmp	r1, #4
 80019f2:	d003      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x38>
 80019f4:	e08e      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f6:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x164>)
 80019f8:	60bb      	str	r3, [r7, #8]
      break;
 80019fa:	e08e      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019fc:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x168>)
 80019fe:	60bb      	str	r3, [r7, #8]
      break;
 8001a00:	e08b      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a02:	4948      	ldr	r1, [pc, #288]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a04:	6849      	ldr	r1, [r1, #4]
 8001a06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001a0a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a0c:	4945      	ldr	r1, [pc, #276]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a0e:	6849      	ldr	r1, [r1, #4]
 8001a10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001a14:	2900      	cmp	r1, #0
 8001a16:	d024      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a18:	4942      	ldr	r1, [pc, #264]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a1a:	6849      	ldr	r1, [r1, #4]
 8001a1c:	0989      	lsrs	r1, r1, #6
 8001a1e:	4608      	mov	r0, r1
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a28:	f04f 0500 	mov.w	r5, #0
 8001a2c:	ea00 0204 	and.w	r2, r0, r4
 8001a30:	ea01 0305 	and.w	r3, r1, r5
 8001a34:	493d      	ldr	r1, [pc, #244]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8001a36:	fb01 f003 	mul.w	r0, r1, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	fb01 f102 	mul.w	r1, r1, r2
 8001a40:	1844      	adds	r4, r0, r1
 8001a42:	493a      	ldr	r1, [pc, #232]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8001a44:	fba2 0101 	umull	r0, r1, r2, r1
 8001a48:	1863      	adds	r3, r4, r1
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f7fe fc2c 	bl	80002b0 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e04a      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	ea02 0400 	and.w	r4, r2, r0
 8001a7a:	ea03 0501 	and.w	r5, r3, r1
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	014b      	lsls	r3, r1, #5
 8001a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a90:	0142      	lsls	r2, r0, #5
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	1b00      	subs	r0, r0, r4
 8001a98:	eb61 0105 	sbc.w	r1, r1, r5
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	018b      	lsls	r3, r1, #6
 8001aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aaa:	0182      	lsls	r2, r0, #6
 8001aac:	1a12      	subs	r2, r2, r0
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	00d9      	lsls	r1, r3, #3
 8001abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac0:	00d0      	lsls	r0, r2, #3
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	1912      	adds	r2, r2, r4
 8001ac8:	eb45 0303 	adc.w	r3, r5, r3
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	0299      	lsls	r1, r3, #10
 8001ad6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ada:	0290      	lsls	r0, r2, #10
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f7fe fbe0 	bl	80002b0 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	60bb      	str	r3, [r7, #8]
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b16:	60bb      	str	r3, [r7, #8]
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdb0      	pop	{r4, r5, r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	017d7840 	.word	0x017d7840

08001b30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	080057f8 	.word	0x080057f8

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b74:	f7ff ffdc 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	080057f8 	.word	0x080057f8

08001b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_RCC_GetClockConfig+0x60>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c24:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c2e:	6093      	str	r3, [r2, #8]
 8001c30:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c38:	4964      	ldr	r1, [pc, #400]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d017      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c56:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	4959      	ldr	r1, [pc, #356]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c74:	d101      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d017      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c92:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	494a      	ldr	r1, [pc, #296]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 808b 	beq.w	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	4a39      	ldr	r2, [pc, #228]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6413      	str	r3, [r2, #64]	; 0x40
 8001cec:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d04:	f7fe ffe4 	bl	8000cd0 <HAL_GetTick>
 8001d08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0c:	f7fe ffe0 	bl	8000cd0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e357      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d035      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d02e      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d114      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ffa8 	bl	8000cd0 <HAL_GetTick>
 8001d80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7fe ffa4 	bl	8000cd0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e319      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ee      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001db2:	d111      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	4901      	ldr	r1, [pc, #4]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	0ffffcff 	.word	0x0ffffcff
 8001dd8:	4bb1      	ldr	r3, [pc, #708]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4ab0      	ldr	r2, [pc, #704]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001de2:	6093      	str	r3, [r2, #8]
 8001de4:	4bae      	ldr	r3, [pc, #696]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	49ab      	ldr	r1, [pc, #684]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e02:	4ba7      	ldr	r3, [pc, #668]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e08:	4aa5      	ldr	r2, [pc, #660]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e12:	4ba3      	ldr	r3, [pc, #652]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	49a0      	ldr	r1, [pc, #640]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e30:	4b9b      	ldr	r3, [pc, #620]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e3e:	4998      	ldr	r1, [pc, #608]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e52:	4b93      	ldr	r3, [pc, #588]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e60:	498f      	ldr	r1, [pc, #572]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e74:	4b8a      	ldr	r3, [pc, #552]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e82:	4987      	ldr	r1, [pc, #540]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e96:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	497e      	ldr	r1, [pc, #504]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb8:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4976      	ldr	r1, [pc, #472]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eda:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee0:	f023 020c 	bic.w	r2, r3, #12
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	496d      	ldr	r1, [pc, #436]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4965      	ldr	r1, [pc, #404]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f1e:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2c:	495c      	ldr	r1, [pc, #368]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f40:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	4954      	ldr	r1, [pc, #336]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	494b      	ldr	r1, [pc, #300]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	4943      	ldr	r1, [pc, #268]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb4:	493a      	ldr	r1, [pc, #232]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fd6:	4932      	ldr	r1, [pc, #200]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d011      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ff8:	4929      	ldr	r1, [pc, #164]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002008:	d101      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205c:	4910      	ldr	r1, [pc, #64]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d006      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80d9 	beq.w	800222a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800207e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002084:	f7fe fe24 	bl	8000cd0 <HAL_GetTick>
 8002088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800208a:	e00b      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800208c:	f7fe fe20 	bl	8000cd0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d904      	bls.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e197      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020a4:	4b6c      	ldr	r3, [pc, #432]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ed      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d021      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11d      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020c4:	4b64      	ldr	r3, [pc, #400]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020d2:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d8:	0e1b      	lsrs	r3, r3, #24
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	019a      	lsls	r2, r3, #6
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	061b      	lsls	r3, r3, #24
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	071b      	lsls	r3, r3, #28
 80020f8:	4957      	ldr	r1, [pc, #348]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800211e:	2b00      	cmp	r3, #0
 8002120:	d02e      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d129      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800212e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002132:	0c1b      	lsrs	r3, r3, #16
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002140:	0f1b      	lsrs	r3, r3, #28
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	019a      	lsls	r2, r3, #6
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	431a      	orrs	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	071b      	lsls	r3, r3, #28
 8002160:	493d      	ldr	r1, [pc, #244]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002168:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800216a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800216e:	f023 021f 	bic.w	r2, r3, #31
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	3b01      	subs	r3, #1
 8002178:	4937      	ldr	r1, [pc, #220]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01d      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800218c:	4b32      	ldr	r3, [pc, #200]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800218e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002192:	0e1b      	lsrs	r3, r3, #24
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800219a:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800219c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a0:	0f1b      	lsrs	r3, r3, #28
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	019a      	lsls	r2, r3, #6
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	431a      	orrs	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	431a      	orrs	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	071b      	lsls	r3, r3, #28
 80021c0:	4925      	ldr	r1, [pc, #148]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d011      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	019a      	lsls	r2, r3, #6
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	061b      	lsls	r3, r3, #24
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	071b      	lsls	r3, r3, #28
 80021f0:	4919      	ldr	r1, [pc, #100]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002204:	f7fe fd64 	bl	8000cd0 <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800220c:	f7fe fd60 	bl	8000cd0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0d7      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	f040 80cd 	bne.w	80023cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223e:	f7fe fd47 	bl	8000cd0 <HAL_GetTick>
 8002242:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002246:	f7fe fd43 	bl	8000cd0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d903      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0ba      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002258:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800225c:	4b5e      	ldr	r3, [pc, #376]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002268:	d0ed      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02e      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d12a      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	0f1b      	lsrs	r3, r3, #28
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	019a      	lsls	r2, r3, #6
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	071b      	lsls	r3, r3, #28
 80022c6:	4944      	ldr	r1, [pc, #272]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022ce:	4b42      	ldr	r3, [pc, #264]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	3b01      	subs	r3, #1
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	493d      	ldr	r1, [pc, #244]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d022      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022fc:	d11d      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	0e1b      	lsrs	r3, r3, #24
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	0f1b      	lsrs	r3, r3, #28
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	019a      	lsls	r2, r3, #6
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	061b      	lsls	r3, r3, #24
 800232c:	431a      	orrs	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	071b      	lsls	r3, r3, #28
 8002332:	4929      	ldr	r1, [pc, #164]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d028      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	0e1b      	lsrs	r3, r3, #24
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	019a      	lsls	r2, r3, #6
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	041b      	lsls	r3, r3, #16
 800236c:	431a      	orrs	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	071b      	lsls	r3, r3, #28
 800237a:	4917      	ldr	r1, [pc, #92]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	4911      	ldr	r1, [pc, #68]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a4:	f7fe fc94 	bl	8000cd0 <HAL_GetTick>
 80023a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023ac:	f7fe fc90 	bl	8000cd0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e007      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ca:	d1ef      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e049      	b.n	8002482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f841 	bl	800248a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 fa00 	bl	8002820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d001      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e054      	b.n	8002562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <HAL_TIM_Base_Start_IT+0xd0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d01d      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <HAL_TIM_Base_Start_IT+0xd4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_TIM_Base_Start_IT+0xd8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_TIM_Base_Start_IT+0xdc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <HAL_TIM_Base_Start_IT+0xe0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <HAL_TIM_Base_Start_IT+0xe4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <HAL_TIM_Base_Start_IT+0xe8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d115      	bne.n	800254c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_TIM_Base_Start_IT+0xec>)
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d015      	beq.n	800255e <HAL_TIM_Base_Start_IT+0xbe>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d011      	beq.n	800255e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	e008      	b.n	800255e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e000      	b.n	8002560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800
 800257c:	40000c00 	.word	0x40000c00
 8002580:	40010400 	.word	0x40010400
 8002584:	40014000 	.word	0x40014000
 8002588:	40001800 	.word	0x40001800
 800258c:	00010007 	.word	0x00010007

08002590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0202 	mvn.w	r2, #2
 80025bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f905 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8f7 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f908 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0204 	mvn.w	r2, #4
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8db 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f8cd 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8de 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b08      	cmp	r3, #8
 800264c:	d122      	bne.n	8002694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0208 	mvn.w	r2, #8
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2204      	movs	r2, #4
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8b1 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8a3 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8b4 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d122      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0210 	mvn.w	r2, #16
 80026b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2208      	movs	r2, #8
 80026be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f887 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f879 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f88a 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0201 	mvn.w	r2, #1
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe f894 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f91a 	bl	8002974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274e:	d10e      	bne.n	800276e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d107      	bne.n	800276e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f90d 	bl	8002988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d10e      	bne.n	800279a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d107      	bne.n	800279a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f838 	bl	800280a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d10e      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d107      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 0220 	mvn.w	r2, #32
 80027be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8cd 	bl	8002960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <TIM_Base_SetConfig+0x114>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d00f      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3d      	ldr	r2, [pc, #244]	; (8002938 <TIM_Base_SetConfig+0x118>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00b      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3c      	ldr	r2, [pc, #240]	; (800293c <TIM_Base_SetConfig+0x11c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <TIM_Base_SetConfig+0x120>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <TIM_Base_SetConfig+0x124>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a2f      	ldr	r2, [pc, #188]	; (8002934 <TIM_Base_SetConfig+0x114>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d027      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <TIM_Base_SetConfig+0x118>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d023      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2b      	ldr	r2, [pc, #172]	; (800293c <TIM_Base_SetConfig+0x11c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01f      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <TIM_Base_SetConfig+0x120>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01b      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <TIM_Base_SetConfig+0x124>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d017      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <TIM_Base_SetConfig+0x128>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <TIM_Base_SetConfig+0x12c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00f      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <TIM_Base_SetConfig+0x130>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a25      	ldr	r2, [pc, #148]	; (8002954 <TIM_Base_SetConfig+0x134>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <TIM_Base_SetConfig+0x138>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <TIM_Base_SetConfig+0x13c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <TIM_Base_SetConfig+0x114>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0xf8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <TIM_Base_SetConfig+0x124>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d103      	bne.n	8002920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	615a      	str	r2, [r3, #20]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40010400 	.word	0x40010400
 8002948:	40014000 	.word	0x40014000
 800294c:	40014400 	.word	0x40014400
 8002950:	40014800 	.word	0x40014800
 8002954:	40001800 	.word	0x40001800
 8002958:	40001c00 	.word	0x40001c00
 800295c:	40002000 	.word	0x40002000

08002960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e040      	b.n	8002a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe f8da 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8c0 	bl	8002b60 <UART_SetConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e022      	b.n	8002a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fb16 	bl	8003024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb9d 	bl	8003168 <UART_CheckIdleState>
 8002a2e:	4603      	mov	r3, r0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 8081 	bne.w	8002b54 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_UART_Transmit+0x26>
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e079      	b.n	8002b56 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Transmit+0x38>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e072      	b.n	8002b56 <HAL_UART_Transmit+0x11e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2221      	movs	r2, #33	; 0x21
 8002a84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a86:	f7fe f923 	bl	8000cd0 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa4:	d108      	bne.n	8002ab8 <HAL_UART_Transmit+0x80>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	e003      	b.n	8002ac0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ac8:	e02c      	b.n	8002b24 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fb7a 	bl	80031ce <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e038      	b.n	8002b56 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10b      	bne.n	8002b02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	3302      	adds	r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e007      	b.n	8002b12 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1cc      	bne.n	8002aca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fb47 	bl	80031ce <UART_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e005      	b.n	8002b56 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4ba7      	ldr	r3, [pc, #668]	; (8002e28 <UART_SetConfig+0x2c8>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	6979      	ldr	r1, [r7, #20]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a95      	ldr	r2, [pc, #596]	; (8002e2c <UART_SetConfig+0x2cc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d120      	bne.n	8002c1e <UART_SetConfig+0xbe>
 8002bdc:	4b94      	ldr	r3, [pc, #592]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d816      	bhi.n	8002c18 <UART_SetConfig+0xb8>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <UART_SetConfig+0x90>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c0d 	.word	0x08002c0d
 8002bf8:	08002c07 	.word	0x08002c07
 8002bfc:	08002c13 	.word	0x08002c13
 8002c00:	2301      	movs	r3, #1
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e14f      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c06:	2302      	movs	r3, #2
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e14c      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e149      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c12:	2308      	movs	r3, #8
 8002c14:	77fb      	strb	r3, [r7, #31]
 8002c16:	e146      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c18:	2310      	movs	r3, #16
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e143      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a84      	ldr	r2, [pc, #528]	; (8002e34 <UART_SetConfig+0x2d4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d132      	bne.n	8002c8e <UART_SetConfig+0x12e>
 8002c28:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d828      	bhi.n	8002c88 <UART_SetConfig+0x128>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <UART_SetConfig+0xdc>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c71 	.word	0x08002c71
 8002c40:	08002c89 	.word	0x08002c89
 8002c44:	08002c89 	.word	0x08002c89
 8002c48:	08002c89 	.word	0x08002c89
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c89 	.word	0x08002c89
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002c89 	.word	0x08002c89
 8002c5c:	08002c77 	.word	0x08002c77
 8002c60:	08002c89 	.word	0x08002c89
 8002c64:	08002c89 	.word	0x08002c89
 8002c68:	08002c89 	.word	0x08002c89
 8002c6c:	08002c83 	.word	0x08002c83
 8002c70:	2300      	movs	r3, #0
 8002c72:	77fb      	strb	r3, [r7, #31]
 8002c74:	e117      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c76:	2302      	movs	r3, #2
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e114      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e111      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c82:	2308      	movs	r3, #8
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e10e      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	e10b      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a69      	ldr	r2, [pc, #420]	; (8002e38 <UART_SetConfig+0x2d8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d120      	bne.n	8002cda <UART_SetConfig+0x17a>
 8002c98:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ca2:	2b30      	cmp	r3, #48	; 0x30
 8002ca4:	d013      	beq.n	8002cce <UART_SetConfig+0x16e>
 8002ca6:	2b30      	cmp	r3, #48	; 0x30
 8002ca8:	d814      	bhi.n	8002cd4 <UART_SetConfig+0x174>
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d009      	beq.n	8002cc2 <UART_SetConfig+0x162>
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d810      	bhi.n	8002cd4 <UART_SetConfig+0x174>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <UART_SetConfig+0x15c>
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d006      	beq.n	8002cc8 <UART_SetConfig+0x168>
 8002cba:	e00b      	b.n	8002cd4 <UART_SetConfig+0x174>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77fb      	strb	r3, [r7, #31]
 8002cc0:	e0f1      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e0ee      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002cc8:	2304      	movs	r3, #4
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e0eb      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002cce:	2308      	movs	r3, #8
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	e0e8      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e0e5      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a57      	ldr	r2, [pc, #348]	; (8002e3c <UART_SetConfig+0x2dc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d120      	bne.n	8002d26 <UART_SetConfig+0x1c6>
 8002ce4:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cee:	2bc0      	cmp	r3, #192	; 0xc0
 8002cf0:	d013      	beq.n	8002d1a <UART_SetConfig+0x1ba>
 8002cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cf4:	d814      	bhi.n	8002d20 <UART_SetConfig+0x1c0>
 8002cf6:	2b80      	cmp	r3, #128	; 0x80
 8002cf8:	d009      	beq.n	8002d0e <UART_SetConfig+0x1ae>
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d810      	bhi.n	8002d20 <UART_SetConfig+0x1c0>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <UART_SetConfig+0x1a8>
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d006      	beq.n	8002d14 <UART_SetConfig+0x1b4>
 8002d06:	e00b      	b.n	8002d20 <UART_SetConfig+0x1c0>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e0cb      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e0c8      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d14:	2304      	movs	r3, #4
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e0c5      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e0c2      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d20:	2310      	movs	r3, #16
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e0bf      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a45      	ldr	r2, [pc, #276]	; (8002e40 <UART_SetConfig+0x2e0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d125      	bne.n	8002d7c <UART_SetConfig+0x21c>
 8002d30:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d3e:	d017      	beq.n	8002d70 <UART_SetConfig+0x210>
 8002d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d44:	d817      	bhi.n	8002d76 <UART_SetConfig+0x216>
 8002d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4a:	d00b      	beq.n	8002d64 <UART_SetConfig+0x204>
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d50:	d811      	bhi.n	8002d76 <UART_SetConfig+0x216>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <UART_SetConfig+0x1fe>
 8002d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5a:	d006      	beq.n	8002d6a <UART_SetConfig+0x20a>
 8002d5c:	e00b      	b.n	8002d76 <UART_SetConfig+0x216>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e0a0      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d64:	2302      	movs	r3, #2
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e09d      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	77fb      	strb	r3, [r7, #31]
 8002d6e:	e09a      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d70:	2308      	movs	r3, #8
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	e097      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d76:	2310      	movs	r3, #16
 8002d78:	77fb      	strb	r3, [r7, #31]
 8002d7a:	e094      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a30      	ldr	r2, [pc, #192]	; (8002e44 <UART_SetConfig+0x2e4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d125      	bne.n	8002dd2 <UART_SetConfig+0x272>
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d94:	d017      	beq.n	8002dc6 <UART_SetConfig+0x266>
 8002d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d9a:	d817      	bhi.n	8002dcc <UART_SetConfig+0x26c>
 8002d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da0:	d00b      	beq.n	8002dba <UART_SetConfig+0x25a>
 8002da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da6:	d811      	bhi.n	8002dcc <UART_SetConfig+0x26c>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <UART_SetConfig+0x254>
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d006      	beq.n	8002dc0 <UART_SetConfig+0x260>
 8002db2:	e00b      	b.n	8002dcc <UART_SetConfig+0x26c>
 8002db4:	2301      	movs	r3, #1
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e075      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	77fb      	strb	r3, [r7, #31]
 8002dbe:	e072      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e06f      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	77fb      	strb	r3, [r7, #31]
 8002dca:	e06c      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e069      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <UART_SetConfig+0x2e8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d137      	bne.n	8002e4c <UART_SetConfig+0x2ec>
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <UART_SetConfig+0x2d0>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002de6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002dea:	d017      	beq.n	8002e1c <UART_SetConfig+0x2bc>
 8002dec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002df0:	d817      	bhi.n	8002e22 <UART_SetConfig+0x2c2>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	d00b      	beq.n	8002e10 <UART_SetConfig+0x2b0>
 8002df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfc:	d811      	bhi.n	8002e22 <UART_SetConfig+0x2c2>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <UART_SetConfig+0x2aa>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d006      	beq.n	8002e16 <UART_SetConfig+0x2b6>
 8002e08:	e00b      	b.n	8002e22 <UART_SetConfig+0x2c2>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e04a      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e10:	2302      	movs	r3, #2
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e047      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e16:	2304      	movs	r3, #4
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e044      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e041      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e22:	2310      	movs	r3, #16
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e03e      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e28:	efff69f3 	.word	0xefff69f3
 8002e2c:	40011000 	.word	0x40011000
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40004400 	.word	0x40004400
 8002e38:	40004800 	.word	0x40004800
 8002e3c:	40004c00 	.word	0x40004c00
 8002e40:	40005000 	.word	0x40005000
 8002e44:	40011400 	.word	0x40011400
 8002e48:	40007800 	.word	0x40007800
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a71      	ldr	r2, [pc, #452]	; (8003018 <UART_SetConfig+0x4b8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d125      	bne.n	8002ea2 <UART_SetConfig+0x342>
 8002e56:	4b71      	ldr	r3, [pc, #452]	; (800301c <UART_SetConfig+0x4bc>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e64:	d017      	beq.n	8002e96 <UART_SetConfig+0x336>
 8002e66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e6a:	d817      	bhi.n	8002e9c <UART_SetConfig+0x33c>
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d00b      	beq.n	8002e8a <UART_SetConfig+0x32a>
 8002e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e76:	d811      	bhi.n	8002e9c <UART_SetConfig+0x33c>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <UART_SetConfig+0x324>
 8002e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e80:	d006      	beq.n	8002e90 <UART_SetConfig+0x330>
 8002e82:	e00b      	b.n	8002e9c <UART_SetConfig+0x33c>
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e00d      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e00a      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e90:	2304      	movs	r3, #4
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e007      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e96:	2308      	movs	r3, #8
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e004      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e001      	b.n	8002ea6 <UART_SetConfig+0x346>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eae:	d15b      	bne.n	8002f68 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002eb0:	7ffb      	ldrb	r3, [r7, #31]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d827      	bhi.n	8002f06 <UART_SetConfig+0x3a6>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0x35c>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee9 	.word	0x08002ee9
 8002ec4:	08002ef1 	.word	0x08002ef1
 8002ec8:	08002f07 	.word	0x08002f07
 8002ecc:	08002ef7 	.word	0x08002ef7
 8002ed0:	08002f07 	.word	0x08002f07
 8002ed4:	08002f07 	.word	0x08002f07
 8002ed8:	08002f07 	.word	0x08002f07
 8002edc:	08002eff 	.word	0x08002eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7fe fe32 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	61b8      	str	r0, [r7, #24]
        break;
 8002ee6:	e013      	b.n	8002f10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ee8:	f7fe fe42 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002eec:	61b8      	str	r0, [r7, #24]
        break;
 8002eee:	e00f      	b.n	8002f10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <UART_SetConfig+0x4c0>)
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e00c      	b.n	8002f10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef6:	f7fe fd65 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002efa:	61b8      	str	r0, [r7, #24]
        break;
 8002efc:	e008      	b.n	8002f10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f02:	61bb      	str	r3, [r7, #24]
        break;
 8002f04:	e004      	b.n	8002f10 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d074      	beq.n	8003000 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	005a      	lsls	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	441a      	add	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d916      	bls.n	8002f62 <UART_SetConfig+0x402>
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3a:	d212      	bcs.n	8002f62 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f023 030f 	bic.w	r3, r3, #15
 8002f44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	89fb      	ldrh	r3, [r7, #14]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	89fa      	ldrh	r2, [r7, #14]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	e04e      	b.n	8003000 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	77bb      	strb	r3, [r7, #30]
 8002f66:	e04b      	b.n	8003000 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d827      	bhi.n	8002fbe <UART_SetConfig+0x45e>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <UART_SetConfig+0x414>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002f99 	.word	0x08002f99
 8002f78:	08002fa1 	.word	0x08002fa1
 8002f7c:	08002fa9 	.word	0x08002fa9
 8002f80:	08002fbf 	.word	0x08002fbf
 8002f84:	08002faf 	.word	0x08002faf
 8002f88:	08002fbf 	.word	0x08002fbf
 8002f8c:	08002fbf 	.word	0x08002fbf
 8002f90:	08002fbf 	.word	0x08002fbf
 8002f94:	08002fb7 	.word	0x08002fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f98:	f7fe fdd6 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002f9c:	61b8      	str	r0, [r7, #24]
        break;
 8002f9e:	e013      	b.n	8002fc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa0:	f7fe fde6 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002fa4:	61b8      	str	r0, [r7, #24]
        break;
 8002fa6:	e00f      	b.n	8002fc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <UART_SetConfig+0x4c0>)
 8002faa:	61bb      	str	r3, [r7, #24]
        break;
 8002fac:	e00c      	b.n	8002fc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fae:	f7fe fd09 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	61b8      	str	r0, [r7, #24]
        break;
 8002fb4:	e008      	b.n	8002fc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fba:	61bb      	str	r3, [r7, #24]
        break;
 8002fbc:	e004      	b.n	8002fc8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8002fc6:	bf00      	nop
    }

    if (pclk != 0U)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d018      	beq.n	8003000 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085a      	lsrs	r2, r3, #1
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	d908      	bls.n	8002ffc <UART_SetConfig+0x49c>
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d204      	bcs.n	8002ffc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	e001      	b.n	8003000 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800300c:	7fbb      	ldrb	r3, [r7, #30]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40007c00 	.word	0x40007c00
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400

08003024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01a      	beq.n	800313a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003122:	d10a      	bne.n	800313a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  }
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003178:	f7fd fdaa 	bl	8000cd0 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b08      	cmp	r3, #8
 800318a:	d10e      	bne.n	80031aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800318c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f817 	bl	80031ce <UART_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e00d      	b.n	80031c6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	4613      	mov	r3, r2
 80031dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031de:	e05e      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d05a      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fd fd72 	bl	8000cd0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <UART_WaitOnFlagUntilTimeout+0x30>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11b      	bne.n	8003236 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800320c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e043      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02c      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003252:	d124      	bne.n	800329e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800325c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800326c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e00f      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4013      	ands	r3, r2
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d091      	beq.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d8:	2b84      	cmp	r3, #132	; 0x84
 80032da:	d005      	beq.n	80032e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	3303      	adds	r3, #3
 80032e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032e8:	68fb      	ldr	r3, [r7, #12]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032fa:	f000 faff 	bl	80038fc <vTaskStartScheduler>
  
  return osOK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}

08003304 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af04      	add	r7, sp, #16
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <osThreadCreate+0x54>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01c      	beq.n	8003358 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685c      	ldr	r4, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681d      	ldr	r5, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691e      	ldr	r6, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ffc8 	bl	80032c6 <makeFreeRtosPriority>
 8003336:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003340:	9202      	str	r2, [sp, #8]
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	9100      	str	r1, [sp, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4632      	mov	r2, r6
 800334a:	4629      	mov	r1, r5
 800334c:	4620      	mov	r0, r4
 800334e:	f000 f8ed 	bl	800352c <xTaskCreateStatic>
 8003352:	4603      	mov	r3, r0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	e01c      	b.n	8003392 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685c      	ldr	r4, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003364:	b29e      	uxth	r6, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ffaa 	bl	80032c6 <makeFreeRtosPriority>
 8003372:	4602      	mov	r2, r0
 8003374:	f107 030c 	add.w	r3, r7, #12
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	9200      	str	r2, [sp, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4632      	mov	r2, r6
 8003380:	4629      	mov	r1, r5
 8003382:	4620      	mov	r0, r4
 8003384:	f000 f935 	bl	80035f2 <xTaskCreate>
 8003388:	4603      	mov	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d001      	beq.n	8003392 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800339c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <osDelay+0x16>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	e000      	b.n	80033b4 <osDelay+0x18>
 80033b2:	2301      	movs	r3, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fa6b 	bl	8003890 <vTaskDelay>
  
  return osOK;
 80033ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f103 0208 	add.w	r2, r3, #8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f103 0208 	add.w	r2, r3, #8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0208 	add.w	r2, r3, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d103      	bne.n	8003486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e00c      	b.n	80034a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3308      	adds	r3, #8
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e002      	b.n	8003494 <vListInsert+0x2e>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d2f6      	bcs.n	800348e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6852      	ldr	r2, [r2, #4]
 80034f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d103      	bne.n	800350c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08e      	sub	sp, #56	; 0x38
 8003530:	af04      	add	r7, sp, #16
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800353a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10c      	bne.n	800355a <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	b672      	cpsid	i
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	b662      	cpsie	i
 8003554:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10c      	bne.n	800357a <xTaskCreateStatic+0x4e>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	b672      	cpsid	i
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	b662      	cpsie	i
 8003574:	61fb      	str	r3, [r7, #28]
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800357a:	23b4      	movs	r3, #180	; 0xb4
 800357c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2bb4      	cmp	r3, #180	; 0xb4
 8003582:	d00c      	beq.n	800359e <xTaskCreateStatic+0x72>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	b672      	cpsid	i
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	b662      	cpsie	i
 8003598:	61bb      	str	r3, [r7, #24]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800359e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01e      	beq.n	80035e4 <xTaskCreateStatic+0xb8>
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035be:	2300      	movs	r3, #0
 80035c0:	9303      	str	r3, [sp, #12]
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f850 	bl	800367c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035de:	f000 f8ed 	bl	80037bc <prvAddNewTaskToReadyList>
 80035e2:	e001      	b.n	80035e8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035e8:	697b      	ldr	r3, [r7, #20]
	}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b08c      	sub	sp, #48	; 0x30
 80035f6:	af04      	add	r7, sp, #16
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fee8 	bl	80043dc <pvPortMalloc>
 800360c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003614:	20b4      	movs	r0, #180	; 0xb4
 8003616:	f000 fee1 	bl	80043dc <pvPortMalloc>
 800361a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
 8003628:	e005      	b.n	8003636 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f000 ffa0 	bl	8004570 <vPortFree>
 8003630:	e001      	b.n	8003636 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d017      	beq.n	800366c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	2300      	movs	r3, #0
 8003648:	9303      	str	r3, [sp, #12]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	9302      	str	r3, [sp, #8]
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f80e 	bl	800367c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003660:	69f8      	ldr	r0, [r7, #28]
 8003662:	f000 f8ab 	bl	80037bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003666:	2301      	movs	r3, #1
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	e002      	b.n	8003672 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800366c:	f04f 33ff 	mov.w	r3, #4294967295
 8003670:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003672:	69bb      	ldr	r3, [r7, #24]
	}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003694:	440b      	add	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f023 0307 	bic.w	r3, r3, #7
 80036a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00c      	beq.n	80036c8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	b672      	cpsid	i
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	b662      	cpsie	i
 80036c2:	617b      	str	r3, [r7, #20]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01f      	beq.n	800370e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e012      	b.n	80036fa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	7819      	ldrb	r1, [r3, #0]
 80036dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	3334      	adds	r3, #52	; 0x34
 80036e4:	460a      	mov	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d9e9      	bls.n	80036d4 <prvInitialiseNewTask+0x58>
 8003700:	e000      	b.n	8003704 <prvInitialiseNewTask+0x88>
			{
				break;
 8003702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	e003      	b.n	8003716 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	2b06      	cmp	r3, #6
 800371a:	d901      	bls.n	8003720 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800371c:	2306      	movs	r3, #6
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	2200      	movs	r2, #0
 8003730:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	3304      	adds	r3, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fe64 	bl	8003404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	3318      	adds	r3, #24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe5f 	bl	8003404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	f1c3 0207 	rsb	r2, r3, #7
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2200      	movs	r2, #0
 8003768:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	334c      	adds	r3, #76	; 0x4c
 8003770:	2260      	movs	r2, #96	; 0x60
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f001 f938 	bl	80049ea <memset>
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <prvInitialiseNewTask+0x134>)
 800377e:	651a      	str	r2, [r3, #80]	; 0x50
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <prvInitialiseNewTask+0x138>)
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <prvInitialiseNewTask+0x13c>)
 800378a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	69b8      	ldr	r0, [r7, #24]
 8003792:	f000 fc2d 	bl	8003ff0 <pxPortInitialiseStack>
 8003796:	4602      	mov	r2, r0
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08005820 	.word	0x08005820
 80037b4:	08005840 	.word	0x08005840
 80037b8:	08005800 	.word	0x08005800

080037bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037c4:	f000 fd22 	bl	800420c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c8:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <prvAddNewTaskToReadyList+0xb8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	4a29      	ldr	r2, [pc, #164]	; (8003874 <prvAddNewTaskToReadyList+0xb8>)
 80037d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <prvAddNewTaskToReadyList+0xbc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037da:	4a27      	ldr	r2, [pc, #156]	; (8003878 <prvAddNewTaskToReadyList+0xbc>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <prvAddNewTaskToReadyList+0xb8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d110      	bne.n	800380a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037e8:	f000 fad8 	bl	8003d9c <prvInitialiseTaskLists>
 80037ec:	e00d      	b.n	800380a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <prvAddNewTaskToReadyList+0xc0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <prvAddNewTaskToReadyList+0xbc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d802      	bhi.n	800380a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003804:	4a1c      	ldr	r2, [pc, #112]	; (8003878 <prvAddNewTaskToReadyList+0xbc>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 8003812:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2201      	movs	r2, #1
 800381a:	409a      	lsls	r2, r3
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	4a18      	ldr	r2, [pc, #96]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <prvAddNewTaskToReadyList+0xcc>)
 8003834:	441a      	add	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3304      	adds	r3, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f7ff fdee 	bl	800341e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003842:	f000 fd17 	bl	8004274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <prvAddNewTaskToReadyList+0xc0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00e      	beq.n	800386c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <prvAddNewTaskToReadyList+0xbc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	429a      	cmp	r2, r3
 800385a:	d207      	bcs.n	800386c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 800385e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000448 	.word	0x20000448
 8003878:	20000348 	.word	0x20000348
 800387c:	20000454 	.word	0x20000454
 8003880:	20000464 	.word	0x20000464
 8003884:	20000450 	.word	0x20000450
 8003888:	2000034c 	.word	0x2000034c
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d019      	beq.n	80038d6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <vTaskDelay+0x64>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <vTaskDelay+0x34>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	b672      	cpsid	i
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	b662      	cpsie	i
 80038be:	60bb      	str	r3, [r7, #8]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80038c4:	f000 f888 	bl	80039d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038c8:	2100      	movs	r1, #0
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fb2a 	bl	8003f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038d0:	f000 f890 	bl	80039f4 <xTaskResumeAll>
 80038d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <vTaskDelay+0x68>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000470 	.word	0x20000470
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800390a:	463a      	mov	r2, r7
 800390c:	1d39      	adds	r1, r7, #4
 800390e:	f107 0308 	add.w	r3, r7, #8
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fe48 	bl	80005a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	9202      	str	r2, [sp, #8]
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2300      	movs	r3, #0
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2300      	movs	r3, #0
 8003928:	460a      	mov	r2, r1
 800392a:	4923      	ldr	r1, [pc, #140]	; (80039b8 <vTaskStartScheduler+0xbc>)
 800392c:	4823      	ldr	r0, [pc, #140]	; (80039bc <vTaskStartScheduler+0xc0>)
 800392e:	f7ff fdfd 	bl	800352c <xTaskCreateStatic>
 8003932:	4603      	mov	r3, r0
 8003934:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <vTaskStartScheduler+0xc4>)
 8003936:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003938:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <vTaskStartScheduler+0xc4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003940:	2301      	movs	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e001      	b.n	800394a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d11d      	bne.n	800398c <vTaskStartScheduler+0x90>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	b672      	cpsid	i
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	b662      	cpsie	i
 8003964:	613b      	str	r3, [r7, #16]
}
 8003966:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <vTaskStartScheduler+0xc8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	334c      	adds	r3, #76	; 0x4c
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <vTaskStartScheduler+0xcc>)
 8003970:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <vTaskStartScheduler+0xd0>)
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <vTaskStartScheduler+0xd4>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <vTaskStartScheduler+0xd8>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003986:	f000 fbc3 	bl	8004110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800398a:	e010      	b.n	80039ae <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d10c      	bne.n	80039ae <vTaskStartScheduler+0xb2>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	b672      	cpsid	i
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	b662      	cpsie	i
 80039a8:	60fb      	str	r3, [r7, #12]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <vTaskStartScheduler+0xb0>
}
 80039ae:	bf00      	nop
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	080057e0 	.word	0x080057e0
 80039bc:	08003d6d 	.word	0x08003d6d
 80039c0:	2000046c 	.word	0x2000046c
 80039c4:	20000348 	.word	0x20000348
 80039c8:	20000010 	.word	0x20000010
 80039cc:	20000468 	.word	0x20000468
 80039d0:	20000454 	.word	0x20000454
 80039d4:	2000044c 	.word	0x2000044c

080039d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <vTaskSuspendAll+0x18>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <vTaskSuspendAll+0x18>)
 80039e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	20000470 	.word	0x20000470

080039f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <xTaskResumeAll+0x30>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	b672      	cpsid	i
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	b662      	cpsie	i
 8003a1e:	603b      	str	r3, [r7, #0]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a24:	f000 fbf2 	bl	800420c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a28:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	4a37      	ldr	r2, [pc, #220]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a32:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <xTaskResumeAll+0x118>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d161      	bne.n	8003afe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a3a:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <xTaskResumeAll+0x11c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d05d      	beq.n	8003afe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a42:	e02e      	b.n	8003aa2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a44:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <xTaskResumeAll+0x120>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3318      	adds	r3, #24
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fd41 	bl	80034d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fd3c 	bl	80034d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	2201      	movs	r2, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <xTaskResumeAll+0x124>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <xTaskResumeAll+0x124>)
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <xTaskResumeAll+0x128>)
 8003a80:	441a      	add	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7ff fcc8 	bl	800341e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <xTaskResumeAll+0x12c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <xTaskResumeAll+0x130>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <xTaskResumeAll+0x120>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1cc      	bne.n	8003a44 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ab0:	f000 fa18 	bl	8003ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <xTaskResumeAll+0x134>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ac0:	f000 f836 	bl	8003b30 <xTaskIncrementTick>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <xTaskResumeAll+0x130>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f1      	bne.n	8003ac0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <xTaskResumeAll+0x134>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <xTaskResumeAll+0x130>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003aea:	2301      	movs	r3, #1
 8003aec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <xTaskResumeAll+0x138>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003afe:	f000 fbb9 	bl	8004274 <vPortExitCritical>

	return xAlreadyYielded;
 8003b02:	68bb      	ldr	r3, [r7, #8]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000470 	.word	0x20000470
 8003b10:	20000448 	.word	0x20000448
 8003b14:	20000408 	.word	0x20000408
 8003b18:	20000450 	.word	0x20000450
 8003b1c:	2000034c 	.word	0x2000034c
 8003b20:	20000348 	.word	0x20000348
 8003b24:	2000045c 	.word	0x2000045c
 8003b28:	20000458 	.word	0x20000458
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b3a:	4b4f      	ldr	r3, [pc, #316]	; (8003c78 <xTaskIncrementTick+0x148>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 808a 	bne.w	8003c58 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b44:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <xTaskIncrementTick+0x14c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b4c:	4a4b      	ldr	r2, [pc, #300]	; (8003c7c <xTaskIncrementTick+0x14c>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d122      	bne.n	8003b9e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b58:	4b49      	ldr	r3, [pc, #292]	; (8003c80 <xTaskIncrementTick+0x150>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <xTaskIncrementTick+0x4c>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	b672      	cpsid	i
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	b662      	cpsie	i
 8003b76:	603b      	str	r3, [r7, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <xTaskIncrementTick+0x4a>
 8003b7c:	4b40      	ldr	r3, [pc, #256]	; (8003c80 <xTaskIncrementTick+0x150>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <xTaskIncrementTick+0x154>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <xTaskIncrementTick+0x150>)
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4a3e      	ldr	r2, [pc, #248]	; (8003c84 <xTaskIncrementTick+0x154>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <xTaskIncrementTick+0x158>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <xTaskIncrementTick+0x158>)
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	f000 f9a3 	bl	8003ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <xTaskIncrementTick+0x15c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d348      	bcc.n	8003c3a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <xTaskIncrementTick+0x150>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <xTaskIncrementTick+0x15c>)
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	601a      	str	r2, [r3, #0]
					break;
 8003bba:	e03e      	b.n	8003c3a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bbc:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <xTaskIncrementTick+0x150>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d203      	bcs.n	8003bdc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bd4:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <xTaskIncrementTick+0x15c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bda:	e02e      	b.n	8003c3a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fc79 	bl	80034d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fc70 	bl	80034d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <xTaskIncrementTick+0x160>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	4a22      	ldr	r2, [pc, #136]	; (8003c90 <xTaskIncrementTick+0x160>)
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <xTaskIncrementTick+0x164>)
 8003c18:	441a      	add	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f7ff fbfc 	bl	800341e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <xTaskIncrementTick+0x168>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3b9      	bcc.n	8003ba8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c38:	e7b6      	b.n	8003ba8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c3a:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <xTaskIncrementTick+0x168>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	4914      	ldr	r1, [pc, #80]	; (8003c94 <xTaskIncrementTick+0x164>)
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d907      	bls.n	8003c62 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e004      	b.n	8003c62 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <xTaskIncrementTick+0x16c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <xTaskIncrementTick+0x16c>)
 8003c60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <xTaskIncrementTick+0x170>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c6e:	697b      	ldr	r3, [r7, #20]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000470 	.word	0x20000470
 8003c7c:	2000044c 	.word	0x2000044c
 8003c80:	20000400 	.word	0x20000400
 8003c84:	20000404 	.word	0x20000404
 8003c88:	20000460 	.word	0x20000460
 8003c8c:	20000468 	.word	0x20000468
 8003c90:	20000450 	.word	0x20000450
 8003c94:	2000034c 	.word	0x2000034c
 8003c98:	20000348 	.word	0x20000348
 8003c9c:	20000458 	.word	0x20000458
 8003ca0:	2000045c 	.word	0x2000045c

08003ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <vTaskSwitchContext+0xb0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <vTaskSwitchContext+0xb4>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cb8:	e046      	b.n	8003d48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003cba:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <vTaskSwitchContext+0xb4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <vTaskSwitchContext+0xb8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	f1c3 031f 	rsb	r3, r3, #31
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	4922      	ldr	r1, [pc, #136]	; (8003d60 <vTaskSwitchContext+0xbc>)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <vTaskSwitchContext+0x60>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	b672      	cpsid	i
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	b662      	cpsie	i
 8003cfe:	607b      	str	r3, [r7, #4]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <vTaskSwitchContext+0x5e>
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <vTaskSwitchContext+0xbc>)
 8003d10:	4413      	add	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	3308      	adds	r3, #8
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d104      	bne.n	8003d34 <vTaskSwitchContext+0x90>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <vTaskSwitchContext+0xc0>)
 8003d3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <vTaskSwitchContext+0xc0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	334c      	adds	r3, #76	; 0x4c
 8003d44:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <vTaskSwitchContext+0xc4>)
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	20000470 	.word	0x20000470
 8003d58:	2000045c 	.word	0x2000045c
 8003d5c:	20000450 	.word	0x20000450
 8003d60:	2000034c 	.word	0x2000034c
 8003d64:	20000348 	.word	0x20000348
 8003d68:	20000010 	.word	0x20000010

08003d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d74:	f000 f852 	bl	8003e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <prvIdleTask+0x28>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d9f9      	bls.n	8003d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <prvIdleTask+0x2c>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d90:	e7f0      	b.n	8003d74 <prvIdleTask+0x8>
 8003d92:	bf00      	nop
 8003d94:	2000034c 	.word	0x2000034c
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	e00c      	b.n	8003dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <prvInitialiseTaskLists+0x60>)
 8003db4:	4413      	add	r3, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fb04 	bl	80033c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d9ef      	bls.n	8003da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dc8:	480d      	ldr	r0, [pc, #52]	; (8003e00 <prvInitialiseTaskLists+0x64>)
 8003dca:	f7ff fafb 	bl	80033c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dce:	480d      	ldr	r0, [pc, #52]	; (8003e04 <prvInitialiseTaskLists+0x68>)
 8003dd0:	f7ff faf8 	bl	80033c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd4:	480c      	ldr	r0, [pc, #48]	; (8003e08 <prvInitialiseTaskLists+0x6c>)
 8003dd6:	f7ff faf5 	bl	80033c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <prvInitialiseTaskLists+0x70>)
 8003ddc:	f7ff faf2 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003de0:	480b      	ldr	r0, [pc, #44]	; (8003e10 <prvInitialiseTaskLists+0x74>)
 8003de2:	f7ff faef 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <prvInitialiseTaskLists+0x78>)
 8003de8:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <prvInitialiseTaskLists+0x64>)
 8003dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <prvInitialiseTaskLists+0x7c>)
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <prvInitialiseTaskLists+0x68>)
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	2000034c 	.word	0x2000034c
 8003e00:	200003d8 	.word	0x200003d8
 8003e04:	200003ec 	.word	0x200003ec
 8003e08:	20000408 	.word	0x20000408
 8003e0c:	2000041c 	.word	0x2000041c
 8003e10:	20000434 	.word	0x20000434
 8003e14:	20000400 	.word	0x20000400
 8003e18:	20000404 	.word	0x20000404

08003e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e22:	e019      	b.n	8003e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e24:	f000 f9f2 	bl	800420c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <prvCheckTasksWaitingTermination+0x50>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fb4f 	bl	80034d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <prvCheckTasksWaitingTermination+0x54>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <prvCheckTasksWaitingTermination+0x54>)
 8003e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <prvCheckTasksWaitingTermination+0x58>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <prvCheckTasksWaitingTermination+0x58>)
 8003e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e4e:	f000 fa11 	bl	8004274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f810 	bl	8003e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <prvCheckTasksWaitingTermination+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e1      	bne.n	8003e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000041c 	.word	0x2000041c
 8003e70:	20000448 	.word	0x20000448
 8003e74:	20000430 	.word	0x20000430

08003e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	334c      	adds	r3, #76	; 0x4c
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fe39 	bl	8004afc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fb69 	bl	8004570 <vPortFree>
				vPortFree( pxTCB );
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb66 	bl	8004570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ea4:	e01a      	b.n	8003edc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d103      	bne.n	8003eb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fb5d 	bl	8004570 <vPortFree>
	}
 8003eb6:	e011      	b.n	8003edc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d00c      	beq.n	8003edc <prvDeleteTCB+0x64>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	b672      	cpsid	i
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	b662      	cpsie	i
 8003ed6:	60fb      	str	r3, [r7, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <prvDeleteTCB+0x62>
	}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <prvResetNextTaskUnblockTime+0x38>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <prvResetNextTaskUnblockTime+0x3c>)
 8003ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8003efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003efc:	e008      	b.n	8003f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <prvResetNextTaskUnblockTime+0x38>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <prvResetNextTaskUnblockTime+0x3c>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	20000400 	.word	0x20000400
 8003f20:	20000468 	.word	0x20000468

08003f24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f2e:	4b29      	ldr	r3, [pc, #164]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f34:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff facc 	bl	80034d8 <uxListRemove>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d10a      	bne.n	8003f7c <prvAddCurrentTaskToDelayedList+0x58>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	481a      	ldr	r0, [pc, #104]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f76:	f7ff fa52 	bl	800341e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f7a:	e026      	b.n	8003fca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d209      	bcs.n	8003fa8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7ff fa60 	bl	8003466 <vListInsert>
}
 8003fa6:	e010      	b.n	8003fca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7ff fa56 	bl	8003466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d202      	bcs.n	8003fca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fc4:	4a09      	ldr	r2, [pc, #36]	; (8003fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6013      	str	r3, [r2, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000044c 	.word	0x2000044c
 8003fd8:	20000348 	.word	0x20000348
 8003fdc:	20000450 	.word	0x20000450
 8003fe0:	20000434 	.word	0x20000434
 8003fe4:	20000404 	.word	0x20000404
 8003fe8:	20000400 	.word	0x20000400
 8003fec:	20000468 	.word	0x20000468

08003ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b04      	subs	r3, #4
 8004000:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b04      	subs	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b04      	subs	r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004020:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <pxPortInitialiseStack+0x64>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b14      	subs	r3, #20
 800402a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b04      	subs	r3, #4
 8004036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f06f 0202 	mvn.w	r2, #2
 800403e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b20      	subs	r3, #32
 8004044:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	08004059 	.word	0x08004059

08004058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <prvTaskExitError+0x5c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d00c      	beq.n	8004086 <prvTaskExitError+0x2e>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	b672      	cpsid	i
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	b662      	cpsie	i
 8004080:	60fb      	str	r3, [r7, #12]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <prvTaskExitError+0x2c>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	b672      	cpsid	i
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	b662      	cpsie	i
 800409a:	60bb      	str	r3, [r7, #8]
}
 800409c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800409e:	bf00      	nop
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0fc      	beq.n	80040a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	2000000c 	.word	0x2000000c
	...

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800410a:	bf00      	nop
 800410c:	e000ed08 	.word	0xe000ed08

08004110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004116:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <xPortStartScheduler+0xe4>)
 8004118:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	22ff      	movs	r2, #255	; 0xff
 8004126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <xPortStartScheduler+0xe8>)
 800413c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <xPortStartScheduler+0xec>)
 8004140:	2207      	movs	r2, #7
 8004142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004144:	e009      	b.n	800415a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004146:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <xPortStartScheduler+0xec>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3b01      	subs	r3, #1
 800414c:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <xPortStartScheduler+0xec>)
 800414e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d0ef      	beq.n	8004146 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004166:	4b25      	ldr	r3, [pc, #148]	; (80041fc <xPortStartScheduler+0xec>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1c3 0307 	rsb	r3, r3, #7
 800416e:	2b04      	cmp	r3, #4
 8004170:	d00c      	beq.n	800418c <xPortStartScheduler+0x7c>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	b672      	cpsid	i
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	b662      	cpsie	i
 8004186:	60bb      	str	r3, [r7, #8]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <xPortStartScheduler+0xec>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <xPortStartScheduler+0xec>)
 8004194:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <xPortStartScheduler+0xec>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <xPortStartScheduler+0xec>)
 80041a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <xPortStartScheduler+0xf0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a14      	ldr	r2, [pc, #80]	; (8004200 <xPortStartScheduler+0xf0>)
 80041b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <xPortStartScheduler+0xf0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a11      	ldr	r2, [pc, #68]	; (8004200 <xPortStartScheduler+0xf0>)
 80041bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041c2:	f000 f8dd 	bl	8004380 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <xPortStartScheduler+0xf4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041cc:	f000 f8fc 	bl	80043c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <xPortStartScheduler+0xf8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <xPortStartScheduler+0xf8>)
 80041d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041dc:	f7ff ff84 	bl	80040e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041e0:	f7ff fd60 	bl	8003ca4 <vTaskSwitchContext>
	prvTaskExitError();
 80041e4:	f7ff ff38 	bl	8004058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	e000e400 	.word	0xe000e400
 80041f8:	20000474 	.word	0x20000474
 80041fc:	20000478 	.word	0x20000478
 8004200:	e000ed20 	.word	0xe000ed20
 8004204:	2000000c 	.word	0x2000000c
 8004208:	e000ef34 	.word	0xe000ef34

0800420c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	b672      	cpsid	i
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	b662      	cpsie	i
 8004226:	607b      	str	r3, [r7, #4]
}
 8004228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <vPortEnterCritical+0x60>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	4a0e      	ldr	r2, [pc, #56]	; (800426c <vPortEnterCritical+0x60>)
 8004232:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <vPortEnterCritical+0x60>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d111      	bne.n	8004260 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <vPortEnterCritical+0x64>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <vPortEnterCritical+0x54>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	b672      	cpsid	i
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	b662      	cpsie	i
 800425a:	603b      	str	r3, [r7, #0]
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <vPortEnterCritical+0x52>
	}
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	2000000c 	.word	0x2000000c
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <vPortExitCritical+0x54>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <vPortExitCritical+0x28>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	b672      	cpsid	i
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	b662      	cpsie	i
 8004296:	607b      	str	r3, [r7, #4]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <vPortExitCritical+0x54>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <vPortExitCritical+0x54>)
 80042a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <vPortExitCritical+0x54>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d105      	bne.n	80042ba <vPortExitCritical+0x46>
 80042ae:	2300      	movs	r3, #0
 80042b0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000000c 	.word	0x2000000c
 80042cc:	00000000 	.word	0x00000000

080042d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042d0:	f3ef 8009 	mrs	r0, PSP
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <pxCurrentTCBConst>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f01e 0f10 	tst.w	lr, #16
 80042e0:	bf08      	it	eq
 80042e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ea:	6010      	str	r0, [r2, #0]
 80042ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042f4:	b672      	cpsid	i
 80042f6:	f380 8811 	msr	BASEPRI, r0
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	b662      	cpsie	i
 8004304:	f7ff fcce 	bl	8003ca4 <vTaskSwitchContext>
 8004308:	f04f 0000 	mov.w	r0, #0
 800430c:	f380 8811 	msr	BASEPRI, r0
 8004310:	bc09      	pop	{r0, r3}
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	6808      	ldr	r0, [r1, #0]
 8004316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	f01e 0f10 	tst.w	lr, #16
 800431e:	bf08      	it	eq
 8004320:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004324:	f380 8809 	msr	PSP, r0
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop

08004330 <pxCurrentTCBConst>:
 8004330:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop

08004338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	b672      	cpsid	i
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	b662      	cpsie	i
 8004352:	607b      	str	r3, [r7, #4]
}
 8004354:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004356:	f7ff fbeb 	bl	8003b30 <xTaskIncrementTick>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <SysTick_Handler+0x44>)
 8004362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f383 8811 	msr	BASEPRI, r3
}
 8004372:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <vPortSetupTimerInterrupt+0x34>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <vPortSetupTimerInterrupt+0x38>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <vPortSetupTimerInterrupt+0x3c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <vPortSetupTimerInterrupt+0x40>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <vPortSetupTimerInterrupt+0x44>)
 800439e:	3b01      	subs	r3, #1
 80043a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043a2:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <vPortSetupTimerInterrupt+0x34>)
 80043a4:	2207      	movs	r2, #7
 80043a6:	601a      	str	r2, [r3, #0]
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	e000e010 	.word	0xe000e010
 80043b8:	e000e018 	.word	0xe000e018
 80043bc:	20000000 	.word	0x20000000
 80043c0:	10624dd3 	.word	0x10624dd3
 80043c4:	e000e014 	.word	0xe000e014

080043c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043d8 <vPortEnableVFP+0x10>
 80043cc:	6801      	ldr	r1, [r0, #0]
 80043ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043d2:	6001      	str	r1, [r0, #0]
 80043d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043d6:	bf00      	nop
 80043d8:	e000ed88 	.word	0xe000ed88

080043dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043e8:	f7ff faf6 	bl	80039d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043ec:	4b5b      	ldr	r3, [pc, #364]	; (800455c <pvPortMalloc+0x180>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043f4:	f000 f91a 	bl	800462c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043f8:	4b59      	ldr	r3, [pc, #356]	; (8004560 <pvPortMalloc+0x184>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	f040 8092 	bne.w	800452a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01f      	beq.n	800444c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800440c:	2208      	movs	r2, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f023 0307 	bic.w	r3, r3, #7
 8004424:	3308      	adds	r3, #8
 8004426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <pvPortMalloc+0x70>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	b672      	cpsid	i
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	b662      	cpsie	i
 8004446:	617b      	str	r3, [r7, #20]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d06b      	beq.n	800452a <pvPortMalloc+0x14e>
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <pvPortMalloc+0x188>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d866      	bhi.n	800452a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800445c:	4b42      	ldr	r3, [pc, #264]	; (8004568 <pvPortMalloc+0x18c>)
 800445e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004460:	4b41      	ldr	r3, [pc, #260]	; (8004568 <pvPortMalloc+0x18c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004466:	e004      	b.n	8004472 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d903      	bls.n	8004484 <pvPortMalloc+0xa8>
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f1      	bne.n	8004468 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004484:	4b35      	ldr	r3, [pc, #212]	; (800455c <pvPortMalloc+0x180>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448a:	429a      	cmp	r2, r3
 800448c:	d04d      	beq.n	800452a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2208      	movs	r2, #8
 8004494:	4413      	add	r3, r2
 8004496:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	1ad2      	subs	r2, r2, r3
 80044a8:	2308      	movs	r3, #8
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d921      	bls.n	80044f4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <pvPortMalloc+0x100>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	b672      	cpsid	i
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	b662      	cpsie	i
 80044d6:	613b      	str	r3, [r7, #16]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044ee:	69b8      	ldr	r0, [r7, #24]
 80044f0:	f000 f8fe 	bl	80046f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <pvPortMalloc+0x188>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <pvPortMalloc+0x188>)
 8004500:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <pvPortMalloc+0x188>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b19      	ldr	r3, [pc, #100]	; (800456c <pvPortMalloc+0x190>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d203      	bcs.n	8004516 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <pvPortMalloc+0x188>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a16      	ldr	r2, [pc, #88]	; (800456c <pvPortMalloc+0x190>)
 8004514:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <pvPortMalloc+0x184>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	431a      	orrs	r2, r3
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800452a:	f7ff fa63 	bl	80039f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00c      	beq.n	8004552 <pvPortMalloc+0x176>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	b672      	cpsid	i
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	b662      	cpsie	i
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <pvPortMalloc+0x174>
	return pvReturn;
 8004552:	69fb      	ldr	r3, [r7, #28]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20004084 	.word	0x20004084
 8004560:	20004090 	.word	0x20004090
 8004564:	20004088 	.word	0x20004088
 8004568:	2000407c 	.word	0x2000407c
 800456c:	2000408c 	.word	0x2000408c

08004570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d04c      	beq.n	800461c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004582:	2308      	movs	r3, #8
 8004584:	425b      	negs	r3, r3
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b23      	ldr	r3, [pc, #140]	; (8004624 <vPortFree+0xb4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <vPortFree+0x48>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	b672      	cpsid	i
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	b662      	cpsie	i
 80045b2:	60fb      	str	r3, [r7, #12]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <vPortFree+0x6a>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	b672      	cpsid	i
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	b662      	cpsie	i
 80045d4:	60bb      	str	r3, [r7, #8]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <vPortFree+0xb4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d019      	beq.n	800461c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d115      	bne.n	800461c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <vPortFree+0xb4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004600:	f7ff f9ea 	bl	80039d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	4b07      	ldr	r3, [pc, #28]	; (8004628 <vPortFree+0xb8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4413      	add	r3, r2
 800460e:	4a06      	ldr	r2, [pc, #24]	; (8004628 <vPortFree+0xb8>)
 8004610:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004612:	6938      	ldr	r0, [r7, #16]
 8004614:	f000 f86c 	bl	80046f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004618:	f7ff f9ec 	bl	80039f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800461c:	bf00      	nop
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20004090 	.word	0x20004090
 8004628:	20004088 	.word	0x20004088

0800462c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004632:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004636:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <prvHeapInit+0xac>)
 800463a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3307      	adds	r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <prvHeapInit+0xac>)
 800465c:	4413      	add	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004664:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <prvHeapInit+0xb0>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <prvHeapInit+0xb0>)
 800466c:	2200      	movs	r2, #0
 800466e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4413      	add	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004678:	2208      	movs	r2, #8
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <prvHeapInit+0xb4>)
 800468c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <prvHeapInit+0xb4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <prvHeapInit+0xb4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <prvHeapInit+0xb4>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <prvHeapInit+0xb8>)
 80046ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <prvHeapInit+0xbc>)
 80046c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <prvHeapInit+0xc0>)
 80046c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046ca:	601a      	str	r2, [r3, #0]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	2000047c 	.word	0x2000047c
 80046dc:	2000407c 	.word	0x2000407c
 80046e0:	20004084 	.word	0x20004084
 80046e4:	2000408c 	.word	0x2000408c
 80046e8:	20004088 	.word	0x20004088
 80046ec:	20004090 	.word	0x20004090

080046f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046f8:	4b28      	ldr	r3, [pc, #160]	; (800479c <prvInsertBlockIntoFreeList+0xac>)
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e002      	b.n	8004704 <prvInsertBlockIntoFreeList+0x14>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d8f7      	bhi.n	80046fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	4413      	add	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d108      	bne.n	8004732 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	441a      	add	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d118      	bne.n	8004778 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <prvInsertBlockIntoFreeList+0xb0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d00d      	beq.n	800476e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e008      	b.n	8004780 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <prvInsertBlockIntoFreeList+0xb0>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e003      	b.n	8004780 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d002      	beq.n	800478e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	2000407c 	.word	0x2000407c
 80047a0:	20004084 	.word	0x20004084

080047a4 <__errno>:
 80047a4:	4b01      	ldr	r3, [pc, #4]	; (80047ac <__errno+0x8>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000010 	.word	0x20000010

080047b0 <std>:
 80047b0:	2300      	movs	r3, #0
 80047b2:	b510      	push	{r4, lr}
 80047b4:	4604      	mov	r4, r0
 80047b6:	e9c0 3300 	strd	r3, r3, [r0]
 80047ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047be:	6083      	str	r3, [r0, #8]
 80047c0:	8181      	strh	r1, [r0, #12]
 80047c2:	6643      	str	r3, [r0, #100]	; 0x64
 80047c4:	81c2      	strh	r2, [r0, #14]
 80047c6:	6183      	str	r3, [r0, #24]
 80047c8:	4619      	mov	r1, r3
 80047ca:	2208      	movs	r2, #8
 80047cc:	305c      	adds	r0, #92	; 0x5c
 80047ce:	f000 f90c 	bl	80049ea <memset>
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <std+0x38>)
 80047d4:	6263      	str	r3, [r4, #36]	; 0x24
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <std+0x3c>)
 80047d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <std+0x40>)
 80047dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <std+0x44>)
 80047e0:	6224      	str	r4, [r4, #32]
 80047e2:	6323      	str	r3, [r4, #48]	; 0x30
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	bf00      	nop
 80047e8:	08004bd5 	.word	0x08004bd5
 80047ec:	08004bf7 	.word	0x08004bf7
 80047f0:	08004c2f 	.word	0x08004c2f
 80047f4:	08004c53 	.word	0x08004c53

080047f8 <_cleanup_r>:
 80047f8:	4901      	ldr	r1, [pc, #4]	; (8004800 <_cleanup_r+0x8>)
 80047fa:	f000 b8af 	b.w	800495c <_fwalk_reent>
 80047fe:	bf00      	nop
 8004800:	08004dad 	.word	0x08004dad

08004804 <__sfmoreglue>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	1e4a      	subs	r2, r1, #1
 8004808:	2568      	movs	r5, #104	; 0x68
 800480a:	4355      	muls	r5, r2
 800480c:	460e      	mov	r6, r1
 800480e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004812:	f000 f8f3 	bl	80049fc <_malloc_r>
 8004816:	4604      	mov	r4, r0
 8004818:	b140      	cbz	r0, 800482c <__sfmoreglue+0x28>
 800481a:	2100      	movs	r1, #0
 800481c:	e9c0 1600 	strd	r1, r6, [r0]
 8004820:	300c      	adds	r0, #12
 8004822:	60a0      	str	r0, [r4, #8]
 8004824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004828:	f000 f8df 	bl	80049ea <memset>
 800482c:	4620      	mov	r0, r4
 800482e:	bd70      	pop	{r4, r5, r6, pc}

08004830 <__sfp_lock_acquire>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__sfp_lock_acquire+0x8>)
 8004832:	f000 b8d8 	b.w	80049e6 <__retarget_lock_acquire_recursive>
 8004836:	bf00      	nop
 8004838:	2000417c 	.word	0x2000417c

0800483c <__sfp_lock_release>:
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <__sfp_lock_release+0x8>)
 800483e:	f000 b8d3 	b.w	80049e8 <__retarget_lock_release_recursive>
 8004842:	bf00      	nop
 8004844:	2000417c 	.word	0x2000417c

08004848 <__sinit_lock_acquire>:
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <__sinit_lock_acquire+0x8>)
 800484a:	f000 b8cc 	b.w	80049e6 <__retarget_lock_acquire_recursive>
 800484e:	bf00      	nop
 8004850:	20004177 	.word	0x20004177

08004854 <__sinit_lock_release>:
 8004854:	4801      	ldr	r0, [pc, #4]	; (800485c <__sinit_lock_release+0x8>)
 8004856:	f000 b8c7 	b.w	80049e8 <__retarget_lock_release_recursive>
 800485a:	bf00      	nop
 800485c:	20004177 	.word	0x20004177

08004860 <__sinit>:
 8004860:	b510      	push	{r4, lr}
 8004862:	4604      	mov	r4, r0
 8004864:	f7ff fff0 	bl	8004848 <__sinit_lock_acquire>
 8004868:	69a3      	ldr	r3, [r4, #24]
 800486a:	b11b      	cbz	r3, 8004874 <__sinit+0x14>
 800486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004870:	f7ff bff0 	b.w	8004854 <__sinit_lock_release>
 8004874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004878:	6523      	str	r3, [r4, #80]	; 0x50
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <__sinit+0x68>)
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <__sinit+0x6c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	62a2      	str	r2, [r4, #40]	; 0x28
 8004882:	42a3      	cmp	r3, r4
 8004884:	bf04      	itt	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	61a3      	streq	r3, [r4, #24]
 800488a:	4620      	mov	r0, r4
 800488c:	f000 f820 	bl	80048d0 <__sfp>
 8004890:	6060      	str	r0, [r4, #4]
 8004892:	4620      	mov	r0, r4
 8004894:	f000 f81c 	bl	80048d0 <__sfp>
 8004898:	60a0      	str	r0, [r4, #8]
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f818 	bl	80048d0 <__sfp>
 80048a0:	2200      	movs	r2, #0
 80048a2:	60e0      	str	r0, [r4, #12]
 80048a4:	2104      	movs	r1, #4
 80048a6:	6860      	ldr	r0, [r4, #4]
 80048a8:	f7ff ff82 	bl	80047b0 <std>
 80048ac:	68a0      	ldr	r0, [r4, #8]
 80048ae:	2201      	movs	r2, #1
 80048b0:	2109      	movs	r1, #9
 80048b2:	f7ff ff7d 	bl	80047b0 <std>
 80048b6:	68e0      	ldr	r0, [r4, #12]
 80048b8:	2202      	movs	r2, #2
 80048ba:	2112      	movs	r1, #18
 80048bc:	f7ff ff78 	bl	80047b0 <std>
 80048c0:	2301      	movs	r3, #1
 80048c2:	61a3      	str	r3, [r4, #24]
 80048c4:	e7d2      	b.n	800486c <__sinit+0xc>
 80048c6:	bf00      	nop
 80048c8:	08005860 	.word	0x08005860
 80048cc:	080047f9 	.word	0x080047f9

080048d0 <__sfp>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	4607      	mov	r7, r0
 80048d4:	f7ff ffac 	bl	8004830 <__sfp_lock_acquire>
 80048d8:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <__sfp+0x84>)
 80048da:	681e      	ldr	r6, [r3, #0]
 80048dc:	69b3      	ldr	r3, [r6, #24]
 80048de:	b913      	cbnz	r3, 80048e6 <__sfp+0x16>
 80048e0:	4630      	mov	r0, r6
 80048e2:	f7ff ffbd 	bl	8004860 <__sinit>
 80048e6:	3648      	adds	r6, #72	; 0x48
 80048e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	d503      	bpl.n	80048f8 <__sfp+0x28>
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	b30b      	cbz	r3, 8004938 <__sfp+0x68>
 80048f4:	6836      	ldr	r6, [r6, #0]
 80048f6:	e7f7      	b.n	80048e8 <__sfp+0x18>
 80048f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048fc:	b9d5      	cbnz	r5, 8004934 <__sfp+0x64>
 80048fe:	4b16      	ldr	r3, [pc, #88]	; (8004958 <__sfp+0x88>)
 8004900:	60e3      	str	r3, [r4, #12]
 8004902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004906:	6665      	str	r5, [r4, #100]	; 0x64
 8004908:	f000 f86c 	bl	80049e4 <__retarget_lock_init_recursive>
 800490c:	f7ff ff96 	bl	800483c <__sfp_lock_release>
 8004910:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004914:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004918:	6025      	str	r5, [r4, #0]
 800491a:	61a5      	str	r5, [r4, #24]
 800491c:	2208      	movs	r2, #8
 800491e:	4629      	mov	r1, r5
 8004920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004924:	f000 f861 	bl	80049ea <memset>
 8004928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800492c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004930:	4620      	mov	r0, r4
 8004932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004934:	3468      	adds	r4, #104	; 0x68
 8004936:	e7d9      	b.n	80048ec <__sfp+0x1c>
 8004938:	2104      	movs	r1, #4
 800493a:	4638      	mov	r0, r7
 800493c:	f7ff ff62 	bl	8004804 <__sfmoreglue>
 8004940:	4604      	mov	r4, r0
 8004942:	6030      	str	r0, [r6, #0]
 8004944:	2800      	cmp	r0, #0
 8004946:	d1d5      	bne.n	80048f4 <__sfp+0x24>
 8004948:	f7ff ff78 	bl	800483c <__sfp_lock_release>
 800494c:	230c      	movs	r3, #12
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	e7ee      	b.n	8004930 <__sfp+0x60>
 8004952:	bf00      	nop
 8004954:	08005860 	.word	0x08005860
 8004958:	ffff0001 	.word	0xffff0001

0800495c <_fwalk_reent>:
 800495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004960:	4606      	mov	r6, r0
 8004962:	4688      	mov	r8, r1
 8004964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004968:	2700      	movs	r7, #0
 800496a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800496e:	f1b9 0901 	subs.w	r9, r9, #1
 8004972:	d505      	bpl.n	8004980 <_fwalk_reent+0x24>
 8004974:	6824      	ldr	r4, [r4, #0]
 8004976:	2c00      	cmp	r4, #0
 8004978:	d1f7      	bne.n	800496a <_fwalk_reent+0xe>
 800497a:	4638      	mov	r0, r7
 800497c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004980:	89ab      	ldrh	r3, [r5, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d907      	bls.n	8004996 <_fwalk_reent+0x3a>
 8004986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800498a:	3301      	adds	r3, #1
 800498c:	d003      	beq.n	8004996 <_fwalk_reent+0x3a>
 800498e:	4629      	mov	r1, r5
 8004990:	4630      	mov	r0, r6
 8004992:	47c0      	blx	r8
 8004994:	4307      	orrs	r7, r0
 8004996:	3568      	adds	r5, #104	; 0x68
 8004998:	e7e9      	b.n	800496e <_fwalk_reent+0x12>
	...

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4d0d      	ldr	r5, [pc, #52]	; (80049d4 <__libc_init_array+0x38>)
 80049a0:	4c0d      	ldr	r4, [pc, #52]	; (80049d8 <__libc_init_array+0x3c>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	2600      	movs	r6, #0
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	4d0b      	ldr	r5, [pc, #44]	; (80049dc <__libc_init_array+0x40>)
 80049ae:	4c0c      	ldr	r4, [pc, #48]	; (80049e0 <__libc_init_array+0x44>)
 80049b0:	f000 feec 	bl	800578c <_init>
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	2600      	movs	r6, #0
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	080058a0 	.word	0x080058a0
 80049d8:	080058a0 	.word	0x080058a0
 80049dc:	080058a0 	.word	0x080058a0
 80049e0:	080058a4 	.word	0x080058a4

080049e4 <__retarget_lock_init_recursive>:
 80049e4:	4770      	bx	lr

080049e6 <__retarget_lock_acquire_recursive>:
 80049e6:	4770      	bx	lr

080049e8 <__retarget_lock_release_recursive>:
 80049e8:	4770      	bx	lr

080049ea <memset>:
 80049ea:	4402      	add	r2, r0
 80049ec:	4603      	mov	r3, r0
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d100      	bne.n	80049f4 <memset+0xa>
 80049f2:	4770      	bx	lr
 80049f4:	f803 1b01 	strb.w	r1, [r3], #1
 80049f8:	e7f9      	b.n	80049ee <memset+0x4>
	...

080049fc <_malloc_r>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	1ccd      	adds	r5, r1, #3
 8004a00:	f025 0503 	bic.w	r5, r5, #3
 8004a04:	3508      	adds	r5, #8
 8004a06:	2d0c      	cmp	r5, #12
 8004a08:	bf38      	it	cc
 8004a0a:	250c      	movcc	r5, #12
 8004a0c:	2d00      	cmp	r5, #0
 8004a0e:	4606      	mov	r6, r0
 8004a10:	db01      	blt.n	8004a16 <_malloc_r+0x1a>
 8004a12:	42a9      	cmp	r1, r5
 8004a14:	d903      	bls.n	8004a1e <_malloc_r+0x22>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6033      	str	r3, [r6, #0]
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1e:	f000 fa13 	bl	8004e48 <__malloc_lock>
 8004a22:	4921      	ldr	r1, [pc, #132]	; (8004aa8 <_malloc_r+0xac>)
 8004a24:	680a      	ldr	r2, [r1, #0]
 8004a26:	4614      	mov	r4, r2
 8004a28:	b99c      	cbnz	r4, 8004a52 <_malloc_r+0x56>
 8004a2a:	4f20      	ldr	r7, [pc, #128]	; (8004aac <_malloc_r+0xb0>)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	b923      	cbnz	r3, 8004a3a <_malloc_r+0x3e>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4630      	mov	r0, r6
 8004a34:	f000 f8be 	bl	8004bb4 <_sbrk_r>
 8004a38:	6038      	str	r0, [r7, #0]
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f000 f8b9 	bl	8004bb4 <_sbrk_r>
 8004a42:	1c43      	adds	r3, r0, #1
 8004a44:	d123      	bne.n	8004a8e <_malloc_r+0x92>
 8004a46:	230c      	movs	r3, #12
 8004a48:	6033      	str	r3, [r6, #0]
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f000 fa02 	bl	8004e54 <__malloc_unlock>
 8004a50:	e7e3      	b.n	8004a1a <_malloc_r+0x1e>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	1b5b      	subs	r3, r3, r5
 8004a56:	d417      	bmi.n	8004a88 <_malloc_r+0x8c>
 8004a58:	2b0b      	cmp	r3, #11
 8004a5a:	d903      	bls.n	8004a64 <_malloc_r+0x68>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	441c      	add	r4, r3
 8004a60:	6025      	str	r5, [r4, #0]
 8004a62:	e004      	b.n	8004a6e <_malloc_r+0x72>
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	42a2      	cmp	r2, r4
 8004a68:	bf0c      	ite	eq
 8004a6a:	600b      	streq	r3, [r1, #0]
 8004a6c:	6053      	strne	r3, [r2, #4]
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f000 f9f0 	bl	8004e54 <__malloc_unlock>
 8004a74:	f104 000b 	add.w	r0, r4, #11
 8004a78:	1d23      	adds	r3, r4, #4
 8004a7a:	f020 0007 	bic.w	r0, r0, #7
 8004a7e:	1ac2      	subs	r2, r0, r3
 8004a80:	d0cc      	beq.n	8004a1c <_malloc_r+0x20>
 8004a82:	1a1b      	subs	r3, r3, r0
 8004a84:	50a3      	str	r3, [r4, r2]
 8004a86:	e7c9      	b.n	8004a1c <_malloc_r+0x20>
 8004a88:	4622      	mov	r2, r4
 8004a8a:	6864      	ldr	r4, [r4, #4]
 8004a8c:	e7cc      	b.n	8004a28 <_malloc_r+0x2c>
 8004a8e:	1cc4      	adds	r4, r0, #3
 8004a90:	f024 0403 	bic.w	r4, r4, #3
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d0e3      	beq.n	8004a60 <_malloc_r+0x64>
 8004a98:	1a21      	subs	r1, r4, r0
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f000 f88a 	bl	8004bb4 <_sbrk_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d1dd      	bne.n	8004a60 <_malloc_r+0x64>
 8004aa4:	e7cf      	b.n	8004a46 <_malloc_r+0x4a>
 8004aa6:	bf00      	nop
 8004aa8:	20004094 	.word	0x20004094
 8004aac:	20004098 	.word	0x20004098

08004ab0 <iprintf>:
 8004ab0:	b40f      	push	{r0, r1, r2, r3}
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <iprintf+0x2c>)
 8004ab4:	b513      	push	{r0, r1, r4, lr}
 8004ab6:	681c      	ldr	r4, [r3, #0]
 8004ab8:	b124      	cbz	r4, 8004ac4 <iprintf+0x14>
 8004aba:	69a3      	ldr	r3, [r4, #24]
 8004abc:	b913      	cbnz	r3, 8004ac4 <iprintf+0x14>
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7ff fece 	bl	8004860 <__sinit>
 8004ac4:	ab05      	add	r3, sp, #20
 8004ac6:	9a04      	ldr	r2, [sp, #16]
 8004ac8:	68a1      	ldr	r1, [r4, #8]
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 fa41 	bl	8004f54 <_vfiprintf_r>
 8004ad2:	b002      	add	sp, #8
 8004ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad8:	b004      	add	sp, #16
 8004ada:	4770      	bx	lr
 8004adc:	20000010 	.word	0x20000010

08004ae0 <cleanup_glue>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	6809      	ldr	r1, [r1, #0]
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	b109      	cbz	r1, 8004aee <cleanup_glue+0xe>
 8004aea:	f7ff fff9 	bl	8004ae0 <cleanup_glue>
 8004aee:	4621      	mov	r1, r4
 8004af0:	4628      	mov	r0, r5
 8004af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004af6:	f000 b9b3 	b.w	8004e60 <_free_r>
	...

08004afc <_reclaim_reent>:
 8004afc:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <_reclaim_reent+0xb4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4283      	cmp	r3, r0
 8004b02:	b570      	push	{r4, r5, r6, lr}
 8004b04:	4604      	mov	r4, r0
 8004b06:	d051      	beq.n	8004bac <_reclaim_reent+0xb0>
 8004b08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b0a:	b143      	cbz	r3, 8004b1e <_reclaim_reent+0x22>
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d14a      	bne.n	8004ba8 <_reclaim_reent+0xac>
 8004b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	b111      	cbz	r1, 8004b1e <_reclaim_reent+0x22>
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 f9a1 	bl	8004e60 <_free_r>
 8004b1e:	6961      	ldr	r1, [r4, #20]
 8004b20:	b111      	cbz	r1, 8004b28 <_reclaim_reent+0x2c>
 8004b22:	4620      	mov	r0, r4
 8004b24:	f000 f99c 	bl	8004e60 <_free_r>
 8004b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b2a:	b111      	cbz	r1, 8004b32 <_reclaim_reent+0x36>
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 f997 	bl	8004e60 <_free_r>
 8004b32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b34:	b111      	cbz	r1, 8004b3c <_reclaim_reent+0x40>
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 f992 	bl	8004e60 <_free_r>
 8004b3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b3e:	b111      	cbz	r1, 8004b46 <_reclaim_reent+0x4a>
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 f98d 	bl	8004e60 <_free_r>
 8004b46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b48:	b111      	cbz	r1, 8004b50 <_reclaim_reent+0x54>
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f000 f988 	bl	8004e60 <_free_r>
 8004b50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b52:	b111      	cbz	r1, 8004b5a <_reclaim_reent+0x5e>
 8004b54:	4620      	mov	r0, r4
 8004b56:	f000 f983 	bl	8004e60 <_free_r>
 8004b5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004b5c:	b111      	cbz	r1, 8004b64 <_reclaim_reent+0x68>
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 f97e 	bl	8004e60 <_free_r>
 8004b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b66:	b111      	cbz	r1, 8004b6e <_reclaim_reent+0x72>
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 f979 	bl	8004e60 <_free_r>
 8004b6e:	69a3      	ldr	r3, [r4, #24]
 8004b70:	b1e3      	cbz	r3, 8004bac <_reclaim_reent+0xb0>
 8004b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b74:	4620      	mov	r0, r4
 8004b76:	4798      	blx	r3
 8004b78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004b7a:	b1b9      	cbz	r1, 8004bac <_reclaim_reent+0xb0>
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b82:	f7ff bfad 	b.w	8004ae0 <cleanup_glue>
 8004b86:	5949      	ldr	r1, [r1, r5]
 8004b88:	b941      	cbnz	r1, 8004b9c <_reclaim_reent+0xa0>
 8004b8a:	3504      	adds	r5, #4
 8004b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b8e:	2d80      	cmp	r5, #128	; 0x80
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	d1f8      	bne.n	8004b86 <_reclaim_reent+0x8a>
 8004b94:	4620      	mov	r0, r4
 8004b96:	f000 f963 	bl	8004e60 <_free_r>
 8004b9a:	e7ba      	b.n	8004b12 <_reclaim_reent+0x16>
 8004b9c:	680e      	ldr	r6, [r1, #0]
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 f95e 	bl	8004e60 <_free_r>
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	e7ef      	b.n	8004b88 <_reclaim_reent+0x8c>
 8004ba8:	2500      	movs	r5, #0
 8004baa:	e7ef      	b.n	8004b8c <_reclaim_reent+0x90>
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000010 	.word	0x20000010

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	; (8004bd0 <_sbrk_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fb ff62 	bl	8000a88 <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20004180 	.word	0x20004180

08004bd4 <__sread>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	f000 fc7e 	bl	80054dc <_read_r>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	bfab      	itete	ge
 8004be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004be6:	89a3      	ldrhlt	r3, [r4, #12]
 8004be8:	181b      	addge	r3, r3, r0
 8004bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bee:	bfac      	ite	ge
 8004bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bf2:	81a3      	strhlt	r3, [r4, #12]
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <__swrite>:
 8004bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	898b      	ldrh	r3, [r1, #12]
 8004bfe:	05db      	lsls	r3, r3, #23
 8004c00:	4605      	mov	r5, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	4616      	mov	r6, r2
 8004c06:	d505      	bpl.n	8004c14 <__swrite+0x1e>
 8004c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f000 f908 	bl	8004e24 <_lseek_r>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	4632      	mov	r2, r6
 8004c22:	463b      	mov	r3, r7
 8004c24:	4628      	mov	r0, r5
 8004c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2a:	f000 b817 	b.w	8004c5c <_write_r>

08004c2e <__sseek>:
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	460c      	mov	r4, r1
 8004c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c36:	f000 f8f5 	bl	8004e24 <_lseek_r>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	bf15      	itete	ne
 8004c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c4a:	81a3      	strheq	r3, [r4, #12]
 8004c4c:	bf18      	it	ne
 8004c4e:	81a3      	strhne	r3, [r4, #12]
 8004c50:	bd10      	pop	{r4, pc}

08004c52 <__sclose>:
 8004c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c56:	f000 b813 	b.w	8004c80 <_close_r>
	...

08004c5c <_write_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4d07      	ldr	r5, [pc, #28]	; (8004c7c <_write_r+0x20>)
 8004c60:	4604      	mov	r4, r0
 8004c62:	4608      	mov	r0, r1
 8004c64:	4611      	mov	r1, r2
 8004c66:	2200      	movs	r2, #0
 8004c68:	602a      	str	r2, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fb febb 	bl	80009e6 <_write>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_write_r+0x1e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_write_r+0x1e>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20004180 	.word	0x20004180

08004c80 <_close_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	4d06      	ldr	r5, [pc, #24]	; (8004c9c <_close_r+0x1c>)
 8004c84:	2300      	movs	r3, #0
 8004c86:	4604      	mov	r4, r0
 8004c88:	4608      	mov	r0, r1
 8004c8a:	602b      	str	r3, [r5, #0]
 8004c8c:	f7fb fec7 	bl	8000a1e <_close>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d102      	bne.n	8004c9a <_close_r+0x1a>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <_close_r+0x1a>
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	20004180 	.word	0x20004180

08004ca0 <__sflush_r>:
 8004ca0:	898a      	ldrh	r2, [r1, #12]
 8004ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	0710      	lsls	r0, r2, #28
 8004caa:	460c      	mov	r4, r1
 8004cac:	d458      	bmi.n	8004d60 <__sflush_r+0xc0>
 8004cae:	684b      	ldr	r3, [r1, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dc05      	bgt.n	8004cc0 <__sflush_r+0x20>
 8004cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	dc02      	bgt.n	8004cc0 <__sflush_r+0x20>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	d0f9      	beq.n	8004cba <__sflush_r+0x1a>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ccc:	682f      	ldr	r7, [r5, #0]
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	d032      	beq.n	8004d38 <__sflush_r+0x98>
 8004cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	075a      	lsls	r2, r3, #29
 8004cd8:	d505      	bpl.n	8004ce6 <__sflush_r+0x46>
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	1ac0      	subs	r0, r0, r3
 8004cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ce0:	b10b      	cbz	r3, 8004ce6 <__sflush_r+0x46>
 8004ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ce4:	1ac0      	subs	r0, r0, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cec:	6a21      	ldr	r1, [r4, #32]
 8004cee:	4628      	mov	r0, r5
 8004cf0:	47b0      	blx	r6
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	d106      	bne.n	8004d06 <__sflush_r+0x66>
 8004cf8:	6829      	ldr	r1, [r5, #0]
 8004cfa:	291d      	cmp	r1, #29
 8004cfc:	d82c      	bhi.n	8004d58 <__sflush_r+0xb8>
 8004cfe:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <__sflush_r+0x108>)
 8004d00:	40ca      	lsrs	r2, r1
 8004d02:	07d6      	lsls	r6, r2, #31
 8004d04:	d528      	bpl.n	8004d58 <__sflush_r+0xb8>
 8004d06:	2200      	movs	r2, #0
 8004d08:	6062      	str	r2, [r4, #4]
 8004d0a:	04d9      	lsls	r1, r3, #19
 8004d0c:	6922      	ldr	r2, [r4, #16]
 8004d0e:	6022      	str	r2, [r4, #0]
 8004d10:	d504      	bpl.n	8004d1c <__sflush_r+0x7c>
 8004d12:	1c42      	adds	r2, r0, #1
 8004d14:	d101      	bne.n	8004d1a <__sflush_r+0x7a>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	b903      	cbnz	r3, 8004d1c <__sflush_r+0x7c>
 8004d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d1e:	602f      	str	r7, [r5, #0]
 8004d20:	2900      	cmp	r1, #0
 8004d22:	d0ca      	beq.n	8004cba <__sflush_r+0x1a>
 8004d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	d002      	beq.n	8004d32 <__sflush_r+0x92>
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f000 f897 	bl	8004e60 <_free_r>
 8004d32:	2000      	movs	r0, #0
 8004d34:	6360      	str	r0, [r4, #52]	; 0x34
 8004d36:	e7c1      	b.n	8004cbc <__sflush_r+0x1c>
 8004d38:	6a21      	ldr	r1, [r4, #32]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b0      	blx	r6
 8004d40:	1c41      	adds	r1, r0, #1
 8004d42:	d1c7      	bne.n	8004cd4 <__sflush_r+0x34>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0c4      	beq.n	8004cd4 <__sflush_r+0x34>
 8004d4a:	2b1d      	cmp	r3, #29
 8004d4c:	d001      	beq.n	8004d52 <__sflush_r+0xb2>
 8004d4e:	2b16      	cmp	r3, #22
 8004d50:	d101      	bne.n	8004d56 <__sflush_r+0xb6>
 8004d52:	602f      	str	r7, [r5, #0]
 8004d54:	e7b1      	b.n	8004cba <__sflush_r+0x1a>
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	e7ad      	b.n	8004cbc <__sflush_r+0x1c>
 8004d60:	690f      	ldr	r7, [r1, #16]
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	d0a9      	beq.n	8004cba <__sflush_r+0x1a>
 8004d66:	0793      	lsls	r3, r2, #30
 8004d68:	680e      	ldr	r6, [r1, #0]
 8004d6a:	bf08      	it	eq
 8004d6c:	694b      	ldreq	r3, [r1, #20]
 8004d6e:	600f      	str	r7, [r1, #0]
 8004d70:	bf18      	it	ne
 8004d72:	2300      	movne	r3, #0
 8004d74:	eba6 0807 	sub.w	r8, r6, r7
 8004d78:	608b      	str	r3, [r1, #8]
 8004d7a:	f1b8 0f00 	cmp.w	r8, #0
 8004d7e:	dd9c      	ble.n	8004cba <__sflush_r+0x1a>
 8004d80:	6a21      	ldr	r1, [r4, #32]
 8004d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d84:	4643      	mov	r3, r8
 8004d86:	463a      	mov	r2, r7
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b0      	blx	r6
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	dc06      	bgt.n	8004d9e <__sflush_r+0xfe>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d96:	81a3      	strh	r3, [r4, #12]
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e78e      	b.n	8004cbc <__sflush_r+0x1c>
 8004d9e:	4407      	add	r7, r0
 8004da0:	eba8 0800 	sub.w	r8, r8, r0
 8004da4:	e7e9      	b.n	8004d7a <__sflush_r+0xda>
 8004da6:	bf00      	nop
 8004da8:	20400001 	.word	0x20400001

08004dac <_fflush_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	690b      	ldr	r3, [r1, #16]
 8004db0:	4605      	mov	r5, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	b913      	cbnz	r3, 8004dbc <_fflush_r+0x10>
 8004db6:	2500      	movs	r5, #0
 8004db8:	4628      	mov	r0, r5
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	b118      	cbz	r0, 8004dc6 <_fflush_r+0x1a>
 8004dbe:	6983      	ldr	r3, [r0, #24]
 8004dc0:	b90b      	cbnz	r3, 8004dc6 <_fflush_r+0x1a>
 8004dc2:	f7ff fd4d 	bl	8004860 <__sinit>
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <_fflush_r+0x6c>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	d11b      	bne.n	8004e04 <_fflush_r+0x58>
 8004dcc:	686c      	ldr	r4, [r5, #4]
 8004dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0ef      	beq.n	8004db6 <_fflush_r+0xa>
 8004dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dd8:	07d0      	lsls	r0, r2, #31
 8004dda:	d404      	bmi.n	8004de6 <_fflush_r+0x3a>
 8004ddc:	0599      	lsls	r1, r3, #22
 8004dde:	d402      	bmi.n	8004de6 <_fflush_r+0x3a>
 8004de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de2:	f7ff fe00 	bl	80049e6 <__retarget_lock_acquire_recursive>
 8004de6:	4628      	mov	r0, r5
 8004de8:	4621      	mov	r1, r4
 8004dea:	f7ff ff59 	bl	8004ca0 <__sflush_r>
 8004dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004df0:	07da      	lsls	r2, r3, #31
 8004df2:	4605      	mov	r5, r0
 8004df4:	d4e0      	bmi.n	8004db8 <_fflush_r+0xc>
 8004df6:	89a3      	ldrh	r3, [r4, #12]
 8004df8:	059b      	lsls	r3, r3, #22
 8004dfa:	d4dd      	bmi.n	8004db8 <_fflush_r+0xc>
 8004dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dfe:	f7ff fdf3 	bl	80049e8 <__retarget_lock_release_recursive>
 8004e02:	e7d9      	b.n	8004db8 <_fflush_r+0xc>
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <_fflush_r+0x70>)
 8004e06:	429c      	cmp	r4, r3
 8004e08:	d101      	bne.n	8004e0e <_fflush_r+0x62>
 8004e0a:	68ac      	ldr	r4, [r5, #8]
 8004e0c:	e7df      	b.n	8004dce <_fflush_r+0x22>
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <_fflush_r+0x74>)
 8004e10:	429c      	cmp	r4, r3
 8004e12:	bf08      	it	eq
 8004e14:	68ec      	ldreq	r4, [r5, #12]
 8004e16:	e7da      	b.n	8004dce <_fflush_r+0x22>
 8004e18:	08005820 	.word	0x08005820
 8004e1c:	08005840 	.word	0x08005840
 8004e20:	08005800 	.word	0x08005800

08004e24 <_lseek_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d07      	ldr	r5, [pc, #28]	; (8004e44 <_lseek_r+0x20>)
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f7fb fe1a 	bl	8000a6c <_lseek>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_lseek_r+0x1e>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_lseek_r+0x1e>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	20004180 	.word	0x20004180

08004e48 <__malloc_lock>:
 8004e48:	4801      	ldr	r0, [pc, #4]	; (8004e50 <__malloc_lock+0x8>)
 8004e4a:	f7ff bdcc 	b.w	80049e6 <__retarget_lock_acquire_recursive>
 8004e4e:	bf00      	nop
 8004e50:	20004178 	.word	0x20004178

08004e54 <__malloc_unlock>:
 8004e54:	4801      	ldr	r0, [pc, #4]	; (8004e5c <__malloc_unlock+0x8>)
 8004e56:	f7ff bdc7 	b.w	80049e8 <__retarget_lock_release_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	20004178 	.word	0x20004178

08004e60 <_free_r>:
 8004e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e62:	2900      	cmp	r1, #0
 8004e64:	d048      	beq.n	8004ef8 <_free_r+0x98>
 8004e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6a:	9001      	str	r0, [sp, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e72:	bfb8      	it	lt
 8004e74:	18e4      	addlt	r4, r4, r3
 8004e76:	f7ff ffe7 	bl	8004e48 <__malloc_lock>
 8004e7a:	4a20      	ldr	r2, [pc, #128]	; (8004efc <_free_r+0x9c>)
 8004e7c:	9801      	ldr	r0, [sp, #4]
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	4615      	mov	r5, r2
 8004e82:	b933      	cbnz	r3, 8004e92 <_free_r+0x32>
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	6014      	str	r4, [r2, #0]
 8004e88:	b003      	add	sp, #12
 8004e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e8e:	f7ff bfe1 	b.w	8004e54 <__malloc_unlock>
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	d90b      	bls.n	8004eae <_free_r+0x4e>
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	1862      	adds	r2, r4, r1
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	bf04      	itt	eq
 8004e9e:	681a      	ldreq	r2, [r3, #0]
 8004ea0:	685b      	ldreq	r3, [r3, #4]
 8004ea2:	6063      	str	r3, [r4, #4]
 8004ea4:	bf04      	itt	eq
 8004ea6:	1852      	addeq	r2, r2, r1
 8004ea8:	6022      	streq	r2, [r4, #0]
 8004eaa:	602c      	str	r4, [r5, #0]
 8004eac:	e7ec      	b.n	8004e88 <_free_r+0x28>
 8004eae:	461a      	mov	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b10b      	cbz	r3, 8004eb8 <_free_r+0x58>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d9fa      	bls.n	8004eae <_free_r+0x4e>
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	1855      	adds	r5, r2, r1
 8004ebc:	42a5      	cmp	r5, r4
 8004ebe:	d10b      	bne.n	8004ed8 <_free_r+0x78>
 8004ec0:	6824      	ldr	r4, [r4, #0]
 8004ec2:	4421      	add	r1, r4
 8004ec4:	1854      	adds	r4, r2, r1
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	d1dd      	bne.n	8004e88 <_free_r+0x28>
 8004ecc:	681c      	ldr	r4, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	4421      	add	r1, r4
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	e7d7      	b.n	8004e88 <_free_r+0x28>
 8004ed8:	d902      	bls.n	8004ee0 <_free_r+0x80>
 8004eda:	230c      	movs	r3, #12
 8004edc:	6003      	str	r3, [r0, #0]
 8004ede:	e7d3      	b.n	8004e88 <_free_r+0x28>
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf04      	itt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	bf04      	itt	eq
 8004ef0:	1949      	addeq	r1, r1, r5
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6054      	str	r4, [r2, #4]
 8004ef6:	e7c7      	b.n	8004e88 <_free_r+0x28>
 8004ef8:	b003      	add	sp, #12
 8004efa:	bd30      	pop	{r4, r5, pc}
 8004efc:	20004094 	.word	0x20004094

08004f00 <__sfputc_r>:
 8004f00:	6893      	ldr	r3, [r2, #8]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	b410      	push	{r4}
 8004f08:	6093      	str	r3, [r2, #8]
 8004f0a:	da08      	bge.n	8004f1e <__sfputc_r+0x1e>
 8004f0c:	6994      	ldr	r4, [r2, #24]
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	db01      	blt.n	8004f16 <__sfputc_r+0x16>
 8004f12:	290a      	cmp	r1, #10
 8004f14:	d103      	bne.n	8004f1e <__sfputc_r+0x1e>
 8004f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f1a:	f000 baf1 	b.w	8005500 <__swbuf_r>
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	1c58      	adds	r0, r3, #1
 8004f22:	6010      	str	r0, [r2, #0]
 8004f24:	7019      	strb	r1, [r3, #0]
 8004f26:	4608      	mov	r0, r1
 8004f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <__sfputs_r>:
 8004f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f30:	4606      	mov	r6, r0
 8004f32:	460f      	mov	r7, r1
 8004f34:	4614      	mov	r4, r2
 8004f36:	18d5      	adds	r5, r2, r3
 8004f38:	42ac      	cmp	r4, r5
 8004f3a:	d101      	bne.n	8004f40 <__sfputs_r+0x12>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e007      	b.n	8004f50 <__sfputs_r+0x22>
 8004f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f44:	463a      	mov	r2, r7
 8004f46:	4630      	mov	r0, r6
 8004f48:	f7ff ffda 	bl	8004f00 <__sfputc_r>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d1f3      	bne.n	8004f38 <__sfputs_r+0xa>
 8004f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f54 <_vfiprintf_r>:
 8004f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f58:	460d      	mov	r5, r1
 8004f5a:	b09d      	sub	sp, #116	; 0x74
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	4698      	mov	r8, r3
 8004f60:	4606      	mov	r6, r0
 8004f62:	b118      	cbz	r0, 8004f6c <_vfiprintf_r+0x18>
 8004f64:	6983      	ldr	r3, [r0, #24]
 8004f66:	b90b      	cbnz	r3, 8004f6c <_vfiprintf_r+0x18>
 8004f68:	f7ff fc7a 	bl	8004860 <__sinit>
 8004f6c:	4b89      	ldr	r3, [pc, #548]	; (8005194 <_vfiprintf_r+0x240>)
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	d11b      	bne.n	8004faa <_vfiprintf_r+0x56>
 8004f72:	6875      	ldr	r5, [r6, #4]
 8004f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f76:	07d9      	lsls	r1, r3, #31
 8004f78:	d405      	bmi.n	8004f86 <_vfiprintf_r+0x32>
 8004f7a:	89ab      	ldrh	r3, [r5, #12]
 8004f7c:	059a      	lsls	r2, r3, #22
 8004f7e:	d402      	bmi.n	8004f86 <_vfiprintf_r+0x32>
 8004f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f82:	f7ff fd30 	bl	80049e6 <__retarget_lock_acquire_recursive>
 8004f86:	89ab      	ldrh	r3, [r5, #12]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	d501      	bpl.n	8004f90 <_vfiprintf_r+0x3c>
 8004f8c:	692b      	ldr	r3, [r5, #16]
 8004f8e:	b9eb      	cbnz	r3, 8004fcc <_vfiprintf_r+0x78>
 8004f90:	4629      	mov	r1, r5
 8004f92:	4630      	mov	r0, r6
 8004f94:	f000 fb06 	bl	80055a4 <__swsetup_r>
 8004f98:	b1c0      	cbz	r0, 8004fcc <_vfiprintf_r+0x78>
 8004f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f9c:	07dc      	lsls	r4, r3, #31
 8004f9e:	d50e      	bpl.n	8004fbe <_vfiprintf_r+0x6a>
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	b01d      	add	sp, #116	; 0x74
 8004fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004faa:	4b7b      	ldr	r3, [pc, #492]	; (8005198 <_vfiprintf_r+0x244>)
 8004fac:	429d      	cmp	r5, r3
 8004fae:	d101      	bne.n	8004fb4 <_vfiprintf_r+0x60>
 8004fb0:	68b5      	ldr	r5, [r6, #8]
 8004fb2:	e7df      	b.n	8004f74 <_vfiprintf_r+0x20>
 8004fb4:	4b79      	ldr	r3, [pc, #484]	; (800519c <_vfiprintf_r+0x248>)
 8004fb6:	429d      	cmp	r5, r3
 8004fb8:	bf08      	it	eq
 8004fba:	68f5      	ldreq	r5, [r6, #12]
 8004fbc:	e7da      	b.n	8004f74 <_vfiprintf_r+0x20>
 8004fbe:	89ab      	ldrh	r3, [r5, #12]
 8004fc0:	0598      	lsls	r0, r3, #22
 8004fc2:	d4ed      	bmi.n	8004fa0 <_vfiprintf_r+0x4c>
 8004fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fc6:	f7ff fd0f 	bl	80049e8 <__retarget_lock_release_recursive>
 8004fca:	e7e9      	b.n	8004fa0 <_vfiprintf_r+0x4c>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd0:	2320      	movs	r3, #32
 8004fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fda:	2330      	movs	r3, #48	; 0x30
 8004fdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051a0 <_vfiprintf_r+0x24c>
 8004fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fe4:	f04f 0901 	mov.w	r9, #1
 8004fe8:	4623      	mov	r3, r4
 8004fea:	469a      	mov	sl, r3
 8004fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ff0:	b10a      	cbz	r2, 8004ff6 <_vfiprintf_r+0xa2>
 8004ff2:	2a25      	cmp	r2, #37	; 0x25
 8004ff4:	d1f9      	bne.n	8004fea <_vfiprintf_r+0x96>
 8004ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8004ffa:	d00b      	beq.n	8005014 <_vfiprintf_r+0xc0>
 8004ffc:	465b      	mov	r3, fp
 8004ffe:	4622      	mov	r2, r4
 8005000:	4629      	mov	r1, r5
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff ff93 	bl	8004f2e <__sfputs_r>
 8005008:	3001      	adds	r0, #1
 800500a:	f000 80aa 	beq.w	8005162 <_vfiprintf_r+0x20e>
 800500e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005010:	445a      	add	r2, fp
 8005012:	9209      	str	r2, [sp, #36]	; 0x24
 8005014:	f89a 3000 	ldrb.w	r3, [sl]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80a2 	beq.w	8005162 <_vfiprintf_r+0x20e>
 800501e:	2300      	movs	r3, #0
 8005020:	f04f 32ff 	mov.w	r2, #4294967295
 8005024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005028:	f10a 0a01 	add.w	sl, sl, #1
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	9307      	str	r3, [sp, #28]
 8005030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005034:	931a      	str	r3, [sp, #104]	; 0x68
 8005036:	4654      	mov	r4, sl
 8005038:	2205      	movs	r2, #5
 800503a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503e:	4858      	ldr	r0, [pc, #352]	; (80051a0 <_vfiprintf_r+0x24c>)
 8005040:	f7fb f8e6 	bl	8000210 <memchr>
 8005044:	9a04      	ldr	r2, [sp, #16]
 8005046:	b9d8      	cbnz	r0, 8005080 <_vfiprintf_r+0x12c>
 8005048:	06d1      	lsls	r1, r2, #27
 800504a:	bf44      	itt	mi
 800504c:	2320      	movmi	r3, #32
 800504e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005052:	0713      	lsls	r3, r2, #28
 8005054:	bf44      	itt	mi
 8005056:	232b      	movmi	r3, #43	; 0x2b
 8005058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800505c:	f89a 3000 	ldrb.w	r3, [sl]
 8005060:	2b2a      	cmp	r3, #42	; 0x2a
 8005062:	d015      	beq.n	8005090 <_vfiprintf_r+0x13c>
 8005064:	9a07      	ldr	r2, [sp, #28]
 8005066:	4654      	mov	r4, sl
 8005068:	2000      	movs	r0, #0
 800506a:	f04f 0c0a 	mov.w	ip, #10
 800506e:	4621      	mov	r1, r4
 8005070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005074:	3b30      	subs	r3, #48	; 0x30
 8005076:	2b09      	cmp	r3, #9
 8005078:	d94e      	bls.n	8005118 <_vfiprintf_r+0x1c4>
 800507a:	b1b0      	cbz	r0, 80050aa <_vfiprintf_r+0x156>
 800507c:	9207      	str	r2, [sp, #28]
 800507e:	e014      	b.n	80050aa <_vfiprintf_r+0x156>
 8005080:	eba0 0308 	sub.w	r3, r0, r8
 8005084:	fa09 f303 	lsl.w	r3, r9, r3
 8005088:	4313      	orrs	r3, r2
 800508a:	9304      	str	r3, [sp, #16]
 800508c:	46a2      	mov	sl, r4
 800508e:	e7d2      	b.n	8005036 <_vfiprintf_r+0xe2>
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	1d19      	adds	r1, r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	9103      	str	r1, [sp, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	bfbb      	ittet	lt
 800509c:	425b      	neglt	r3, r3
 800509e:	f042 0202 	orrlt.w	r2, r2, #2
 80050a2:	9307      	strge	r3, [sp, #28]
 80050a4:	9307      	strlt	r3, [sp, #28]
 80050a6:	bfb8      	it	lt
 80050a8:	9204      	strlt	r2, [sp, #16]
 80050aa:	7823      	ldrb	r3, [r4, #0]
 80050ac:	2b2e      	cmp	r3, #46	; 0x2e
 80050ae:	d10c      	bne.n	80050ca <_vfiprintf_r+0x176>
 80050b0:	7863      	ldrb	r3, [r4, #1]
 80050b2:	2b2a      	cmp	r3, #42	; 0x2a
 80050b4:	d135      	bne.n	8005122 <_vfiprintf_r+0x1ce>
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	1d1a      	adds	r2, r3, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	9203      	str	r2, [sp, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bfb8      	it	lt
 80050c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80050c6:	3402      	adds	r4, #2
 80050c8:	9305      	str	r3, [sp, #20]
 80050ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051b0 <_vfiprintf_r+0x25c>
 80050ce:	7821      	ldrb	r1, [r4, #0]
 80050d0:	2203      	movs	r2, #3
 80050d2:	4650      	mov	r0, sl
 80050d4:	f7fb f89c 	bl	8000210 <memchr>
 80050d8:	b140      	cbz	r0, 80050ec <_vfiprintf_r+0x198>
 80050da:	2340      	movs	r3, #64	; 0x40
 80050dc:	eba0 000a 	sub.w	r0, r0, sl
 80050e0:	fa03 f000 	lsl.w	r0, r3, r0
 80050e4:	9b04      	ldr	r3, [sp, #16]
 80050e6:	4303      	orrs	r3, r0
 80050e8:	3401      	adds	r4, #1
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f0:	482c      	ldr	r0, [pc, #176]	; (80051a4 <_vfiprintf_r+0x250>)
 80050f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050f6:	2206      	movs	r2, #6
 80050f8:	f7fb f88a 	bl	8000210 <memchr>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d03f      	beq.n	8005180 <_vfiprintf_r+0x22c>
 8005100:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <_vfiprintf_r+0x254>)
 8005102:	bb1b      	cbnz	r3, 800514c <_vfiprintf_r+0x1f8>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	3307      	adds	r3, #7
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	3308      	adds	r3, #8
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005112:	443b      	add	r3, r7
 8005114:	9309      	str	r3, [sp, #36]	; 0x24
 8005116:	e767      	b.n	8004fe8 <_vfiprintf_r+0x94>
 8005118:	fb0c 3202 	mla	r2, ip, r2, r3
 800511c:	460c      	mov	r4, r1
 800511e:	2001      	movs	r0, #1
 8005120:	e7a5      	b.n	800506e <_vfiprintf_r+0x11a>
 8005122:	2300      	movs	r3, #0
 8005124:	3401      	adds	r4, #1
 8005126:	9305      	str	r3, [sp, #20]
 8005128:	4619      	mov	r1, r3
 800512a:	f04f 0c0a 	mov.w	ip, #10
 800512e:	4620      	mov	r0, r4
 8005130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005134:	3a30      	subs	r2, #48	; 0x30
 8005136:	2a09      	cmp	r2, #9
 8005138:	d903      	bls.n	8005142 <_vfiprintf_r+0x1ee>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0c5      	beq.n	80050ca <_vfiprintf_r+0x176>
 800513e:	9105      	str	r1, [sp, #20]
 8005140:	e7c3      	b.n	80050ca <_vfiprintf_r+0x176>
 8005142:	fb0c 2101 	mla	r1, ip, r1, r2
 8005146:	4604      	mov	r4, r0
 8005148:	2301      	movs	r3, #1
 800514a:	e7f0      	b.n	800512e <_vfiprintf_r+0x1da>
 800514c:	ab03      	add	r3, sp, #12
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	462a      	mov	r2, r5
 8005152:	4b16      	ldr	r3, [pc, #88]	; (80051ac <_vfiprintf_r+0x258>)
 8005154:	a904      	add	r1, sp, #16
 8005156:	4630      	mov	r0, r6
 8005158:	f3af 8000 	nop.w
 800515c:	4607      	mov	r7, r0
 800515e:	1c78      	adds	r0, r7, #1
 8005160:	d1d6      	bne.n	8005110 <_vfiprintf_r+0x1bc>
 8005162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005164:	07d9      	lsls	r1, r3, #31
 8005166:	d405      	bmi.n	8005174 <_vfiprintf_r+0x220>
 8005168:	89ab      	ldrh	r3, [r5, #12]
 800516a:	059a      	lsls	r2, r3, #22
 800516c:	d402      	bmi.n	8005174 <_vfiprintf_r+0x220>
 800516e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005170:	f7ff fc3a 	bl	80049e8 <__retarget_lock_release_recursive>
 8005174:	89ab      	ldrh	r3, [r5, #12]
 8005176:	065b      	lsls	r3, r3, #25
 8005178:	f53f af12 	bmi.w	8004fa0 <_vfiprintf_r+0x4c>
 800517c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800517e:	e711      	b.n	8004fa4 <_vfiprintf_r+0x50>
 8005180:	ab03      	add	r3, sp, #12
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	462a      	mov	r2, r5
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <_vfiprintf_r+0x258>)
 8005188:	a904      	add	r1, sp, #16
 800518a:	4630      	mov	r0, r6
 800518c:	f000 f880 	bl	8005290 <_printf_i>
 8005190:	e7e4      	b.n	800515c <_vfiprintf_r+0x208>
 8005192:	bf00      	nop
 8005194:	08005820 	.word	0x08005820
 8005198:	08005840 	.word	0x08005840
 800519c:	08005800 	.word	0x08005800
 80051a0:	08005864 	.word	0x08005864
 80051a4:	0800586e 	.word	0x0800586e
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004f2f 	.word	0x08004f2f
 80051b0:	0800586a 	.word	0x0800586a

080051b4 <_printf_common>:
 80051b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	4616      	mov	r6, r2
 80051ba:	4699      	mov	r9, r3
 80051bc:	688a      	ldr	r2, [r1, #8]
 80051be:	690b      	ldr	r3, [r1, #16]
 80051c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	bfb8      	it	lt
 80051c8:	4613      	movlt	r3, r2
 80051ca:	6033      	str	r3, [r6, #0]
 80051cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d0:	4607      	mov	r7, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	b10a      	cbz	r2, 80051da <_printf_common+0x26>
 80051d6:	3301      	adds	r3, #1
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	0699      	lsls	r1, r3, #26
 80051de:	bf42      	ittt	mi
 80051e0:	6833      	ldrmi	r3, [r6, #0]
 80051e2:	3302      	addmi	r3, #2
 80051e4:	6033      	strmi	r3, [r6, #0]
 80051e6:	6825      	ldr	r5, [r4, #0]
 80051e8:	f015 0506 	ands.w	r5, r5, #6
 80051ec:	d106      	bne.n	80051fc <_printf_common+0x48>
 80051ee:	f104 0a19 	add.w	sl, r4, #25
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	6832      	ldr	r2, [r6, #0]
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dc26      	bgt.n	800524a <_printf_common+0x96>
 80051fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005200:	1e13      	subs	r3, r2, #0
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	bf18      	it	ne
 8005206:	2301      	movne	r3, #1
 8005208:	0692      	lsls	r2, r2, #26
 800520a:	d42b      	bmi.n	8005264 <_printf_common+0xb0>
 800520c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005210:	4649      	mov	r1, r9
 8005212:	4638      	mov	r0, r7
 8005214:	47c0      	blx	r8
 8005216:	3001      	adds	r0, #1
 8005218:	d01e      	beq.n	8005258 <_printf_common+0xa4>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	68e5      	ldr	r5, [r4, #12]
 800521e:	6832      	ldr	r2, [r6, #0]
 8005220:	f003 0306 	and.w	r3, r3, #6
 8005224:	2b04      	cmp	r3, #4
 8005226:	bf08      	it	eq
 8005228:	1aad      	subeq	r5, r5, r2
 800522a:	68a3      	ldr	r3, [r4, #8]
 800522c:	6922      	ldr	r2, [r4, #16]
 800522e:	bf0c      	ite	eq
 8005230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005234:	2500      	movne	r5, #0
 8005236:	4293      	cmp	r3, r2
 8005238:	bfc4      	itt	gt
 800523a:	1a9b      	subgt	r3, r3, r2
 800523c:	18ed      	addgt	r5, r5, r3
 800523e:	2600      	movs	r6, #0
 8005240:	341a      	adds	r4, #26
 8005242:	42b5      	cmp	r5, r6
 8005244:	d11a      	bne.n	800527c <_printf_common+0xc8>
 8005246:	2000      	movs	r0, #0
 8005248:	e008      	b.n	800525c <_printf_common+0xa8>
 800524a:	2301      	movs	r3, #1
 800524c:	4652      	mov	r2, sl
 800524e:	4649      	mov	r1, r9
 8005250:	4638      	mov	r0, r7
 8005252:	47c0      	blx	r8
 8005254:	3001      	adds	r0, #1
 8005256:	d103      	bne.n	8005260 <_printf_common+0xac>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005260:	3501      	adds	r5, #1
 8005262:	e7c6      	b.n	80051f2 <_printf_common+0x3e>
 8005264:	18e1      	adds	r1, r4, r3
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	2030      	movs	r0, #48	; 0x30
 800526a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800526e:	4422      	add	r2, r4
 8005270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005278:	3302      	adds	r3, #2
 800527a:	e7c7      	b.n	800520c <_printf_common+0x58>
 800527c:	2301      	movs	r3, #1
 800527e:	4622      	mov	r2, r4
 8005280:	4649      	mov	r1, r9
 8005282:	4638      	mov	r0, r7
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d0e6      	beq.n	8005258 <_printf_common+0xa4>
 800528a:	3601      	adds	r6, #1
 800528c:	e7d9      	b.n	8005242 <_printf_common+0x8e>
	...

08005290 <_printf_i>:
 8005290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	460c      	mov	r4, r1
 8005296:	4691      	mov	r9, r2
 8005298:	7e27      	ldrb	r7, [r4, #24]
 800529a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800529c:	2f78      	cmp	r7, #120	; 0x78
 800529e:	4680      	mov	r8, r0
 80052a0:	469a      	mov	sl, r3
 80052a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a6:	d807      	bhi.n	80052b8 <_printf_i+0x28>
 80052a8:	2f62      	cmp	r7, #98	; 0x62
 80052aa:	d80a      	bhi.n	80052c2 <_printf_i+0x32>
 80052ac:	2f00      	cmp	r7, #0
 80052ae:	f000 80d8 	beq.w	8005462 <_printf_i+0x1d2>
 80052b2:	2f58      	cmp	r7, #88	; 0x58
 80052b4:	f000 80a3 	beq.w	80053fe <_printf_i+0x16e>
 80052b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052c0:	e03a      	b.n	8005338 <_printf_i+0xa8>
 80052c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052c6:	2b15      	cmp	r3, #21
 80052c8:	d8f6      	bhi.n	80052b8 <_printf_i+0x28>
 80052ca:	a001      	add	r0, pc, #4	; (adr r0, 80052d0 <_printf_i+0x40>)
 80052cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052d0:	08005329 	.word	0x08005329
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	080052b9 	.word	0x080052b9
 80052dc:	080052b9 	.word	0x080052b9
 80052e0:	080052b9 	.word	0x080052b9
 80052e4:	080052b9 	.word	0x080052b9
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	080052b9 	.word	0x080052b9
 80052f0:	080052b9 	.word	0x080052b9
 80052f4:	080052b9 	.word	0x080052b9
 80052f8:	080052b9 	.word	0x080052b9
 80052fc:	08005449 	.word	0x08005449
 8005300:	0800536d 	.word	0x0800536d
 8005304:	0800542b 	.word	0x0800542b
 8005308:	080052b9 	.word	0x080052b9
 800530c:	080052b9 	.word	0x080052b9
 8005310:	0800546b 	.word	0x0800546b
 8005314:	080052b9 	.word	0x080052b9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052b9 	.word	0x080052b9
 8005320:	080052b9 	.word	0x080052b9
 8005324:	08005433 	.word	0x08005433
 8005328:	680b      	ldr	r3, [r1, #0]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	600a      	str	r2, [r1, #0]
 8005330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005338:	2301      	movs	r3, #1
 800533a:	e0a3      	b.n	8005484 <_printf_i+0x1f4>
 800533c:	6825      	ldr	r5, [r4, #0]
 800533e:	6808      	ldr	r0, [r1, #0]
 8005340:	062e      	lsls	r6, r5, #24
 8005342:	f100 0304 	add.w	r3, r0, #4
 8005346:	d50a      	bpl.n	800535e <_printf_i+0xce>
 8005348:	6805      	ldr	r5, [r0, #0]
 800534a:	600b      	str	r3, [r1, #0]
 800534c:	2d00      	cmp	r5, #0
 800534e:	da03      	bge.n	8005358 <_printf_i+0xc8>
 8005350:	232d      	movs	r3, #45	; 0x2d
 8005352:	426d      	negs	r5, r5
 8005354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005358:	485e      	ldr	r0, [pc, #376]	; (80054d4 <_printf_i+0x244>)
 800535a:	230a      	movs	r3, #10
 800535c:	e019      	b.n	8005392 <_printf_i+0x102>
 800535e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005362:	6805      	ldr	r5, [r0, #0]
 8005364:	600b      	str	r3, [r1, #0]
 8005366:	bf18      	it	ne
 8005368:	b22d      	sxthne	r5, r5
 800536a:	e7ef      	b.n	800534c <_printf_i+0xbc>
 800536c:	680b      	ldr	r3, [r1, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	1d18      	adds	r0, r3, #4
 8005372:	6008      	str	r0, [r1, #0]
 8005374:	0628      	lsls	r0, r5, #24
 8005376:	d501      	bpl.n	800537c <_printf_i+0xec>
 8005378:	681d      	ldr	r5, [r3, #0]
 800537a:	e002      	b.n	8005382 <_printf_i+0xf2>
 800537c:	0669      	lsls	r1, r5, #25
 800537e:	d5fb      	bpl.n	8005378 <_printf_i+0xe8>
 8005380:	881d      	ldrh	r5, [r3, #0]
 8005382:	4854      	ldr	r0, [pc, #336]	; (80054d4 <_printf_i+0x244>)
 8005384:	2f6f      	cmp	r7, #111	; 0x6f
 8005386:	bf0c      	ite	eq
 8005388:	2308      	moveq	r3, #8
 800538a:	230a      	movne	r3, #10
 800538c:	2100      	movs	r1, #0
 800538e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005392:	6866      	ldr	r6, [r4, #4]
 8005394:	60a6      	str	r6, [r4, #8]
 8005396:	2e00      	cmp	r6, #0
 8005398:	bfa2      	ittt	ge
 800539a:	6821      	ldrge	r1, [r4, #0]
 800539c:	f021 0104 	bicge.w	r1, r1, #4
 80053a0:	6021      	strge	r1, [r4, #0]
 80053a2:	b90d      	cbnz	r5, 80053a8 <_printf_i+0x118>
 80053a4:	2e00      	cmp	r6, #0
 80053a6:	d04d      	beq.n	8005444 <_printf_i+0x1b4>
 80053a8:	4616      	mov	r6, r2
 80053aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80053ae:	fb03 5711 	mls	r7, r3, r1, r5
 80053b2:	5dc7      	ldrb	r7, [r0, r7]
 80053b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053b8:	462f      	mov	r7, r5
 80053ba:	42bb      	cmp	r3, r7
 80053bc:	460d      	mov	r5, r1
 80053be:	d9f4      	bls.n	80053aa <_printf_i+0x11a>
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d10b      	bne.n	80053dc <_printf_i+0x14c>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	07df      	lsls	r7, r3, #31
 80053c8:	d508      	bpl.n	80053dc <_printf_i+0x14c>
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	6861      	ldr	r1, [r4, #4]
 80053ce:	4299      	cmp	r1, r3
 80053d0:	bfde      	ittt	le
 80053d2:	2330      	movle	r3, #48	; 0x30
 80053d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053dc:	1b92      	subs	r2, r2, r6
 80053de:	6122      	str	r2, [r4, #16]
 80053e0:	f8cd a000 	str.w	sl, [sp]
 80053e4:	464b      	mov	r3, r9
 80053e6:	aa03      	add	r2, sp, #12
 80053e8:	4621      	mov	r1, r4
 80053ea:	4640      	mov	r0, r8
 80053ec:	f7ff fee2 	bl	80051b4 <_printf_common>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d14c      	bne.n	800548e <_printf_i+0x1fe>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	b004      	add	sp, #16
 80053fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fe:	4835      	ldr	r0, [pc, #212]	; (80054d4 <_printf_i+0x244>)
 8005400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	680e      	ldr	r6, [r1, #0]
 8005408:	061f      	lsls	r7, r3, #24
 800540a:	f856 5b04 	ldr.w	r5, [r6], #4
 800540e:	600e      	str	r6, [r1, #0]
 8005410:	d514      	bpl.n	800543c <_printf_i+0x1ac>
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	bf44      	itt	mi
 8005416:	f043 0320 	orrmi.w	r3, r3, #32
 800541a:	6023      	strmi	r3, [r4, #0]
 800541c:	b91d      	cbnz	r5, 8005426 <_printf_i+0x196>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f023 0320 	bic.w	r3, r3, #32
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	2310      	movs	r3, #16
 8005428:	e7b0      	b.n	800538c <_printf_i+0xfc>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f043 0320 	orr.w	r3, r3, #32
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	2378      	movs	r3, #120	; 0x78
 8005434:	4828      	ldr	r0, [pc, #160]	; (80054d8 <_printf_i+0x248>)
 8005436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800543a:	e7e3      	b.n	8005404 <_printf_i+0x174>
 800543c:	065e      	lsls	r6, r3, #25
 800543e:	bf48      	it	mi
 8005440:	b2ad      	uxthmi	r5, r5
 8005442:	e7e6      	b.n	8005412 <_printf_i+0x182>
 8005444:	4616      	mov	r6, r2
 8005446:	e7bb      	b.n	80053c0 <_printf_i+0x130>
 8005448:	680b      	ldr	r3, [r1, #0]
 800544a:	6826      	ldr	r6, [r4, #0]
 800544c:	6960      	ldr	r0, [r4, #20]
 800544e:	1d1d      	adds	r5, r3, #4
 8005450:	600d      	str	r5, [r1, #0]
 8005452:	0635      	lsls	r5, r6, #24
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	d501      	bpl.n	800545c <_printf_i+0x1cc>
 8005458:	6018      	str	r0, [r3, #0]
 800545a:	e002      	b.n	8005462 <_printf_i+0x1d2>
 800545c:	0671      	lsls	r1, r6, #25
 800545e:	d5fb      	bpl.n	8005458 <_printf_i+0x1c8>
 8005460:	8018      	strh	r0, [r3, #0]
 8005462:	2300      	movs	r3, #0
 8005464:	6123      	str	r3, [r4, #16]
 8005466:	4616      	mov	r6, r2
 8005468:	e7ba      	b.n	80053e0 <_printf_i+0x150>
 800546a:	680b      	ldr	r3, [r1, #0]
 800546c:	1d1a      	adds	r2, r3, #4
 800546e:	600a      	str	r2, [r1, #0]
 8005470:	681e      	ldr	r6, [r3, #0]
 8005472:	6862      	ldr	r2, [r4, #4]
 8005474:	2100      	movs	r1, #0
 8005476:	4630      	mov	r0, r6
 8005478:	f7fa feca 	bl	8000210 <memchr>
 800547c:	b108      	cbz	r0, 8005482 <_printf_i+0x1f2>
 800547e:	1b80      	subs	r0, r0, r6
 8005480:	6060      	str	r0, [r4, #4]
 8005482:	6863      	ldr	r3, [r4, #4]
 8005484:	6123      	str	r3, [r4, #16]
 8005486:	2300      	movs	r3, #0
 8005488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800548c:	e7a8      	b.n	80053e0 <_printf_i+0x150>
 800548e:	6923      	ldr	r3, [r4, #16]
 8005490:	4632      	mov	r2, r6
 8005492:	4649      	mov	r1, r9
 8005494:	4640      	mov	r0, r8
 8005496:	47d0      	blx	sl
 8005498:	3001      	adds	r0, #1
 800549a:	d0ab      	beq.n	80053f4 <_printf_i+0x164>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	079b      	lsls	r3, r3, #30
 80054a0:	d413      	bmi.n	80054ca <_printf_i+0x23a>
 80054a2:	68e0      	ldr	r0, [r4, #12]
 80054a4:	9b03      	ldr	r3, [sp, #12]
 80054a6:	4298      	cmp	r0, r3
 80054a8:	bfb8      	it	lt
 80054aa:	4618      	movlt	r0, r3
 80054ac:	e7a4      	b.n	80053f8 <_printf_i+0x168>
 80054ae:	2301      	movs	r3, #1
 80054b0:	4632      	mov	r2, r6
 80054b2:	4649      	mov	r1, r9
 80054b4:	4640      	mov	r0, r8
 80054b6:	47d0      	blx	sl
 80054b8:	3001      	adds	r0, #1
 80054ba:	d09b      	beq.n	80053f4 <_printf_i+0x164>
 80054bc:	3501      	adds	r5, #1
 80054be:	68e3      	ldr	r3, [r4, #12]
 80054c0:	9903      	ldr	r1, [sp, #12]
 80054c2:	1a5b      	subs	r3, r3, r1
 80054c4:	42ab      	cmp	r3, r5
 80054c6:	dcf2      	bgt.n	80054ae <_printf_i+0x21e>
 80054c8:	e7eb      	b.n	80054a2 <_printf_i+0x212>
 80054ca:	2500      	movs	r5, #0
 80054cc:	f104 0619 	add.w	r6, r4, #25
 80054d0:	e7f5      	b.n	80054be <_printf_i+0x22e>
 80054d2:	bf00      	nop
 80054d4:	08005875 	.word	0x08005875
 80054d8:	08005886 	.word	0x08005886

080054dc <_read_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d07      	ldr	r5, [pc, #28]	; (80054fc <_read_r+0x20>)
 80054e0:	4604      	mov	r4, r0
 80054e2:	4608      	mov	r0, r1
 80054e4:	4611      	mov	r1, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7fb fa5e 	bl	80009ac <_read>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_read_r+0x1e>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_read_r+0x1e>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	20004180 	.word	0x20004180

08005500 <__swbuf_r>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	460e      	mov	r6, r1
 8005504:	4614      	mov	r4, r2
 8005506:	4605      	mov	r5, r0
 8005508:	b118      	cbz	r0, 8005512 <__swbuf_r+0x12>
 800550a:	6983      	ldr	r3, [r0, #24]
 800550c:	b90b      	cbnz	r3, 8005512 <__swbuf_r+0x12>
 800550e:	f7ff f9a7 	bl	8004860 <__sinit>
 8005512:	4b21      	ldr	r3, [pc, #132]	; (8005598 <__swbuf_r+0x98>)
 8005514:	429c      	cmp	r4, r3
 8005516:	d12b      	bne.n	8005570 <__swbuf_r+0x70>
 8005518:	686c      	ldr	r4, [r5, #4]
 800551a:	69a3      	ldr	r3, [r4, #24]
 800551c:	60a3      	str	r3, [r4, #8]
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	071a      	lsls	r2, r3, #28
 8005522:	d52f      	bpl.n	8005584 <__swbuf_r+0x84>
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	b36b      	cbz	r3, 8005584 <__swbuf_r+0x84>
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	6820      	ldr	r0, [r4, #0]
 800552c:	1ac0      	subs	r0, r0, r3
 800552e:	6963      	ldr	r3, [r4, #20]
 8005530:	b2f6      	uxtb	r6, r6
 8005532:	4283      	cmp	r3, r0
 8005534:	4637      	mov	r7, r6
 8005536:	dc04      	bgt.n	8005542 <__swbuf_r+0x42>
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	f7ff fc36 	bl	8004dac <_fflush_r>
 8005540:	bb30      	cbnz	r0, 8005590 <__swbuf_r+0x90>
 8005542:	68a3      	ldr	r3, [r4, #8]
 8005544:	3b01      	subs	r3, #1
 8005546:	60a3      	str	r3, [r4, #8]
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	701e      	strb	r6, [r3, #0]
 8005550:	6963      	ldr	r3, [r4, #20]
 8005552:	3001      	adds	r0, #1
 8005554:	4283      	cmp	r3, r0
 8005556:	d004      	beq.n	8005562 <__swbuf_r+0x62>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	07db      	lsls	r3, r3, #31
 800555c:	d506      	bpl.n	800556c <__swbuf_r+0x6c>
 800555e:	2e0a      	cmp	r6, #10
 8005560:	d104      	bne.n	800556c <__swbuf_r+0x6c>
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f7ff fc21 	bl	8004dac <_fflush_r>
 800556a:	b988      	cbnz	r0, 8005590 <__swbuf_r+0x90>
 800556c:	4638      	mov	r0, r7
 800556e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <__swbuf_r+0x9c>)
 8005572:	429c      	cmp	r4, r3
 8005574:	d101      	bne.n	800557a <__swbuf_r+0x7a>
 8005576:	68ac      	ldr	r4, [r5, #8]
 8005578:	e7cf      	b.n	800551a <__swbuf_r+0x1a>
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <__swbuf_r+0xa0>)
 800557c:	429c      	cmp	r4, r3
 800557e:	bf08      	it	eq
 8005580:	68ec      	ldreq	r4, [r5, #12]
 8005582:	e7ca      	b.n	800551a <__swbuf_r+0x1a>
 8005584:	4621      	mov	r1, r4
 8005586:	4628      	mov	r0, r5
 8005588:	f000 f80c 	bl	80055a4 <__swsetup_r>
 800558c:	2800      	cmp	r0, #0
 800558e:	d0cb      	beq.n	8005528 <__swbuf_r+0x28>
 8005590:	f04f 37ff 	mov.w	r7, #4294967295
 8005594:	e7ea      	b.n	800556c <__swbuf_r+0x6c>
 8005596:	bf00      	nop
 8005598:	08005820 	.word	0x08005820
 800559c:	08005840 	.word	0x08005840
 80055a0:	08005800 	.word	0x08005800

080055a4 <__swsetup_r>:
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <__swsetup_r+0xcc>)
 80055a6:	b570      	push	{r4, r5, r6, lr}
 80055a8:	681d      	ldr	r5, [r3, #0]
 80055aa:	4606      	mov	r6, r0
 80055ac:	460c      	mov	r4, r1
 80055ae:	b125      	cbz	r5, 80055ba <__swsetup_r+0x16>
 80055b0:	69ab      	ldr	r3, [r5, #24]
 80055b2:	b913      	cbnz	r3, 80055ba <__swsetup_r+0x16>
 80055b4:	4628      	mov	r0, r5
 80055b6:	f7ff f953 	bl	8004860 <__sinit>
 80055ba:	4b2e      	ldr	r3, [pc, #184]	; (8005674 <__swsetup_r+0xd0>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	d10f      	bne.n	80055e0 <__swsetup_r+0x3c>
 80055c0:	686c      	ldr	r4, [r5, #4]
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c8:	0719      	lsls	r1, r3, #28
 80055ca:	d42c      	bmi.n	8005626 <__swsetup_r+0x82>
 80055cc:	06dd      	lsls	r5, r3, #27
 80055ce:	d411      	bmi.n	80055f4 <__swsetup_r+0x50>
 80055d0:	2309      	movs	r3, #9
 80055d2:	6033      	str	r3, [r6, #0]
 80055d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	e03e      	b.n	800565e <__swsetup_r+0xba>
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <__swsetup_r+0xd4>)
 80055e2:	429c      	cmp	r4, r3
 80055e4:	d101      	bne.n	80055ea <__swsetup_r+0x46>
 80055e6:	68ac      	ldr	r4, [r5, #8]
 80055e8:	e7eb      	b.n	80055c2 <__swsetup_r+0x1e>
 80055ea:	4b24      	ldr	r3, [pc, #144]	; (800567c <__swsetup_r+0xd8>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	bf08      	it	eq
 80055f0:	68ec      	ldreq	r4, [r5, #12]
 80055f2:	e7e6      	b.n	80055c2 <__swsetup_r+0x1e>
 80055f4:	0758      	lsls	r0, r3, #29
 80055f6:	d512      	bpl.n	800561e <__swsetup_r+0x7a>
 80055f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055fa:	b141      	cbz	r1, 800560e <__swsetup_r+0x6a>
 80055fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005600:	4299      	cmp	r1, r3
 8005602:	d002      	beq.n	800560a <__swsetup_r+0x66>
 8005604:	4630      	mov	r0, r6
 8005606:	f7ff fc2b 	bl	8004e60 <_free_r>
 800560a:	2300      	movs	r3, #0
 800560c:	6363      	str	r3, [r4, #52]	; 0x34
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005614:	81a3      	strh	r3, [r4, #12]
 8005616:	2300      	movs	r3, #0
 8005618:	6063      	str	r3, [r4, #4]
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	f043 0308 	orr.w	r3, r3, #8
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	b94b      	cbnz	r3, 800563e <__swsetup_r+0x9a>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005634:	d003      	beq.n	800563e <__swsetup_r+0x9a>
 8005636:	4621      	mov	r1, r4
 8005638:	4630      	mov	r0, r6
 800563a:	f000 f845 	bl	80056c8 <__smakebuf_r>
 800563e:	89a0      	ldrh	r0, [r4, #12]
 8005640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005644:	f010 0301 	ands.w	r3, r0, #1
 8005648:	d00a      	beq.n	8005660 <__swsetup_r+0xbc>
 800564a:	2300      	movs	r3, #0
 800564c:	60a3      	str	r3, [r4, #8]
 800564e:	6963      	ldr	r3, [r4, #20]
 8005650:	425b      	negs	r3, r3
 8005652:	61a3      	str	r3, [r4, #24]
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	b943      	cbnz	r3, 800566a <__swsetup_r+0xc6>
 8005658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800565c:	d1ba      	bne.n	80055d4 <__swsetup_r+0x30>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	0781      	lsls	r1, r0, #30
 8005662:	bf58      	it	pl
 8005664:	6963      	ldrpl	r3, [r4, #20]
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	e7f4      	b.n	8005654 <__swsetup_r+0xb0>
 800566a:	2000      	movs	r0, #0
 800566c:	e7f7      	b.n	800565e <__swsetup_r+0xba>
 800566e:	bf00      	nop
 8005670:	20000010 	.word	0x20000010
 8005674:	08005820 	.word	0x08005820
 8005678:	08005840 	.word	0x08005840
 800567c:	08005800 	.word	0x08005800

08005680 <__swhatbuf_r>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	460e      	mov	r6, r1
 8005684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005688:	2900      	cmp	r1, #0
 800568a:	b096      	sub	sp, #88	; 0x58
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	da07      	bge.n	80056a2 <__swhatbuf_r+0x22>
 8005692:	2300      	movs	r3, #0
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	89b3      	ldrh	r3, [r6, #12]
 8005698:	061a      	lsls	r2, r3, #24
 800569a:	d410      	bmi.n	80056be <__swhatbuf_r+0x3e>
 800569c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a0:	e00e      	b.n	80056c0 <__swhatbuf_r+0x40>
 80056a2:	466a      	mov	r2, sp
 80056a4:	f000 f850 	bl	8005748 <_fstat_r>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	dbf2      	blt.n	8005692 <__swhatbuf_r+0x12>
 80056ac:	9a01      	ldr	r2, [sp, #4]
 80056ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056b6:	425a      	negs	r2, r3
 80056b8:	415a      	adcs	r2, r3
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	e7ee      	b.n	800569c <__swhatbuf_r+0x1c>
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	2000      	movs	r0, #0
 80056c2:	6023      	str	r3, [r4, #0]
 80056c4:	b016      	add	sp, #88	; 0x58
 80056c6:	bd70      	pop	{r4, r5, r6, pc}

080056c8 <__smakebuf_r>:
 80056c8:	898b      	ldrh	r3, [r1, #12]
 80056ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056cc:	079d      	lsls	r5, r3, #30
 80056ce:	4606      	mov	r6, r0
 80056d0:	460c      	mov	r4, r1
 80056d2:	d507      	bpl.n	80056e4 <__smakebuf_r+0x1c>
 80056d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	2301      	movs	r3, #1
 80056de:	6163      	str	r3, [r4, #20]
 80056e0:	b002      	add	sp, #8
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	ab01      	add	r3, sp, #4
 80056e6:	466a      	mov	r2, sp
 80056e8:	f7ff ffca 	bl	8005680 <__swhatbuf_r>
 80056ec:	9900      	ldr	r1, [sp, #0]
 80056ee:	4605      	mov	r5, r0
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7ff f983 	bl	80049fc <_malloc_r>
 80056f6:	b948      	cbnz	r0, 800570c <__smakebuf_r+0x44>
 80056f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fc:	059a      	lsls	r2, r3, #22
 80056fe:	d4ef      	bmi.n	80056e0 <__smakebuf_r+0x18>
 8005700:	f023 0303 	bic.w	r3, r3, #3
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	81a3      	strh	r3, [r4, #12]
 800570a:	e7e3      	b.n	80056d4 <__smakebuf_r+0xc>
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <__smakebuf_r+0x7c>)
 800570e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	6020      	str	r0, [r4, #0]
 8005714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	9b00      	ldr	r3, [sp, #0]
 800571c:	6163      	str	r3, [r4, #20]
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	6120      	str	r0, [r4, #16]
 8005722:	b15b      	cbz	r3, 800573c <__smakebuf_r+0x74>
 8005724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005728:	4630      	mov	r0, r6
 800572a:	f000 f81f 	bl	800576c <_isatty_r>
 800572e:	b128      	cbz	r0, 800573c <__smakebuf_r+0x74>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	89a0      	ldrh	r0, [r4, #12]
 800573e:	4305      	orrs	r5, r0
 8005740:	81a5      	strh	r5, [r4, #12]
 8005742:	e7cd      	b.n	80056e0 <__smakebuf_r+0x18>
 8005744:	080047f9 	.word	0x080047f9

08005748 <_fstat_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d07      	ldr	r5, [pc, #28]	; (8005768 <_fstat_r+0x20>)
 800574c:	2300      	movs	r3, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	4611      	mov	r1, r2
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	f7fb f96e 	bl	8000a36 <_fstat>
 800575a:	1c43      	adds	r3, r0, #1
 800575c:	d102      	bne.n	8005764 <_fstat_r+0x1c>
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	b103      	cbz	r3, 8005764 <_fstat_r+0x1c>
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	bd38      	pop	{r3, r4, r5, pc}
 8005766:	bf00      	nop
 8005768:	20004180 	.word	0x20004180

0800576c <_isatty_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d06      	ldr	r5, [pc, #24]	; (8005788 <_isatty_r+0x1c>)
 8005770:	2300      	movs	r3, #0
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fb f96d 	bl	8000a56 <_isatty>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_isatty_r+0x1a>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_isatty_r+0x1a>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	20004180 	.word	0x20004180

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
